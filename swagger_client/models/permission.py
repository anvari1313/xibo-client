# coding: utf-8

"""
    Xibo API

    Xibo CMS API  # noqa: E501

    OpenAPI spec version: 1.8.0
    Contact: info@xibo.org.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Permission(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'permission_id': 'int',
        'entity_id': 'int',
        'group_id': 'int',
        'object_id': 'int',
        'is_user': 'int',
        'entity': 'str',
        'object_id_string': 'str',
        'group': 'str',
        'view': 'int',
        'edit': 'int',
        'delete': 'int',
        'modify_permissions': 'int'
    }

    attribute_map = {
        'permission_id': 'permissionId',
        'entity_id': 'entityId',
        'group_id': 'groupId',
        'object_id': 'objectId',
        'is_user': 'isUser',
        'entity': 'entity',
        'object_id_string': 'objectIdString',
        'group': 'group',
        'view': 'view',
        'edit': 'edit',
        'delete': 'delete',
        'modify_permissions': 'modifyPermissions'
    }

    def __init__(self, permission_id=None, entity_id=None, group_id=None, object_id=None, is_user=None, entity=None, object_id_string=None, group=None, view=None, edit=None, delete=None, modify_permissions=None):  # noqa: E501
        """Permission - a model defined in Swagger"""  # noqa: E501

        self._permission_id = None
        self._entity_id = None
        self._group_id = None
        self._object_id = None
        self._is_user = None
        self._entity = None
        self._object_id_string = None
        self._group = None
        self._view = None
        self._edit = None
        self._delete = None
        self._modify_permissions = None
        self.discriminator = None

        if permission_id is not None:
            self.permission_id = permission_id
        if entity_id is not None:
            self.entity_id = entity_id
        if group_id is not None:
            self.group_id = group_id
        if object_id is not None:
            self.object_id = object_id
        if is_user is not None:
            self.is_user = is_user
        if entity is not None:
            self.entity = entity
        if object_id_string is not None:
            self.object_id_string = object_id_string
        if group is not None:
            self.group = group
        if view is not None:
            self.view = view
        if edit is not None:
            self.edit = edit
        if delete is not None:
            self.delete = delete
        if modify_permissions is not None:
            self.modify_permissions = modify_permissions

    @property
    def permission_id(self):
        """Gets the permission_id of this Permission.  # noqa: E501

        The ID of this Permission Record  # noqa: E501

        :return: The permission_id of this Permission.  # noqa: E501
        :rtype: int
        """
        return self._permission_id

    @permission_id.setter
    def permission_id(self, permission_id):
        """Sets the permission_id of this Permission.

        The ID of this Permission Record  # noqa: E501

        :param permission_id: The permission_id of this Permission.  # noqa: E501
        :type: int
        """

        self._permission_id = permission_id

    @property
    def entity_id(self):
        """Gets the entity_id of this Permission.  # noqa: E501

        The Entity ID that this Permission refers to  # noqa: E501

        :return: The entity_id of this Permission.  # noqa: E501
        :rtype: int
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this Permission.

        The Entity ID that this Permission refers to  # noqa: E501

        :param entity_id: The entity_id of this Permission.  # noqa: E501
        :type: int
        """

        self._entity_id = entity_id

    @property
    def group_id(self):
        """Gets the group_id of this Permission.  # noqa: E501

        The User Group ID that this permission refers to  # noqa: E501

        :return: The group_id of this Permission.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this Permission.

        The User Group ID that this permission refers to  # noqa: E501

        :param group_id: The group_id of this Permission.  # noqa: E501
        :type: int
        """

        self._group_id = group_id

    @property
    def object_id(self):
        """Gets the object_id of this Permission.  # noqa: E501

        The object ID that this permission refers to  # noqa: E501

        :return: The object_id of this Permission.  # noqa: E501
        :rtype: int
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this Permission.

        The object ID that this permission refers to  # noqa: E501

        :param object_id: The object_id of this Permission.  # noqa: E501
        :type: int
        """

        self._object_id = object_id

    @property
    def is_user(self):
        """Gets the is_user of this Permission.  # noqa: E501

        A flag indicating whether the groupId refers to a user specific group  # noqa: E501

        :return: The is_user of this Permission.  # noqa: E501
        :rtype: int
        """
        return self._is_user

    @is_user.setter
    def is_user(self, is_user):
        """Sets the is_user of this Permission.

        A flag indicating whether the groupId refers to a user specific group  # noqa: E501

        :param is_user: The is_user of this Permission.  # noqa: E501
        :type: int
        """

        self._is_user = is_user

    @property
    def entity(self):
        """Gets the entity of this Permission.  # noqa: E501

        The entity name that this refers to  # noqa: E501

        :return: The entity of this Permission.  # noqa: E501
        :rtype: str
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this Permission.

        The entity name that this refers to  # noqa: E501

        :param entity: The entity of this Permission.  # noqa: E501
        :type: str
        """

        self._entity = entity

    @property
    def object_id_string(self):
        """Gets the object_id_string of this Permission.  # noqa: E501

        Legacy for when the Object ID is a string  # noqa: E501

        :return: The object_id_string of this Permission.  # noqa: E501
        :rtype: str
        """
        return self._object_id_string

    @object_id_string.setter
    def object_id_string(self, object_id_string):
        """Sets the object_id_string of this Permission.

        Legacy for when the Object ID is a string  # noqa: E501

        :param object_id_string: The object_id_string of this Permission.  # noqa: E501
        :type: str
        """

        self._object_id_string = object_id_string

    @property
    def group(self):
        """Gets the group of this Permission.  # noqa: E501

        The group name that this refers to  # noqa: E501

        :return: The group of this Permission.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this Permission.

        The group name that this refers to  # noqa: E501

        :param group: The group of this Permission.  # noqa: E501
        :type: str
        """

        self._group = group

    @property
    def view(self):
        """Gets the view of this Permission.  # noqa: E501

        A flag indicating whether view permission is granted  # noqa: E501

        :return: The view of this Permission.  # noqa: E501
        :rtype: int
        """
        return self._view

    @view.setter
    def view(self, view):
        """Sets the view of this Permission.

        A flag indicating whether view permission is granted  # noqa: E501

        :param view: The view of this Permission.  # noqa: E501
        :type: int
        """

        self._view = view

    @property
    def edit(self):
        """Gets the edit of this Permission.  # noqa: E501

        A flag indicating whether edit permission is granted  # noqa: E501

        :return: The edit of this Permission.  # noqa: E501
        :rtype: int
        """
        return self._edit

    @edit.setter
    def edit(self, edit):
        """Sets the edit of this Permission.

        A flag indicating whether edit permission is granted  # noqa: E501

        :param edit: The edit of this Permission.  # noqa: E501
        :type: int
        """

        self._edit = edit

    @property
    def delete(self):
        """Gets the delete of this Permission.  # noqa: E501

        A flag indicating whether delete permission is granted  # noqa: E501

        :return: The delete of this Permission.  # noqa: E501
        :rtype: int
        """
        return self._delete

    @delete.setter
    def delete(self, delete):
        """Sets the delete of this Permission.

        A flag indicating whether delete permission is granted  # noqa: E501

        :param delete: The delete of this Permission.  # noqa: E501
        :type: int
        """

        self._delete = delete

    @property
    def modify_permissions(self):
        """Gets the modify_permissions of this Permission.  # noqa: E501

        A flag indicating whether modify permission permission is granted.  # noqa: E501

        :return: The modify_permissions of this Permission.  # noqa: E501
        :rtype: int
        """
        return self._modify_permissions

    @modify_permissions.setter
    def modify_permissions(self, modify_permissions):
        """Sets the modify_permissions of this Permission.

        A flag indicating whether modify permission permission is granted.  # noqa: E501

        :param modify_permissions: The modify_permissions of this Permission.  # noqa: E501
        :type: int
        """

        self._modify_permissions = modify_permissions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Permission):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
