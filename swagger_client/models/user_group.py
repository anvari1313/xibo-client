# coding: utf-8

"""
    Xibo API

    Xibo CMS API  # noqa: E501

    OpenAPI spec version: 1.8.0
    Contact: info@xibo.org.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UserGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'group_id': 'int',
        'group': 'str',
        'is_user_specific': 'int',
        'is_everyone': 'int',
        'library_quota': 'int',
        'is_system_notification': 'int',
        'is_display_notification': 'int'
    }

    attribute_map = {
        'group_id': 'groupId',
        'group': 'group',
        'is_user_specific': 'isUserSpecific',
        'is_everyone': 'isEveryone',
        'library_quota': 'libraryQuota',
        'is_system_notification': 'isSystemNotification',
        'is_display_notification': 'isDisplayNotification'
    }

    def __init__(self, group_id=None, group=None, is_user_specific=None, is_everyone=None, library_quota=None, is_system_notification=None, is_display_notification=None):  # noqa: E501
        """UserGroup - a model defined in Swagger"""  # noqa: E501

        self._group_id = None
        self._group = None
        self._is_user_specific = None
        self._is_everyone = None
        self._library_quota = None
        self._is_system_notification = None
        self._is_display_notification = None
        self.discriminator = None

        if group_id is not None:
            self.group_id = group_id
        if group is not None:
            self.group = group
        if is_user_specific is not None:
            self.is_user_specific = is_user_specific
        if is_everyone is not None:
            self.is_everyone = is_everyone
        if library_quota is not None:
            self.library_quota = library_quota
        if is_system_notification is not None:
            self.is_system_notification = is_system_notification
        if is_display_notification is not None:
            self.is_display_notification = is_display_notification

    @property
    def group_id(self):
        """Gets the group_id of this UserGroup.  # noqa: E501

        The Group ID  # noqa: E501

        :return: The group_id of this UserGroup.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this UserGroup.

        The Group ID  # noqa: E501

        :param group_id: The group_id of this UserGroup.  # noqa: E501
        :type: int
        """

        self._group_id = group_id

    @property
    def group(self):
        """Gets the group of this UserGroup.  # noqa: E501

        The group name  # noqa: E501

        :return: The group of this UserGroup.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this UserGroup.

        The group name  # noqa: E501

        :param group: The group of this UserGroup.  # noqa: E501
        :type: str
        """

        self._group = group

    @property
    def is_user_specific(self):
        """Gets the is_user_specific of this UserGroup.  # noqa: E501

        A flag indicating whether this is a user specific group or not  # noqa: E501

        :return: The is_user_specific of this UserGroup.  # noqa: E501
        :rtype: int
        """
        return self._is_user_specific

    @is_user_specific.setter
    def is_user_specific(self, is_user_specific):
        """Sets the is_user_specific of this UserGroup.

        A flag indicating whether this is a user specific group or not  # noqa: E501

        :param is_user_specific: The is_user_specific of this UserGroup.  # noqa: E501
        :type: int
        """

        self._is_user_specific = is_user_specific

    @property
    def is_everyone(self):
        """Gets the is_everyone of this UserGroup.  # noqa: E501

        A flag indicating the special everyone group  # noqa: E501

        :return: The is_everyone of this UserGroup.  # noqa: E501
        :rtype: int
        """
        return self._is_everyone

    @is_everyone.setter
    def is_everyone(self, is_everyone):
        """Sets the is_everyone of this UserGroup.

        A flag indicating the special everyone group  # noqa: E501

        :param is_everyone: The is_everyone of this UserGroup.  # noqa: E501
        :type: int
        """

        self._is_everyone = is_everyone

    @property
    def library_quota(self):
        """Gets the library_quota of this UserGroup.  # noqa: E501

        This users library quota in bytes. 0 = unlimited  # noqa: E501

        :return: The library_quota of this UserGroup.  # noqa: E501
        :rtype: int
        """
        return self._library_quota

    @library_quota.setter
    def library_quota(self, library_quota):
        """Sets the library_quota of this UserGroup.

        This users library quota in bytes. 0 = unlimited  # noqa: E501

        :param library_quota: The library_quota of this UserGroup.  # noqa: E501
        :type: int
        """

        self._library_quota = library_quota

    @property
    def is_system_notification(self):
        """Gets the is_system_notification of this UserGroup.  # noqa: E501

        Does this Group receive system notifications.  # noqa: E501

        :return: The is_system_notification of this UserGroup.  # noqa: E501
        :rtype: int
        """
        return self._is_system_notification

    @is_system_notification.setter
    def is_system_notification(self, is_system_notification):
        """Sets the is_system_notification of this UserGroup.

        Does this Group receive system notifications.  # noqa: E501

        :param is_system_notification: The is_system_notification of this UserGroup.  # noqa: E501
        :type: int
        """

        self._is_system_notification = is_system_notification

    @property
    def is_display_notification(self):
        """Gets the is_display_notification of this UserGroup.  # noqa: E501

        Does this Group receive display notifications.  # noqa: E501

        :return: The is_display_notification of this UserGroup.  # noqa: E501
        :rtype: int
        """
        return self._is_display_notification

    @is_display_notification.setter
    def is_display_notification(self, is_display_notification):
        """Sets the is_display_notification of this UserGroup.

        Does this Group receive display notifications.  # noqa: E501

        :param is_display_notification: The is_display_notification of this UserGroup.  # noqa: E501
        :type: int
        """

        self._is_display_notification = is_display_notification

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
