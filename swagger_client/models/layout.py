# coding: utf-8

"""
    Xibo API

    Xibo CMS API  # noqa: E501

    OpenAPI spec version: 1.8.0
    Contact: info@xibo.org.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Layout(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'layout_id': 'int',
        'owner_id': 'int',
        'campaign_id': 'int',
        'background_image_id': 'int',
        'schema_version': 'int',
        'layout': 'str',
        'description': 'str',
        'background_color': 'str',
        'created_dt': 'str',
        'modified_dt': 'str',
        'status': 'int',
        'retired': 'int',
        'backgroundz_index': 'int',
        'width': 'float',
        'height': 'float',
        'display_order': 'int',
        'duration': 'int',
        'status_message': 'str'
    }

    attribute_map = {
        'layout_id': 'layoutId',
        'owner_id': 'ownerId',
        'campaign_id': 'campaignId',
        'background_image_id': 'backgroundImageId',
        'schema_version': 'schemaVersion',
        'layout': 'layout',
        'description': 'description',
        'background_color': 'backgroundColor',
        'created_dt': 'createdDt',
        'modified_dt': 'modifiedDt',
        'status': 'status',
        'retired': 'retired',
        'backgroundz_index': 'backgroundzIndex',
        'width': 'width',
        'height': 'height',
        'display_order': 'displayOrder',
        'duration': 'duration',
        'status_message': 'statusMessage'
    }

    def __init__(self, layout_id=None, owner_id=None, campaign_id=None, background_image_id=None, schema_version=None, layout=None, description=None, background_color=None, created_dt=None, modified_dt=None, status=None, retired=None, backgroundz_index=None, width=None, height=None, display_order=None, duration=None, status_message=None):  # noqa: E501
        """Layout - a model defined in Swagger"""  # noqa: E501

        self._layout_id = None
        self._owner_id = None
        self._campaign_id = None
        self._background_image_id = None
        self._schema_version = None
        self._layout = None
        self._description = None
        self._background_color = None
        self._created_dt = None
        self._modified_dt = None
        self._status = None
        self._retired = None
        self._backgroundz_index = None
        self._width = None
        self._height = None
        self._display_order = None
        self._duration = None
        self._status_message = None
        self.discriminator = None

        if layout_id is not None:
            self.layout_id = layout_id
        if owner_id is not None:
            self.owner_id = owner_id
        if campaign_id is not None:
            self.campaign_id = campaign_id
        if background_image_id is not None:
            self.background_image_id = background_image_id
        if schema_version is not None:
            self.schema_version = schema_version
        if layout is not None:
            self.layout = layout
        if description is not None:
            self.description = description
        if background_color is not None:
            self.background_color = background_color
        if created_dt is not None:
            self.created_dt = created_dt
        if modified_dt is not None:
            self.modified_dt = modified_dt
        if status is not None:
            self.status = status
        if retired is not None:
            self.retired = retired
        if backgroundz_index is not None:
            self.backgroundz_index = backgroundz_index
        if width is not None:
            self.width = width
        if height is not None:
            self.height = height
        if display_order is not None:
            self.display_order = display_order
        if duration is not None:
            self.duration = duration
        if status_message is not None:
            self.status_message = status_message

    @property
    def layout_id(self):
        """Gets the layout_id of this Layout.  # noqa: E501

        The layoutId  # noqa: E501

        :return: The layout_id of this Layout.  # noqa: E501
        :rtype: int
        """
        return self._layout_id

    @layout_id.setter
    def layout_id(self, layout_id):
        """Sets the layout_id of this Layout.

        The layoutId  # noqa: E501

        :param layout_id: The layout_id of this Layout.  # noqa: E501
        :type: int
        """

        self._layout_id = layout_id

    @property
    def owner_id(self):
        """Gets the owner_id of this Layout.  # noqa: E501

        The userId of the Layout Owner  # noqa: E501

        :return: The owner_id of this Layout.  # noqa: E501
        :rtype: int
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this Layout.

        The userId of the Layout Owner  # noqa: E501

        :param owner_id: The owner_id of this Layout.  # noqa: E501
        :type: int
        """

        self._owner_id = owner_id

    @property
    def campaign_id(self):
        """Gets the campaign_id of this Layout.  # noqa: E501

        The id of the Layout's dedicated Campaign  # noqa: E501

        :return: The campaign_id of this Layout.  # noqa: E501
        :rtype: int
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """Sets the campaign_id of this Layout.

        The id of the Layout's dedicated Campaign  # noqa: E501

        :param campaign_id: The campaign_id of this Layout.  # noqa: E501
        :type: int
        """

        self._campaign_id = campaign_id

    @property
    def background_image_id(self):
        """Gets the background_image_id of this Layout.  # noqa: E501

        The id of the image media set as the background  # noqa: E501

        :return: The background_image_id of this Layout.  # noqa: E501
        :rtype: int
        """
        return self._background_image_id

    @background_image_id.setter
    def background_image_id(self, background_image_id):
        """Sets the background_image_id of this Layout.

        The id of the image media set as the background  # noqa: E501

        :param background_image_id: The background_image_id of this Layout.  # noqa: E501
        :type: int
        """

        self._background_image_id = background_image_id

    @property
    def schema_version(self):
        """Gets the schema_version of this Layout.  # noqa: E501

        The XLF schema version  # noqa: E501

        :return: The schema_version of this Layout.  # noqa: E501
        :rtype: int
        """
        return self._schema_version

    @schema_version.setter
    def schema_version(self, schema_version):
        """Sets the schema_version of this Layout.

        The XLF schema version  # noqa: E501

        :param schema_version: The schema_version of this Layout.  # noqa: E501
        :type: int
        """

        self._schema_version = schema_version

    @property
    def layout(self):
        """Gets the layout of this Layout.  # noqa: E501

        The name of the Layout  # noqa: E501

        :return: The layout of this Layout.  # noqa: E501
        :rtype: str
        """
        return self._layout

    @layout.setter
    def layout(self, layout):
        """Sets the layout of this Layout.

        The name of the Layout  # noqa: E501

        :param layout: The layout of this Layout.  # noqa: E501
        :type: str
        """

        self._layout = layout

    @property
    def description(self):
        """Gets the description of this Layout.  # noqa: E501

        The description of the Layout  # noqa: E501

        :return: The description of this Layout.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Layout.

        The description of the Layout  # noqa: E501

        :param description: The description of this Layout.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def background_color(self):
        """Gets the background_color of this Layout.  # noqa: E501

        A HEX string representing the Layout background color  # noqa: E501

        :return: The background_color of this Layout.  # noqa: E501
        :rtype: str
        """
        return self._background_color

    @background_color.setter
    def background_color(self, background_color):
        """Sets the background_color of this Layout.

        A HEX string representing the Layout background color  # noqa: E501

        :param background_color: The background_color of this Layout.  # noqa: E501
        :type: str
        """

        self._background_color = background_color

    @property
    def created_dt(self):
        """Gets the created_dt of this Layout.  # noqa: E501

        The datetime the Layout was created  # noqa: E501

        :return: The created_dt of this Layout.  # noqa: E501
        :rtype: str
        """
        return self._created_dt

    @created_dt.setter
    def created_dt(self, created_dt):
        """Sets the created_dt of this Layout.

        The datetime the Layout was created  # noqa: E501

        :param created_dt: The created_dt of this Layout.  # noqa: E501
        :type: str
        """

        self._created_dt = created_dt

    @property
    def modified_dt(self):
        """Gets the modified_dt of this Layout.  # noqa: E501

        The datetime the Layout was last modified  # noqa: E501

        :return: The modified_dt of this Layout.  # noqa: E501
        :rtype: str
        """
        return self._modified_dt

    @modified_dt.setter
    def modified_dt(self, modified_dt):
        """Sets the modified_dt of this Layout.

        The datetime the Layout was last modified  # noqa: E501

        :param modified_dt: The modified_dt of this Layout.  # noqa: E501
        :type: str
        """

        self._modified_dt = modified_dt

    @property
    def status(self):
        """Gets the status of this Layout.  # noqa: E501

        Flag indicating the Layout status  # noqa: E501

        :return: The status of this Layout.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Layout.

        Flag indicating the Layout status  # noqa: E501

        :param status: The status of this Layout.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def retired(self):
        """Gets the retired of this Layout.  # noqa: E501

        Flag indicating whether the Layout is retired  # noqa: E501

        :return: The retired of this Layout.  # noqa: E501
        :rtype: int
        """
        return self._retired

    @retired.setter
    def retired(self, retired):
        """Sets the retired of this Layout.

        Flag indicating whether the Layout is retired  # noqa: E501

        :param retired: The retired of this Layout.  # noqa: E501
        :type: int
        """

        self._retired = retired

    @property
    def backgroundz_index(self):
        """Gets the backgroundz_index of this Layout.  # noqa: E501

        The Layer that the background should occupy  # noqa: E501

        :return: The backgroundz_index of this Layout.  # noqa: E501
        :rtype: int
        """
        return self._backgroundz_index

    @backgroundz_index.setter
    def backgroundz_index(self, backgroundz_index):
        """Sets the backgroundz_index of this Layout.

        The Layer that the background should occupy  # noqa: E501

        :param backgroundz_index: The backgroundz_index of this Layout.  # noqa: E501
        :type: int
        """

        self._backgroundz_index = backgroundz_index

    @property
    def width(self):
        """Gets the width of this Layout.  # noqa: E501

        The Layout Width  # noqa: E501

        :return: The width of this Layout.  # noqa: E501
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this Layout.

        The Layout Width  # noqa: E501

        :param width: The width of this Layout.  # noqa: E501
        :type: float
        """

        self._width = width

    @property
    def height(self):
        """Gets the height of this Layout.  # noqa: E501

        The Layout Height  # noqa: E501

        :return: The height of this Layout.  # noqa: E501
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Layout.

        The Layout Height  # noqa: E501

        :param height: The height of this Layout.  # noqa: E501
        :type: float
        """

        self._height = height

    @property
    def display_order(self):
        """Gets the display_order of this Layout.  # noqa: E501

        If this Layout has been requested by Campaign, then this is the display order of the Layout within the Campaign  # noqa: E501

        :return: The display_order of this Layout.  # noqa: E501
        :rtype: int
        """
        return self._display_order

    @display_order.setter
    def display_order(self, display_order):
        """Sets the display_order of this Layout.

        If this Layout has been requested by Campaign, then this is the display order of the Layout within the Campaign  # noqa: E501

        :param display_order: The display_order of this Layout.  # noqa: E501
        :type: int
        """

        self._display_order = display_order

    @property
    def duration(self):
        """Gets the duration of this Layout.  # noqa: E501

        A read-only estimate of this Layout's total duration in seconds. This is equal to the longest region duration and is valid when the layout status is 1 or 2.  # noqa: E501

        :return: The duration of this Layout.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Layout.

        A read-only estimate of this Layout's total duration in seconds. This is equal to the longest region duration and is valid when the layout status is 1 or 2.  # noqa: E501

        :param duration: The duration of this Layout.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def status_message(self):
        """Gets the status_message of this Layout.  # noqa: E501

        A status message detailing any errors with the layout  # noqa: E501

        :return: The status_message of this Layout.  # noqa: E501
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this Layout.

        A status message detailing any errors with the layout  # noqa: E501

        :param status_message: The status_message of this Layout.  # noqa: E501
        :type: str
        """

        self._status_message = status_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Layout):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
