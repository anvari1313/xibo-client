# coding: utf-8

"""
    Xibo API

    Xibo CMS API  # noqa: E501

    OpenAPI spec version: 1.8.0
    Contact: info@xibo.org.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Page(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'page_id': 'int',
        'name': 'str',
        'title': 'str',
        'as_home': 'int'
    }

    attribute_map = {
        'page_id': 'pageId',
        'name': 'name',
        'title': 'title',
        'as_home': 'asHome'
    }

    def __init__(self, page_id=None, name=None, title=None, as_home=None):  # noqa: E501
        """Page - a model defined in Swagger"""  # noqa: E501

        self._page_id = None
        self._name = None
        self._title = None
        self._as_home = None
        self.discriminator = None

        if page_id is not None:
            self.page_id = page_id
        if name is not None:
            self.name = name
        if title is not None:
            self.title = title
        if as_home is not None:
            self.as_home = as_home

    @property
    def page_id(self):
        """Gets the page_id of this Page.  # noqa: E501

        The ID of the Page  # noqa: E501

        :return: The page_id of this Page.  # noqa: E501
        :rtype: int
        """
        return self._page_id

    @page_id.setter
    def page_id(self, page_id):
        """Sets the page_id of this Page.

        The ID of the Page  # noqa: E501

        :param page_id: The page_id of this Page.  # noqa: E501
        :type: int
        """

        self._page_id = page_id

    @property
    def name(self):
        """Gets the name of this Page.  # noqa: E501

        A code name for the page  # noqa: E501

        :return: The name of this Page.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Page.

        A code name for the page  # noqa: E501

        :param name: The name of this Page.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def title(self):
        """Gets the title of this Page.  # noqa: E501

        A user friendly title for this page  # noqa: E501

        :return: The title of this Page.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Page.

        A user friendly title for this page  # noqa: E501

        :param title: The title of this Page.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def as_home(self):
        """Gets the as_home of this Page.  # noqa: E501

        Flag indicating if the page can be used as a homepage  # noqa: E501

        :return: The as_home of this Page.  # noqa: E501
        :rtype: int
        """
        return self._as_home

    @as_home.setter
    def as_home(self, as_home):
        """Sets the as_home of this Page.

        Flag indicating if the page can be used as a homepage  # noqa: E501

        :param as_home: The as_home of this Page.  # noqa: E501
        :type: int
        """

        self._as_home = as_home

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Page):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
