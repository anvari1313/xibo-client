# coding: utf-8

"""
    Xibo API

    Xibo CMS API  # noqa: E501

    OpenAPI spec version: 1.8.0
    Contact: info@xibo.org.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Application(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'str',
        'secret': 'str',
        'name': 'str',
        'owner': 'str',
        'expires': 'int',
        'user_id': 'int',
        'auth_code': 'int',
        'client_credentials': 'int'
    }

    attribute_map = {
        'key': 'key',
        'secret': 'secret',
        'name': 'name',
        'owner': 'owner',
        'expires': 'expires',
        'user_id': 'userId',
        'auth_code': 'authCode',
        'client_credentials': 'clientCredentials'
    }

    def __init__(self, key=None, secret=None, name=None, owner=None, expires=None, user_id=None, auth_code=None, client_credentials=None):  # noqa: E501
        """Application - a model defined in Swagger"""  # noqa: E501

        self._key = None
        self._secret = None
        self._name = None
        self._owner = None
        self._expires = None
        self._user_id = None
        self._auth_code = None
        self._client_credentials = None
        self.discriminator = None

        if key is not None:
            self.key = key
        if secret is not None:
            self.secret = secret
        if name is not None:
            self.name = name
        if owner is not None:
            self.owner = owner
        if expires is not None:
            self.expires = expires
        if user_id is not None:
            self.user_id = user_id
        if auth_code is not None:
            self.auth_code = auth_code
        if client_credentials is not None:
            self.client_credentials = client_credentials

    @property
    def key(self):
        """Gets the key of this Application.  # noqa: E501

        Application Key  # noqa: E501

        :return: The key of this Application.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Application.

        Application Key  # noqa: E501

        :param key: The key of this Application.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def secret(self):
        """Gets the secret of this Application.  # noqa: E501

        Private Secret Key  # noqa: E501

        :return: The secret of this Application.  # noqa: E501
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this Application.

        Private Secret Key  # noqa: E501

        :param secret: The secret of this Application.  # noqa: E501
        :type: str
        """

        self._secret = secret

    @property
    def name(self):
        """Gets the name of this Application.  # noqa: E501

        Application Name  # noqa: E501

        :return: The name of this Application.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Application.

        Application Name  # noqa: E501

        :param name: The name of this Application.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def owner(self):
        """Gets the owner of this Application.  # noqa: E501

        Application Owner  # noqa: E501

        :return: The owner of this Application.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Application.

        Application Owner  # noqa: E501

        :param owner: The owner of this Application.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def expires(self):
        """Gets the expires of this Application.  # noqa: E501

        Application Session Expiry  # noqa: E501

        :return: The expires of this Application.  # noqa: E501
        :rtype: int
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this Application.

        Application Session Expiry  # noqa: E501

        :param expires: The expires of this Application.  # noqa: E501
        :type: int
        """

        self._expires = expires

    @property
    def user_id(self):
        """Gets the user_id of this Application.  # noqa: E501

        The Owner of this Application  # noqa: E501

        :return: The user_id of this Application.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Application.

        The Owner of this Application  # noqa: E501

        :param user_id: The user_id of this Application.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def auth_code(self):
        """Gets the auth_code of this Application.  # noqa: E501

        Flag indicating whether to allow the authorizationCode Grant Type  # noqa: E501

        :return: The auth_code of this Application.  # noqa: E501
        :rtype: int
        """
        return self._auth_code

    @auth_code.setter
    def auth_code(self, auth_code):
        """Sets the auth_code of this Application.

        Flag indicating whether to allow the authorizationCode Grant Type  # noqa: E501

        :param auth_code: The auth_code of this Application.  # noqa: E501
        :type: int
        """

        self._auth_code = auth_code

    @property
    def client_credentials(self):
        """Gets the client_credentials of this Application.  # noqa: E501

        Flag indicating whether to allow the clientCredentials Grant Type  # noqa: E501

        :return: The client_credentials of this Application.  # noqa: E501
        :rtype: int
        """
        return self._client_credentials

    @client_credentials.setter
    def client_credentials(self, client_credentials):
        """Sets the client_credentials of this Application.

        Flag indicating whether to allow the clientCredentials Grant Type  # noqa: E501

        :param client_credentials: The client_credentials of this Application.  # noqa: E501
        :type: int
        """

        self._client_credentials = client_credentials

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Application):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
