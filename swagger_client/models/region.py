# coding: utf-8

"""
    Xibo API

    Xibo CMS API  # noqa: E501

    OpenAPI spec version: 1.8.0
    Contact: info@xibo.org.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.permission import Permission  # noqa: F401,E501
from swagger_client.models.playlist import Playlist  # noqa: F401,E501
from swagger_client.models.region_option import RegionOption  # noqa: F401,E501


class Region(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'region_id': 'int',
        'layout_id': 'int',
        'owner_id': 'int',
        'name': 'str',
        'width': 'float',
        'height': 'float',
        'top': 'float',
        'left': 'float',
        'z_index': 'int',
        'playlists': 'list[Playlist]',
        'region_options': 'list[RegionOption]',
        'permissions': 'list[Permission]',
        'display_order': 'int',
        'duration': 'int'
    }

    attribute_map = {
        'region_id': 'regionId',
        'layout_id': 'layoutId',
        'owner_id': 'ownerId',
        'name': 'name',
        'width': 'width',
        'height': 'height',
        'top': 'top',
        'left': 'left',
        'z_index': 'zIndex',
        'playlists': 'playlists',
        'region_options': 'regionOptions',
        'permissions': 'permissions',
        'display_order': 'displayOrder',
        'duration': 'duration'
    }

    def __init__(self, region_id=None, layout_id=None, owner_id=None, name=None, width=None, height=None, top=None, left=None, z_index=None, playlists=None, region_options=None, permissions=None, display_order=None, duration=None):  # noqa: E501
        """Region - a model defined in Swagger"""  # noqa: E501

        self._region_id = None
        self._layout_id = None
        self._owner_id = None
        self._name = None
        self._width = None
        self._height = None
        self._top = None
        self._left = None
        self._z_index = None
        self._playlists = None
        self._region_options = None
        self._permissions = None
        self._display_order = None
        self._duration = None
        self.discriminator = None

        if region_id is not None:
            self.region_id = region_id
        if layout_id is not None:
            self.layout_id = layout_id
        if owner_id is not None:
            self.owner_id = owner_id
        if name is not None:
            self.name = name
        if width is not None:
            self.width = width
        if height is not None:
            self.height = height
        if top is not None:
            self.top = top
        if left is not None:
            self.left = left
        if z_index is not None:
            self.z_index = z_index
        if playlists is not None:
            self.playlists = playlists
        if region_options is not None:
            self.region_options = region_options
        if permissions is not None:
            self.permissions = permissions
        if display_order is not None:
            self.display_order = display_order
        if duration is not None:
            self.duration = duration

    @property
    def region_id(self):
        """Gets the region_id of this Region.  # noqa: E501

        The ID of this region  # noqa: E501

        :return: The region_id of this Region.  # noqa: E501
        :rtype: int
        """
        return self._region_id

    @region_id.setter
    def region_id(self, region_id):
        """Sets the region_id of this Region.

        The ID of this region  # noqa: E501

        :param region_id: The region_id of this Region.  # noqa: E501
        :type: int
        """

        self._region_id = region_id

    @property
    def layout_id(self):
        """Gets the layout_id of this Region.  # noqa: E501

        The Layout ID this region belongs to  # noqa: E501

        :return: The layout_id of this Region.  # noqa: E501
        :rtype: int
        """
        return self._layout_id

    @layout_id.setter
    def layout_id(self, layout_id):
        """Sets the layout_id of this Region.

        The Layout ID this region belongs to  # noqa: E501

        :param layout_id: The layout_id of this Region.  # noqa: E501
        :type: int
        """

        self._layout_id = layout_id

    @property
    def owner_id(self):
        """Gets the owner_id of this Region.  # noqa: E501

        The userId of the User that owns this Region  # noqa: E501

        :return: The owner_id of this Region.  # noqa: E501
        :rtype: int
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this Region.

        The userId of the User that owns this Region  # noqa: E501

        :param owner_id: The owner_id of this Region.  # noqa: E501
        :type: int
        """

        self._owner_id = owner_id

    @property
    def name(self):
        """Gets the name of this Region.  # noqa: E501

        The name of this Region  # noqa: E501

        :return: The name of this Region.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Region.

        The name of this Region  # noqa: E501

        :param name: The name of this Region.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def width(self):
        """Gets the width of this Region.  # noqa: E501

        Width of the region  # noqa: E501

        :return: The width of this Region.  # noqa: E501
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this Region.

        Width of the region  # noqa: E501

        :param width: The width of this Region.  # noqa: E501
        :type: float
        """

        self._width = width

    @property
    def height(self):
        """Gets the height of this Region.  # noqa: E501

        Height of the Region  # noqa: E501

        :return: The height of this Region.  # noqa: E501
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Region.

        Height of the Region  # noqa: E501

        :param height: The height of this Region.  # noqa: E501
        :type: float
        """

        self._height = height

    @property
    def top(self):
        """Gets the top of this Region.  # noqa: E501

        The top coordinate of the Region  # noqa: E501

        :return: The top of this Region.  # noqa: E501
        :rtype: float
        """
        return self._top

    @top.setter
    def top(self, top):
        """Sets the top of this Region.

        The top coordinate of the Region  # noqa: E501

        :param top: The top of this Region.  # noqa: E501
        :type: float
        """

        self._top = top

    @property
    def left(self):
        """Gets the left of this Region.  # noqa: E501

        The left coordinate of the Region  # noqa: E501

        :return: The left of this Region.  # noqa: E501
        :rtype: float
        """
        return self._left

    @left.setter
    def left(self, left):
        """Sets the left of this Region.

        The left coordinate of the Region  # noqa: E501

        :param left: The left of this Region.  # noqa: E501
        :type: float
        """

        self._left = left

    @property
    def z_index(self):
        """Gets the z_index of this Region.  # noqa: E501

        The z-index of the Region to control Layering  # noqa: E501

        :return: The z_index of this Region.  # noqa: E501
        :rtype: int
        """
        return self._z_index

    @z_index.setter
    def z_index(self, z_index):
        """Sets the z_index of this Region.

        The z-index of the Region to control Layering  # noqa: E501

        :param z_index: The z_index of this Region.  # noqa: E501
        :type: int
        """

        self._z_index = z_index

    @property
    def playlists(self):
        """Gets the playlists of this Region.  # noqa: E501

        An array of Playlists assigned  # noqa: E501

        :return: The playlists of this Region.  # noqa: E501
        :rtype: list[Playlist]
        """
        return self._playlists

    @playlists.setter
    def playlists(self, playlists):
        """Sets the playlists of this Region.

        An array of Playlists assigned  # noqa: E501

        :param playlists: The playlists of this Region.  # noqa: E501
        :type: list[Playlist]
        """

        self._playlists = playlists

    @property
    def region_options(self):
        """Gets the region_options of this Region.  # noqa: E501

        An array of Region Options  # noqa: E501

        :return: The region_options of this Region.  # noqa: E501
        :rtype: list[RegionOption]
        """
        return self._region_options

    @region_options.setter
    def region_options(self, region_options):
        """Sets the region_options of this Region.

        An array of Region Options  # noqa: E501

        :param region_options: The region_options of this Region.  # noqa: E501
        :type: list[RegionOption]
        """

        self._region_options = region_options

    @property
    def permissions(self):
        """Gets the permissions of this Region.  # noqa: E501

        An array of Permissions  # noqa: E501

        :return: The permissions of this Region.  # noqa: E501
        :rtype: list[Permission]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this Region.

        An array of Permissions  # noqa: E501

        :param permissions: The permissions of this Region.  # noqa: E501
        :type: list[Permission]
        """

        self._permissions = permissions

    @property
    def display_order(self):
        """Gets the display_order of this Region.  # noqa: E501

        When linked from a Playlist, what is the display order of that link  # noqa: E501

        :return: The display_order of this Region.  # noqa: E501
        :rtype: int
        """
        return self._display_order

    @display_order.setter
    def display_order(self, display_order):
        """Sets the display_order of this Region.

        When linked from a Playlist, what is the display order of that link  # noqa: E501

        :param display_order: The display_order of this Region.  # noqa: E501
        :type: int
        """

        self._display_order = display_order

    @property
    def duration(self):
        """Gets the duration of this Region.  # noqa: E501

        A read-only estimate of this Regions's total duration in seconds. This is valid when the parent layout status is 1 or 2.  # noqa: E501

        :return: The duration of this Region.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Region.

        A read-only estimate of this Regions's total duration in seconds. This is valid when the parent layout status is 1 or 2.  # noqa: E501

        :param duration: The duration of this Region.  # noqa: E501
        :type: int
        """

        self._duration = duration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Region):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
