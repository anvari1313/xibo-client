# coding: utf-8

"""
    Xibo API

    Xibo CMS API  # noqa: E501

    OpenAPI spec version: 1.8.0
    Contact: info@xibo.org.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class StatisticsData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'display': 'str',
        'layout': 'str',
        'media': 'str',
        'number_plays': 'int',
        'duration': 'int',
        'min_start': 'str',
        'max_end': 'str'
    }

    attribute_map = {
        'type': 'type',
        'display': 'display',
        'layout': 'layout',
        'media': 'media',
        'number_plays': 'numberPlays',
        'duration': 'duration',
        'min_start': 'minStart',
        'max_end': 'maxEnd'
    }

    def __init__(self, type=None, display=None, layout=None, media=None, number_plays=None, duration=None, min_start=None, max_end=None):  # noqa: E501
        """StatisticsData - a model defined in Swagger"""  # noqa: E501

        self._type = None
        self._display = None
        self._layout = None
        self._media = None
        self._number_plays = None
        self._duration = None
        self._min_start = None
        self._max_end = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if display is not None:
            self.display = display
        if layout is not None:
            self.layout = layout
        if media is not None:
            self.media = media
        if number_plays is not None:
            self.number_plays = number_plays
        if duration is not None:
            self.duration = duration
        if min_start is not None:
            self.min_start = min_start
        if max_end is not None:
            self.max_end = max_end

    @property
    def type(self):
        """Gets the type of this StatisticsData.  # noqa: E501


        :return: The type of this StatisticsData.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StatisticsData.


        :param type: The type of this StatisticsData.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def display(self):
        """Gets the display of this StatisticsData.  # noqa: E501


        :return: The display of this StatisticsData.  # noqa: E501
        :rtype: str
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this StatisticsData.


        :param display: The display of this StatisticsData.  # noqa: E501
        :type: str
        """

        self._display = display

    @property
    def layout(self):
        """Gets the layout of this StatisticsData.  # noqa: E501


        :return: The layout of this StatisticsData.  # noqa: E501
        :rtype: str
        """
        return self._layout

    @layout.setter
    def layout(self, layout):
        """Sets the layout of this StatisticsData.


        :param layout: The layout of this StatisticsData.  # noqa: E501
        :type: str
        """

        self._layout = layout

    @property
    def media(self):
        """Gets the media of this StatisticsData.  # noqa: E501


        :return: The media of this StatisticsData.  # noqa: E501
        :rtype: str
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this StatisticsData.


        :param media: The media of this StatisticsData.  # noqa: E501
        :type: str
        """

        self._media = media

    @property
    def number_plays(self):
        """Gets the number_plays of this StatisticsData.  # noqa: E501


        :return: The number_plays of this StatisticsData.  # noqa: E501
        :rtype: int
        """
        return self._number_plays

    @number_plays.setter
    def number_plays(self, number_plays):
        """Sets the number_plays of this StatisticsData.


        :param number_plays: The number_plays of this StatisticsData.  # noqa: E501
        :type: int
        """

        self._number_plays = number_plays

    @property
    def duration(self):
        """Gets the duration of this StatisticsData.  # noqa: E501


        :return: The duration of this StatisticsData.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this StatisticsData.


        :param duration: The duration of this StatisticsData.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def min_start(self):
        """Gets the min_start of this StatisticsData.  # noqa: E501


        :return: The min_start of this StatisticsData.  # noqa: E501
        :rtype: str
        """
        return self._min_start

    @min_start.setter
    def min_start(self, min_start):
        """Sets the min_start of this StatisticsData.


        :param min_start: The min_start of this StatisticsData.  # noqa: E501
        :type: str
        """

        self._min_start = min_start

    @property
    def max_end(self):
        """Gets the max_end of this StatisticsData.  # noqa: E501


        :return: The max_end of this StatisticsData.  # noqa: E501
        :rtype: str
        """
        return self._max_end

    @max_end.setter
    def max_end(self, max_end):
        """Sets the max_end of this StatisticsData.


        :param max_end: The max_end of this StatisticsData.  # noqa: E501
        :type: str
        """

        self._max_end = max_end

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatisticsData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
