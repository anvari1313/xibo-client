# coding: utf-8

"""
    Xibo API

    Xibo CMS API  # noqa: E501

    OpenAPI spec version: 1.8.0
    Contact: info@xibo.org.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Tag(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tag_id': 'int',
        'tag': 'str',
        'layout_ids': 'list[int]',
        'campaign_ids': 'list[int]',
        'media_ids': 'list[int]',
        'display_group_ids': 'list[int]'
    }

    attribute_map = {
        'tag_id': 'tagId',
        'tag': 'tag',
        'layout_ids': 'layoutIds',
        'campaign_ids': 'campaignIds',
        'media_ids': 'mediaIds',
        'display_group_ids': 'displayGroupIds'
    }

    def __init__(self, tag_id=None, tag=None, layout_ids=None, campaign_ids=None, media_ids=None, display_group_ids=None):  # noqa: E501
        """Tag - a model defined in Swagger"""  # noqa: E501

        self._tag_id = None
        self._tag = None
        self._layout_ids = None
        self._campaign_ids = None
        self._media_ids = None
        self._display_group_ids = None
        self.discriminator = None

        if tag_id is not None:
            self.tag_id = tag_id
        if tag is not None:
            self.tag = tag
        if layout_ids is not None:
            self.layout_ids = layout_ids
        if campaign_ids is not None:
            self.campaign_ids = campaign_ids
        if media_ids is not None:
            self.media_ids = media_ids
        if display_group_ids is not None:
            self.display_group_ids = display_group_ids

    @property
    def tag_id(self):
        """Gets the tag_id of this Tag.  # noqa: E501

        The Tag ID  # noqa: E501

        :return: The tag_id of this Tag.  # noqa: E501
        :rtype: int
        """
        return self._tag_id

    @tag_id.setter
    def tag_id(self, tag_id):
        """Sets the tag_id of this Tag.

        The Tag ID  # noqa: E501

        :param tag_id: The tag_id of this Tag.  # noqa: E501
        :type: int
        """

        self._tag_id = tag_id

    @property
    def tag(self):
        """Gets the tag of this Tag.  # noqa: E501

        The Tag Name  # noqa: E501

        :return: The tag of this Tag.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this Tag.

        The Tag Name  # noqa: E501

        :param tag: The tag of this Tag.  # noqa: E501
        :type: str
        """

        self._tag = tag

    @property
    def layout_ids(self):
        """Gets the layout_ids of this Tag.  # noqa: E501

        An array of layoutIDs with this Tag  # noqa: E501

        :return: The layout_ids of this Tag.  # noqa: E501
        :rtype: list[int]
        """
        return self._layout_ids

    @layout_ids.setter
    def layout_ids(self, layout_ids):
        """Sets the layout_ids of this Tag.

        An array of layoutIDs with this Tag  # noqa: E501

        :param layout_ids: The layout_ids of this Tag.  # noqa: E501
        :type: list[int]
        """

        self._layout_ids = layout_ids

    @property
    def campaign_ids(self):
        """Gets the campaign_ids of this Tag.  # noqa: E501

        An array of campaignIDs with this Tag  # noqa: E501

        :return: The campaign_ids of this Tag.  # noqa: E501
        :rtype: list[int]
        """
        return self._campaign_ids

    @campaign_ids.setter
    def campaign_ids(self, campaign_ids):
        """Sets the campaign_ids of this Tag.

        An array of campaignIDs with this Tag  # noqa: E501

        :param campaign_ids: The campaign_ids of this Tag.  # noqa: E501
        :type: list[int]
        """

        self._campaign_ids = campaign_ids

    @property
    def media_ids(self):
        """Gets the media_ids of this Tag.  # noqa: E501

        An array of mediaIds with this Tag  # noqa: E501

        :return: The media_ids of this Tag.  # noqa: E501
        :rtype: list[int]
        """
        return self._media_ids

    @media_ids.setter
    def media_ids(self, media_ids):
        """Sets the media_ids of this Tag.

        An array of mediaIds with this Tag  # noqa: E501

        :param media_ids: The media_ids of this Tag.  # noqa: E501
        :type: list[int]
        """

        self._media_ids = media_ids

    @property
    def display_group_ids(self):
        """Gets the display_group_ids of this Tag.  # noqa: E501

        An array of displayGroupIds with this Tag  # noqa: E501

        :return: The display_group_ids of this Tag.  # noqa: E501
        :rtype: list[int]
        """
        return self._display_group_ids

    @display_group_ids.setter
    def display_group_ids(self, display_group_ids):
        """Sets the display_group_ids of this Tag.

        An array of displayGroupIds with this Tag  # noqa: E501

        :param display_group_ids: The display_group_ids of this Tag.  # noqa: E501
        :type: list[int]
        """

        self._display_group_ids = display_group_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Tag):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
