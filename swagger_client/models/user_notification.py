# coding: utf-8

"""
    Xibo API

    Xibo CMS API  # noqa: E501

    OpenAPI spec version: 1.8.0
    Contact: info@xibo.org.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UserNotification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_id': 'int',
        'notification_id': 'int',
        'release_dt': 'int',
        'read_dt': 'int',
        'email_dt': 'int',
        'read': 'int',
        'subject': 'str',
        'body': 'str',
        'is_interrupt': 'int',
        'is_system': 'int'
    }

    attribute_map = {
        'user_id': 'userId',
        'notification_id': 'notificationId',
        'release_dt': 'releaseDt',
        'read_dt': 'readDt',
        'email_dt': 'emailDt',
        'read': 'read',
        'subject': 'subject',
        'body': 'body',
        'is_interrupt': 'isInterrupt',
        'is_system': 'isSystem'
    }

    def __init__(self, user_id=None, notification_id=None, release_dt=None, read_dt=None, email_dt=None, read=None, subject=None, body=None, is_interrupt=None, is_system=None):  # noqa: E501
        """UserNotification - a model defined in Swagger"""  # noqa: E501

        self._user_id = None
        self._notification_id = None
        self._release_dt = None
        self._read_dt = None
        self._email_dt = None
        self._read = None
        self._subject = None
        self._body = None
        self._is_interrupt = None
        self._is_system = None
        self.discriminator = None

        if user_id is not None:
            self.user_id = user_id
        if notification_id is not None:
            self.notification_id = notification_id
        if release_dt is not None:
            self.release_dt = release_dt
        if read_dt is not None:
            self.read_dt = read_dt
        if email_dt is not None:
            self.email_dt = email_dt
        if read is not None:
            self.read = read
        if subject is not None:
            self.subject = subject
        if body is not None:
            self.body = body
        if is_interrupt is not None:
            self.is_interrupt = is_interrupt
        if is_system is not None:
            self.is_system = is_system

    @property
    def user_id(self):
        """Gets the user_id of this UserNotification.  # noqa: E501

        The User Id  # noqa: E501

        :return: The user_id of this UserNotification.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UserNotification.

        The User Id  # noqa: E501

        :param user_id: The user_id of this UserNotification.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def notification_id(self):
        """Gets the notification_id of this UserNotification.  # noqa: E501

        The Notification Id  # noqa: E501

        :return: The notification_id of this UserNotification.  # noqa: E501
        :rtype: int
        """
        return self._notification_id

    @notification_id.setter
    def notification_id(self, notification_id):
        """Sets the notification_id of this UserNotification.

        The Notification Id  # noqa: E501

        :param notification_id: The notification_id of this UserNotification.  # noqa: E501
        :type: int
        """

        self._notification_id = notification_id

    @property
    def release_dt(self):
        """Gets the release_dt of this UserNotification.  # noqa: E501

        Release Date expressed as Unix Timestamp  # noqa: E501

        :return: The release_dt of this UserNotification.  # noqa: E501
        :rtype: int
        """
        return self._release_dt

    @release_dt.setter
    def release_dt(self, release_dt):
        """Sets the release_dt of this UserNotification.

        Release Date expressed as Unix Timestamp  # noqa: E501

        :param release_dt: The release_dt of this UserNotification.  # noqa: E501
        :type: int
        """

        self._release_dt = release_dt

    @property
    def read_dt(self):
        """Gets the read_dt of this UserNotification.  # noqa: E501

        Read Date expressed as Unix Timestamp  # noqa: E501

        :return: The read_dt of this UserNotification.  # noqa: E501
        :rtype: int
        """
        return self._read_dt

    @read_dt.setter
    def read_dt(self, read_dt):
        """Sets the read_dt of this UserNotification.

        Read Date expressed as Unix Timestamp  # noqa: E501

        :param read_dt: The read_dt of this UserNotification.  # noqa: E501
        :type: int
        """

        self._read_dt = read_dt

    @property
    def email_dt(self):
        """Gets the email_dt of this UserNotification.  # noqa: E501

        Email Date expressed as Unix Timestamp  # noqa: E501

        :return: The email_dt of this UserNotification.  # noqa: E501
        :rtype: int
        """
        return self._email_dt

    @email_dt.setter
    def email_dt(self, email_dt):
        """Sets the email_dt of this UserNotification.

        Email Date expressed as Unix Timestamp  # noqa: E501

        :param email_dt: The email_dt of this UserNotification.  # noqa: E501
        :type: int
        """

        self._email_dt = email_dt

    @property
    def read(self):
        """Gets the read of this UserNotification.  # noqa: E501

        A flag indicating whether to show as read or not  # noqa: E501

        :return: The read of this UserNotification.  # noqa: E501
        :rtype: int
        """
        return self._read

    @read.setter
    def read(self, read):
        """Sets the read of this UserNotification.

        A flag indicating whether to show as read or not  # noqa: E501

        :param read: The read of this UserNotification.  # noqa: E501
        :type: int
        """

        self._read = read

    @property
    def subject(self):
        """Gets the subject of this UserNotification.  # noqa: E501

        The subject  # noqa: E501

        :return: The subject of this UserNotification.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this UserNotification.

        The subject  # noqa: E501

        :param subject: The subject of this UserNotification.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def body(self):
        """Gets the body of this UserNotification.  # noqa: E501

        The body  # noqa: E501

        :return: The body of this UserNotification.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this UserNotification.

        The body  # noqa: E501

        :param body: The body of this UserNotification.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def is_interrupt(self):
        """Gets the is_interrupt of this UserNotification.  # noqa: E501

        Should the notification interrupt the CMS UI on navigate/login  # noqa: E501

        :return: The is_interrupt of this UserNotification.  # noqa: E501
        :rtype: int
        """
        return self._is_interrupt

    @is_interrupt.setter
    def is_interrupt(self, is_interrupt):
        """Sets the is_interrupt of this UserNotification.

        Should the notification interrupt the CMS UI on navigate/login  # noqa: E501

        :param is_interrupt: The is_interrupt of this UserNotification.  # noqa: E501
        :type: int
        """

        self._is_interrupt = is_interrupt

    @property
    def is_system(self):
        """Gets the is_system of this UserNotification.  # noqa: E501

        Flag for system notification  # noqa: E501

        :return: The is_system of this UserNotification.  # noqa: E501
        :rtype: int
        """
        return self._is_system

    @is_system.setter
    def is_system(self, is_system):
        """Sets the is_system of this UserNotification.

        Flag for system notification  # noqa: E501

        :param is_system: The is_system of this UserNotification.  # noqa: E501
        :type: int
        """

        self._is_system = is_system

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserNotification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
