# coding: utf-8

"""
    Xibo API

    Xibo CMS API  # noqa: E501

    OpenAPI spec version: 1.8.0
    Contact: info@xibo.org.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DataSetColumn(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_set_column_id': 'int',
        'data_set_id': 'int',
        'heading': 'str',
        'data_type_id': 'int',
        'data_set_column_type_id': 'int',
        'list_content': 'str',
        'column_order': 'int',
        'formula': 'str',
        'data_type': 'str',
        'remote_field': 'str',
        'show_filter': 'str',
        'show_sort': 'str',
        'data_set_column_type': 'str'
    }

    attribute_map = {
        'data_set_column_id': 'dataSetColumnId',
        'data_set_id': 'dataSetId',
        'heading': 'heading',
        'data_type_id': 'dataTypeId',
        'data_set_column_type_id': 'dataSetColumnTypeId',
        'list_content': 'listContent',
        'column_order': 'columnOrder',
        'formula': 'formula',
        'data_type': 'dataType',
        'remote_field': 'remoteField',
        'show_filter': 'showFilter',
        'show_sort': 'showSort',
        'data_set_column_type': 'dataSetColumnType'
    }

    def __init__(self, data_set_column_id=None, data_set_id=None, heading=None, data_type_id=None, data_set_column_type_id=None, list_content=None, column_order=None, formula=None, data_type=None, remote_field=None, show_filter=None, show_sort=None, data_set_column_type=None):  # noqa: E501
        """DataSetColumn - a model defined in Swagger"""  # noqa: E501

        self._data_set_column_id = None
        self._data_set_id = None
        self._heading = None
        self._data_type_id = None
        self._data_set_column_type_id = None
        self._list_content = None
        self._column_order = None
        self._formula = None
        self._data_type = None
        self._remote_field = None
        self._show_filter = None
        self._show_sort = None
        self._data_set_column_type = None
        self.discriminator = None

        if data_set_column_id is not None:
            self.data_set_column_id = data_set_column_id
        if data_set_id is not None:
            self.data_set_id = data_set_id
        if heading is not None:
            self.heading = heading
        if data_type_id is not None:
            self.data_type_id = data_type_id
        if data_set_column_type_id is not None:
            self.data_set_column_type_id = data_set_column_type_id
        if list_content is not None:
            self.list_content = list_content
        if column_order is not None:
            self.column_order = column_order
        if formula is not None:
            self.formula = formula
        if data_type is not None:
            self.data_type = data_type
        if remote_field is not None:
            self.remote_field = remote_field
        if show_filter is not None:
            self.show_filter = show_filter
        if show_sort is not None:
            self.show_sort = show_sort
        if data_set_column_type is not None:
            self.data_set_column_type = data_set_column_type

    @property
    def data_set_column_id(self):
        """Gets the data_set_column_id of this DataSetColumn.  # noqa: E501

        The ID of this DataSetColumn  # noqa: E501

        :return: The data_set_column_id of this DataSetColumn.  # noqa: E501
        :rtype: int
        """
        return self._data_set_column_id

    @data_set_column_id.setter
    def data_set_column_id(self, data_set_column_id):
        """Sets the data_set_column_id of this DataSetColumn.

        The ID of this DataSetColumn  # noqa: E501

        :param data_set_column_id: The data_set_column_id of this DataSetColumn.  # noqa: E501
        :type: int
        """

        self._data_set_column_id = data_set_column_id

    @property
    def data_set_id(self):
        """Gets the data_set_id of this DataSetColumn.  # noqa: E501

        The ID of the DataSet that this Column belongs to  # noqa: E501

        :return: The data_set_id of this DataSetColumn.  # noqa: E501
        :rtype: int
        """
        return self._data_set_id

    @data_set_id.setter
    def data_set_id(self, data_set_id):
        """Sets the data_set_id of this DataSetColumn.

        The ID of the DataSet that this Column belongs to  # noqa: E501

        :param data_set_id: The data_set_id of this DataSetColumn.  # noqa: E501
        :type: int
        """

        self._data_set_id = data_set_id

    @property
    def heading(self):
        """Gets the heading of this DataSetColumn.  # noqa: E501

        The Column Heading  # noqa: E501

        :return: The heading of this DataSetColumn.  # noqa: E501
        :rtype: str
        """
        return self._heading

    @heading.setter
    def heading(self, heading):
        """Sets the heading of this DataSetColumn.

        The Column Heading  # noqa: E501

        :param heading: The heading of this DataSetColumn.  # noqa: E501
        :type: str
        """

        self._heading = heading

    @property
    def data_type_id(self):
        """Gets the data_type_id of this DataSetColumn.  # noqa: E501

        The ID of the DataType for this Column  # noqa: E501

        :return: The data_type_id of this DataSetColumn.  # noqa: E501
        :rtype: int
        """
        return self._data_type_id

    @data_type_id.setter
    def data_type_id(self, data_type_id):
        """Sets the data_type_id of this DataSetColumn.

        The ID of the DataType for this Column  # noqa: E501

        :param data_type_id: The data_type_id of this DataSetColumn.  # noqa: E501
        :type: int
        """

        self._data_type_id = data_type_id

    @property
    def data_set_column_type_id(self):
        """Gets the data_set_column_type_id of this DataSetColumn.  # noqa: E501

        The ID of the ColumnType for this Column  # noqa: E501

        :return: The data_set_column_type_id of this DataSetColumn.  # noqa: E501
        :rtype: int
        """
        return self._data_set_column_type_id

    @data_set_column_type_id.setter
    def data_set_column_type_id(self, data_set_column_type_id):
        """Sets the data_set_column_type_id of this DataSetColumn.

        The ID of the ColumnType for this Column  # noqa: E501

        :param data_set_column_type_id: The data_set_column_type_id of this DataSetColumn.  # noqa: E501
        :type: int
        """

        self._data_set_column_type_id = data_set_column_type_id

    @property
    def list_content(self):
        """Gets the list_content of this DataSetColumn.  # noqa: E501

        Comma separated list of valid content for drop down columns  # noqa: E501

        :return: The list_content of this DataSetColumn.  # noqa: E501
        :rtype: str
        """
        return self._list_content

    @list_content.setter
    def list_content(self, list_content):
        """Sets the list_content of this DataSetColumn.

        Comma separated list of valid content for drop down columns  # noqa: E501

        :param list_content: The list_content of this DataSetColumn.  # noqa: E501
        :type: str
        """

        self._list_content = list_content

    @property
    def column_order(self):
        """Gets the column_order of this DataSetColumn.  # noqa: E501

        The order this column should be displayed  # noqa: E501

        :return: The column_order of this DataSetColumn.  # noqa: E501
        :rtype: int
        """
        return self._column_order

    @column_order.setter
    def column_order(self, column_order):
        """Sets the column_order of this DataSetColumn.

        The order this column should be displayed  # noqa: E501

        :param column_order: The column_order of this DataSetColumn.  # noqa: E501
        :type: int
        """

        self._column_order = column_order

    @property
    def formula(self):
        """Gets the formula of this DataSetColumn.  # noqa: E501

        A MySQL formula for this column  # noqa: E501

        :return: The formula of this DataSetColumn.  # noqa: E501
        :rtype: str
        """
        return self._formula

    @formula.setter
    def formula(self, formula):
        """Sets the formula of this DataSetColumn.

        A MySQL formula for this column  # noqa: E501

        :param formula: The formula of this DataSetColumn.  # noqa: E501
        :type: str
        """

        self._formula = formula

    @property
    def data_type(self):
        """Gets the data_type of this DataSetColumn.  # noqa: E501

        The data type for this Column  # noqa: E501

        :return: The data_type of this DataSetColumn.  # noqa: E501
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this DataSetColumn.

        The data type for this Column  # noqa: E501

        :param data_type: The data_type of this DataSetColumn.  # noqa: E501
        :type: str
        """

        self._data_type = data_type

    @property
    def remote_field(self):
        """Gets the remote_field of this DataSetColumn.  # noqa: E501

        The data field of the remote DataSet as a JSON-String  # noqa: E501

        :return: The remote_field of this DataSetColumn.  # noqa: E501
        :rtype: str
        """
        return self._remote_field

    @remote_field.setter
    def remote_field(self, remote_field):
        """Sets the remote_field of this DataSetColumn.

        The data field of the remote DataSet as a JSON-String  # noqa: E501

        :param remote_field: The remote_field of this DataSetColumn.  # noqa: E501
        :type: str
        """

        self._remote_field = remote_field

    @property
    def show_filter(self):
        """Gets the show_filter of this DataSetColumn.  # noqa: E501

        Does this column show a filter on the data entry page?  # noqa: E501

        :return: The show_filter of this DataSetColumn.  # noqa: E501
        :rtype: str
        """
        return self._show_filter

    @show_filter.setter
    def show_filter(self, show_filter):
        """Sets the show_filter of this DataSetColumn.

        Does this column show a filter on the data entry page?  # noqa: E501

        :param show_filter: The show_filter of this DataSetColumn.  # noqa: E501
        :type: str
        """

        self._show_filter = show_filter

    @property
    def show_sort(self):
        """Gets the show_sort of this DataSetColumn.  # noqa: E501

        Does this column allow a sorting on the data entry page?  # noqa: E501

        :return: The show_sort of this DataSetColumn.  # noqa: E501
        :rtype: str
        """
        return self._show_sort

    @show_sort.setter
    def show_sort(self, show_sort):
        """Sets the show_sort of this DataSetColumn.

        Does this column allow a sorting on the data entry page?  # noqa: E501

        :param show_sort: The show_sort of this DataSetColumn.  # noqa: E501
        :type: str
        """

        self._show_sort = show_sort

    @property
    def data_set_column_type(self):
        """Gets the data_set_column_type of this DataSetColumn.  # noqa: E501

        The column type for this Column  # noqa: E501

        :return: The data_set_column_type of this DataSetColumn.  # noqa: E501
        :rtype: str
        """
        return self._data_set_column_type

    @data_set_column_type.setter
    def data_set_column_type(self, data_set_column_type):
        """Sets the data_set_column_type of this DataSetColumn.

        The column type for this Column  # noqa: E501

        :param data_set_column_type: The data_set_column_type of this DataSetColumn.  # noqa: E501
        :type: str
        """

        self._data_set_column_type = data_set_column_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataSetColumn):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
