# coding: utf-8

"""
    Xibo API

    Xibo CMS API  # noqa: E501

    OpenAPI spec version: 1.8.0
    Contact: info@xibo.org.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Transition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'transition_id': 'int',
        'transition': 'str',
        'code': 'str',
        'has_direction': 'int',
        'has_duration': 'int',
        'available_as_in': 'int',
        'available_as_out': 'int'
    }

    attribute_map = {
        'transition_id': 'transitionId',
        'transition': 'transition',
        'code': 'code',
        'has_direction': 'hasDirection',
        'has_duration': 'hasDuration',
        'available_as_in': 'availableAsIn',
        'available_as_out': 'availableAsOut'
    }

    def __init__(self, transition_id=None, transition=None, code=None, has_direction=None, has_duration=None, available_as_in=None, available_as_out=None):  # noqa: E501
        """Transition - a model defined in Swagger"""  # noqa: E501

        self._transition_id = None
        self._transition = None
        self._code = None
        self._has_direction = None
        self._has_duration = None
        self._available_as_in = None
        self._available_as_out = None
        self.discriminator = None

        if transition_id is not None:
            self.transition_id = transition_id
        if transition is not None:
            self.transition = transition
        if code is not None:
            self.code = code
        if has_direction is not None:
            self.has_direction = has_direction
        if has_duration is not None:
            self.has_duration = has_duration
        if available_as_in is not None:
            self.available_as_in = available_as_in
        if available_as_out is not None:
            self.available_as_out = available_as_out

    @property
    def transition_id(self):
        """Gets the transition_id of this Transition.  # noqa: E501

        The transition ID  # noqa: E501

        :return: The transition_id of this Transition.  # noqa: E501
        :rtype: int
        """
        return self._transition_id

    @transition_id.setter
    def transition_id(self, transition_id):
        """Sets the transition_id of this Transition.

        The transition ID  # noqa: E501

        :param transition_id: The transition_id of this Transition.  # noqa: E501
        :type: int
        """

        self._transition_id = transition_id

    @property
    def transition(self):
        """Gets the transition of this Transition.  # noqa: E501

        The transition name  # noqa: E501

        :return: The transition of this Transition.  # noqa: E501
        :rtype: str
        """
        return self._transition

    @transition.setter
    def transition(self, transition):
        """Sets the transition of this Transition.

        The transition name  # noqa: E501

        :param transition: The transition of this Transition.  # noqa: E501
        :type: str
        """

        self._transition = transition

    @property
    def code(self):
        """Gets the code of this Transition.  # noqa: E501

        Code for transition  # noqa: E501

        :return: The code of this Transition.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Transition.

        Code for transition  # noqa: E501

        :param code: The code of this Transition.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def has_direction(self):
        """Gets the has_direction of this Transition.  # noqa: E501

        Flag indicating whether this is a directional transition  # noqa: E501

        :return: The has_direction of this Transition.  # noqa: E501
        :rtype: int
        """
        return self._has_direction

    @has_direction.setter
    def has_direction(self, has_direction):
        """Sets the has_direction of this Transition.

        Flag indicating whether this is a directional transition  # noqa: E501

        :param has_direction: The has_direction of this Transition.  # noqa: E501
        :type: int
        """

        self._has_direction = has_direction

    @property
    def has_duration(self):
        """Gets the has_duration of this Transition.  # noqa: E501

        Flag indicating whether this transition has a duration option  # noqa: E501

        :return: The has_duration of this Transition.  # noqa: E501
        :rtype: int
        """
        return self._has_duration

    @has_duration.setter
    def has_duration(self, has_duration):
        """Sets the has_duration of this Transition.

        Flag indicating whether this transition has a duration option  # noqa: E501

        :param has_duration: The has_duration of this Transition.  # noqa: E501
        :type: int
        """

        self._has_duration = has_duration

    @property
    def available_as_in(self):
        """Gets the available_as_in of this Transition.  # noqa: E501

        Flag indicating whether this transition should be available for IN assignments  # noqa: E501

        :return: The available_as_in of this Transition.  # noqa: E501
        :rtype: int
        """
        return self._available_as_in

    @available_as_in.setter
    def available_as_in(self, available_as_in):
        """Sets the available_as_in of this Transition.

        Flag indicating whether this transition should be available for IN assignments  # noqa: E501

        :param available_as_in: The available_as_in of this Transition.  # noqa: E501
        :type: int
        """

        self._available_as_in = available_as_in

    @property
    def available_as_out(self):
        """Gets the available_as_out of this Transition.  # noqa: E501

        Flag indicating whether this transition should be available for OUT assignments  # noqa: E501

        :return: The available_as_out of this Transition.  # noqa: E501
        :rtype: int
        """
        return self._available_as_out

    @available_as_out.setter
    def available_as_out(self, available_as_out):
        """Sets the available_as_out of this Transition.

        Flag indicating whether this transition should be available for OUT assignments  # noqa: E501

        :param available_as_out: The available_as_out of this Transition.  # noqa: E501
        :type: int
        """

        self._available_as_out = available_as_out

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Transition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
