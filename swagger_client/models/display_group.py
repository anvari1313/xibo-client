# coding: utf-8

"""
    Xibo API

    Xibo CMS API  # noqa: E501

    OpenAPI spec version: 1.8.0
    Contact: info@xibo.org.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.tag import Tag  # noqa: F401,E501


class DisplayGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_group_id': 'int',
        'display_group': 'str',
        'description': 'str',
        'is_display_specific': 'int',
        'is_dynamic': 'int',
        'dynamic_criteria': 'int',
        'user_id': 'int',
        'tags': 'list[Tag]'
    }

    attribute_map = {
        'display_group_id': 'displayGroupId',
        'display_group': 'displayGroup',
        'description': 'description',
        'is_display_specific': 'isDisplaySpecific',
        'is_dynamic': 'isDynamic',
        'dynamic_criteria': 'dynamicCriteria',
        'user_id': 'userId',
        'tags': 'tags'
    }

    def __init__(self, display_group_id=None, display_group=None, description=None, is_display_specific=None, is_dynamic=None, dynamic_criteria=None, user_id=None, tags=None):  # noqa: E501
        """DisplayGroup - a model defined in Swagger"""  # noqa: E501

        self._display_group_id = None
        self._display_group = None
        self._description = None
        self._is_display_specific = None
        self._is_dynamic = None
        self._dynamic_criteria = None
        self._user_id = None
        self._tags = None
        self.discriminator = None

        if display_group_id is not None:
            self.display_group_id = display_group_id
        if display_group is not None:
            self.display_group = display_group
        if description is not None:
            self.description = description
        if is_display_specific is not None:
            self.is_display_specific = is_display_specific
        if is_dynamic is not None:
            self.is_dynamic = is_dynamic
        if dynamic_criteria is not None:
            self.dynamic_criteria = dynamic_criteria
        if user_id is not None:
            self.user_id = user_id
        if tags is not None:
            self.tags = tags

    @property
    def display_group_id(self):
        """Gets the display_group_id of this DisplayGroup.  # noqa: E501

        The displayGroup Id  # noqa: E501

        :return: The display_group_id of this DisplayGroup.  # noqa: E501
        :rtype: int
        """
        return self._display_group_id

    @display_group_id.setter
    def display_group_id(self, display_group_id):
        """Sets the display_group_id of this DisplayGroup.

        The displayGroup Id  # noqa: E501

        :param display_group_id: The display_group_id of this DisplayGroup.  # noqa: E501
        :type: int
        """

        self._display_group_id = display_group_id

    @property
    def display_group(self):
        """Gets the display_group of this DisplayGroup.  # noqa: E501

        The displayGroup Name  # noqa: E501

        :return: The display_group of this DisplayGroup.  # noqa: E501
        :rtype: str
        """
        return self._display_group

    @display_group.setter
    def display_group(self, display_group):
        """Sets the display_group of this DisplayGroup.

        The displayGroup Name  # noqa: E501

        :param display_group: The display_group of this DisplayGroup.  # noqa: E501
        :type: str
        """

        self._display_group = display_group

    @property
    def description(self):
        """Gets the description of this DisplayGroup.  # noqa: E501

        The displayGroup Description  # noqa: E501

        :return: The description of this DisplayGroup.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DisplayGroup.

        The displayGroup Description  # noqa: E501

        :param description: The description of this DisplayGroup.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def is_display_specific(self):
        """Gets the is_display_specific of this DisplayGroup.  # noqa: E501

        A flag indicating whether this displayGroup is a single display displayGroup  # noqa: E501

        :return: The is_display_specific of this DisplayGroup.  # noqa: E501
        :rtype: int
        """
        return self._is_display_specific

    @is_display_specific.setter
    def is_display_specific(self, is_display_specific):
        """Sets the is_display_specific of this DisplayGroup.

        A flag indicating whether this displayGroup is a single display displayGroup  # noqa: E501

        :param is_display_specific: The is_display_specific of this DisplayGroup.  # noqa: E501
        :type: int
        """

        self._is_display_specific = is_display_specific

    @property
    def is_dynamic(self):
        """Gets the is_dynamic of this DisplayGroup.  # noqa: E501

        A flag indicating whether this displayGroup is dynamic  # noqa: E501

        :return: The is_dynamic of this DisplayGroup.  # noqa: E501
        :rtype: int
        """
        return self._is_dynamic

    @is_dynamic.setter
    def is_dynamic(self, is_dynamic):
        """Sets the is_dynamic of this DisplayGroup.

        A flag indicating whether this displayGroup is dynamic  # noqa: E501

        :param is_dynamic: The is_dynamic of this DisplayGroup.  # noqa: E501
        :type: int
        """

        self._is_dynamic = is_dynamic

    @property
    def dynamic_criteria(self):
        """Gets the dynamic_criteria of this DisplayGroup.  # noqa: E501

        A flag indicating whether this displayGroup is dynamic  # noqa: E501

        :return: The dynamic_criteria of this DisplayGroup.  # noqa: E501
        :rtype: int
        """
        return self._dynamic_criteria

    @dynamic_criteria.setter
    def dynamic_criteria(self, dynamic_criteria):
        """Sets the dynamic_criteria of this DisplayGroup.

        A flag indicating whether this displayGroup is dynamic  # noqa: E501

        :param dynamic_criteria: The dynamic_criteria of this DisplayGroup.  # noqa: E501
        :type: int
        """

        self._dynamic_criteria = dynamic_criteria

    @property
    def user_id(self):
        """Gets the user_id of this DisplayGroup.  # noqa: E501

        The UserId who owns this display group  # noqa: E501

        :return: The user_id of this DisplayGroup.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this DisplayGroup.

        The UserId who owns this display group  # noqa: E501

        :param user_id: The user_id of this DisplayGroup.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def tags(self):
        """Gets the tags of this DisplayGroup.  # noqa: E501

        Tags associated with this DisplayGroup  # noqa: E501

        :return: The tags of this DisplayGroup.  # noqa: E501
        :rtype: list[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this DisplayGroup.

        Tags associated with this DisplayGroup  # noqa: E501

        :param tags: The tags of this DisplayGroup.  # noqa: E501
        :type: list[Tag]
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DisplayGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
