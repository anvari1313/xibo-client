# coding: utf-8

"""
    Xibo API

    Xibo CMS API  # noqa: E501

    OpenAPI spec version: 1.8.0
    Contact: info@xibo.org.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.display_group import DisplayGroup  # noqa: F401,E501


class Schedule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'event_id': 'int',
        'event_type_id': 'int',
        'campaign_id': 'int',
        'command_id': 'int',
        'display_groups': 'list[DisplayGroup]',
        'user_id': 'int',
        'from_dt': 'int',
        'to_dt': 'int',
        'is_priority': 'int',
        'display_order': 'int',
        'recurrence_type': 'str',
        'recurrence_detail': 'int',
        'recurrence_range': 'int',
        'recurrence_repeats_on': 'str',
        'campaign': 'str',
        'command': 'str',
        'day_part_id': 'int',
        'is_always': 'int',
        'is_custom': 'int',
        'sync_timezone': 'int'
    }

    attribute_map = {
        'event_id': 'eventId',
        'event_type_id': 'eventTypeId',
        'campaign_id': 'campaignId',
        'command_id': 'commandId',
        'display_groups': 'displayGroups',
        'user_id': 'userId',
        'from_dt': 'fromDt',
        'to_dt': 'toDt',
        'is_priority': 'isPriority',
        'display_order': 'displayOrder',
        'recurrence_type': 'recurrenceType',
        'recurrence_detail': 'recurrenceDetail',
        'recurrence_range': 'recurrenceRange',
        'recurrence_repeats_on': 'recurrenceRepeatsOn',
        'campaign': 'campaign',
        'command': 'command',
        'day_part_id': 'dayPartId',
        'is_always': 'isAlways',
        'is_custom': 'isCustom',
        'sync_timezone': 'syncTimezone'
    }

    def __init__(self, event_id=None, event_type_id=None, campaign_id=None, command_id=None, display_groups=None, user_id=None, from_dt=None, to_dt=None, is_priority=None, display_order=None, recurrence_type=None, recurrence_detail=None, recurrence_range=None, recurrence_repeats_on=None, campaign=None, command=None, day_part_id=None, is_always=None, is_custom=None, sync_timezone=None):  # noqa: E501
        """Schedule - a model defined in Swagger"""  # noqa: E501

        self._event_id = None
        self._event_type_id = None
        self._campaign_id = None
        self._command_id = None
        self._display_groups = None
        self._user_id = None
        self._from_dt = None
        self._to_dt = None
        self._is_priority = None
        self._display_order = None
        self._recurrence_type = None
        self._recurrence_detail = None
        self._recurrence_range = None
        self._recurrence_repeats_on = None
        self._campaign = None
        self._command = None
        self._day_part_id = None
        self._is_always = None
        self._is_custom = None
        self._sync_timezone = None
        self.discriminator = None

        if event_id is not None:
            self.event_id = event_id
        if event_type_id is not None:
            self.event_type_id = event_type_id
        if campaign_id is not None:
            self.campaign_id = campaign_id
        if command_id is not None:
            self.command_id = command_id
        if display_groups is not None:
            self.display_groups = display_groups
        if user_id is not None:
            self.user_id = user_id
        if from_dt is not None:
            self.from_dt = from_dt
        if to_dt is not None:
            self.to_dt = to_dt
        if is_priority is not None:
            self.is_priority = is_priority
        if display_order is not None:
            self.display_order = display_order
        if recurrence_type is not None:
            self.recurrence_type = recurrence_type
        if recurrence_detail is not None:
            self.recurrence_detail = recurrence_detail
        if recurrence_range is not None:
            self.recurrence_range = recurrence_range
        if recurrence_repeats_on is not None:
            self.recurrence_repeats_on = recurrence_repeats_on
        if campaign is not None:
            self.campaign = campaign
        if command is not None:
            self.command = command
        if day_part_id is not None:
            self.day_part_id = day_part_id
        if is_always is not None:
            self.is_always = is_always
        if is_custom is not None:
            self.is_custom = is_custom
        if sync_timezone is not None:
            self.sync_timezone = sync_timezone

    @property
    def event_id(self):
        """Gets the event_id of this Schedule.  # noqa: E501

        The ID of this Event  # noqa: E501

        :return: The event_id of this Schedule.  # noqa: E501
        :rtype: int
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this Schedule.

        The ID of this Event  # noqa: E501

        :param event_id: The event_id of this Schedule.  # noqa: E501
        :type: int
        """

        self._event_id = event_id

    @property
    def event_type_id(self):
        """Gets the event_type_id of this Schedule.  # noqa: E501

        The Event Type ID  # noqa: E501

        :return: The event_type_id of this Schedule.  # noqa: E501
        :rtype: int
        """
        return self._event_type_id

    @event_type_id.setter
    def event_type_id(self, event_type_id):
        """Sets the event_type_id of this Schedule.

        The Event Type ID  # noqa: E501

        :param event_type_id: The event_type_id of this Schedule.  # noqa: E501
        :type: int
        """

        self._event_type_id = event_type_id

    @property
    def campaign_id(self):
        """Gets the campaign_id of this Schedule.  # noqa: E501

        The CampaignID this event is for  # noqa: E501

        :return: The campaign_id of this Schedule.  # noqa: E501
        :rtype: int
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """Sets the campaign_id of this Schedule.

        The CampaignID this event is for  # noqa: E501

        :param campaign_id: The campaign_id of this Schedule.  # noqa: E501
        :type: int
        """

        self._campaign_id = campaign_id

    @property
    def command_id(self):
        """Gets the command_id of this Schedule.  # noqa: E501

        The CommandId this event is for  # noqa: E501

        :return: The command_id of this Schedule.  # noqa: E501
        :rtype: int
        """
        return self._command_id

    @command_id.setter
    def command_id(self, command_id):
        """Sets the command_id of this Schedule.

        The CommandId this event is for  # noqa: E501

        :param command_id: The command_id of this Schedule.  # noqa: E501
        :type: int
        """

        self._command_id = command_id

    @property
    def display_groups(self):
        """Gets the display_groups of this Schedule.  # noqa: E501

        Display Groups assigned to this Scheduled Event.  # noqa: E501

        :return: The display_groups of this Schedule.  # noqa: E501
        :rtype: list[DisplayGroup]
        """
        return self._display_groups

    @display_groups.setter
    def display_groups(self, display_groups):
        """Sets the display_groups of this Schedule.

        Display Groups assigned to this Scheduled Event.  # noqa: E501

        :param display_groups: The display_groups of this Schedule.  # noqa: E501
        :type: list[DisplayGroup]
        """

        self._display_groups = display_groups

    @property
    def user_id(self):
        """Gets the user_id of this Schedule.  # noqa: E501

        The userId that owns this event.  # noqa: E501

        :return: The user_id of this Schedule.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Schedule.

        The userId that owns this event.  # noqa: E501

        :param user_id: The user_id of this Schedule.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def from_dt(self):
        """Gets the from_dt of this Schedule.  # noqa: E501

        A Unix timestamp representing the from date of this event in CMS time.  # noqa: E501

        :return: The from_dt of this Schedule.  # noqa: E501
        :rtype: int
        """
        return self._from_dt

    @from_dt.setter
    def from_dt(self, from_dt):
        """Sets the from_dt of this Schedule.

        A Unix timestamp representing the from date of this event in CMS time.  # noqa: E501

        :param from_dt: The from_dt of this Schedule.  # noqa: E501
        :type: int
        """

        self._from_dt = from_dt

    @property
    def to_dt(self):
        """Gets the to_dt of this Schedule.  # noqa: E501

        A Unix timestamp representing the to date of this event in CMS time.  # noqa: E501

        :return: The to_dt of this Schedule.  # noqa: E501
        :rtype: int
        """
        return self._to_dt

    @to_dt.setter
    def to_dt(self, to_dt):
        """Sets the to_dt of this Schedule.

        A Unix timestamp representing the to date of this event in CMS time.  # noqa: E501

        :param to_dt: The to_dt of this Schedule.  # noqa: E501
        :type: int
        """

        self._to_dt = to_dt

    @property
    def is_priority(self):
        """Gets the is_priority of this Schedule.  # noqa: E501

        Integer indicating the event priority.  # noqa: E501

        :return: The is_priority of this Schedule.  # noqa: E501
        :rtype: int
        """
        return self._is_priority

    @is_priority.setter
    def is_priority(self, is_priority):
        """Sets the is_priority of this Schedule.

        Integer indicating the event priority.  # noqa: E501

        :param is_priority: The is_priority of this Schedule.  # noqa: E501
        :type: int
        """

        self._is_priority = is_priority

    @property
    def display_order(self):
        """Gets the display_order of this Schedule.  # noqa: E501

        The display order for this event.  # noqa: E501

        :return: The display_order of this Schedule.  # noqa: E501
        :rtype: int
        """
        return self._display_order

    @display_order.setter
    def display_order(self, display_order):
        """Sets the display_order of this Schedule.

        The display order for this event.  # noqa: E501

        :param display_order: The display_order of this Schedule.  # noqa: E501
        :type: int
        """

        self._display_order = display_order

    @property
    def recurrence_type(self):
        """Gets the recurrence_type of this Schedule.  # noqa: E501

        If this event recurs when what is the recurrence period.  # noqa: E501

        :return: The recurrence_type of this Schedule.  # noqa: E501
        :rtype: str
        """
        return self._recurrence_type

    @recurrence_type.setter
    def recurrence_type(self, recurrence_type):
        """Sets the recurrence_type of this Schedule.

        If this event recurs when what is the recurrence period.  # noqa: E501

        :param recurrence_type: The recurrence_type of this Schedule.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "Minute", "Hour", "Day", "Week", "Month", "Year"]  # noqa: E501
        if recurrence_type not in allowed_values:
            raise ValueError(
                "Invalid value for `recurrence_type` ({0}), must be one of {1}"  # noqa: E501
                .format(recurrence_type, allowed_values)
            )

        self._recurrence_type = recurrence_type

    @property
    def recurrence_detail(self):
        """Gets the recurrence_detail of this Schedule.  # noqa: E501

        If this event recurs when what is the recurrence frequency.  # noqa: E501

        :return: The recurrence_detail of this Schedule.  # noqa: E501
        :rtype: int
        """
        return self._recurrence_detail

    @recurrence_detail.setter
    def recurrence_detail(self, recurrence_detail):
        """Sets the recurrence_detail of this Schedule.

        If this event recurs when what is the recurrence frequency.  # noqa: E501

        :param recurrence_detail: The recurrence_detail of this Schedule.  # noqa: E501
        :type: int
        """

        self._recurrence_detail = recurrence_detail

    @property
    def recurrence_range(self):
        """Gets the recurrence_range of this Schedule.  # noqa: E501

        A Unix timestamp indicating the end time of the recurring events.  # noqa: E501

        :return: The recurrence_range of this Schedule.  # noqa: E501
        :rtype: int
        """
        return self._recurrence_range

    @recurrence_range.setter
    def recurrence_range(self, recurrence_range):
        """Sets the recurrence_range of this Schedule.

        A Unix timestamp indicating the end time of the recurring events.  # noqa: E501

        :param recurrence_range: The recurrence_range of this Schedule.  # noqa: E501
        :type: int
        """

        self._recurrence_range = recurrence_range

    @property
    def recurrence_repeats_on(self):
        """Gets the recurrence_repeats_on of this Schedule.  # noqa: E501

        Recurrence repeats on days - 0 to 7 where 0 is a monday  # noqa: E501

        :return: The recurrence_repeats_on of this Schedule.  # noqa: E501
        :rtype: str
        """
        return self._recurrence_repeats_on

    @recurrence_repeats_on.setter
    def recurrence_repeats_on(self, recurrence_repeats_on):
        """Sets the recurrence_repeats_on of this Schedule.

        Recurrence repeats on days - 0 to 7 where 0 is a monday  # noqa: E501

        :param recurrence_repeats_on: The recurrence_repeats_on of this Schedule.  # noqa: E501
        :type: str
        """

        self._recurrence_repeats_on = recurrence_repeats_on

    @property
    def campaign(self):
        """Gets the campaign of this Schedule.  # noqa: E501

        The Campaign/Layout Name  # noqa: E501

        :return: The campaign of this Schedule.  # noqa: E501
        :rtype: str
        """
        return self._campaign

    @campaign.setter
    def campaign(self, campaign):
        """Sets the campaign of this Schedule.

        The Campaign/Layout Name  # noqa: E501

        :param campaign: The campaign of this Schedule.  # noqa: E501
        :type: str
        """

        self._campaign = campaign

    @property
    def command(self):
        """Gets the command of this Schedule.  # noqa: E501

        The Command Name  # noqa: E501

        :return: The command of this Schedule.  # noqa: E501
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this Schedule.

        The Command Name  # noqa: E501

        :param command: The command of this Schedule.  # noqa: E501
        :type: str
        """

        self._command = command

    @property
    def day_part_id(self):
        """Gets the day_part_id of this Schedule.  # noqa: E501

        The Day Part Id  # noqa: E501

        :return: The day_part_id of this Schedule.  # noqa: E501
        :rtype: int
        """
        return self._day_part_id

    @day_part_id.setter
    def day_part_id(self, day_part_id):
        """Sets the day_part_id of this Schedule.

        The Day Part Id  # noqa: E501

        :param day_part_id: The day_part_id of this Schedule.  # noqa: E501
        :type: int
        """

        self._day_part_id = day_part_id

    @property
    def is_always(self):
        """Gets the is_always of this Schedule.  # noqa: E501

        Is this event an always on event?  # noqa: E501

        :return: The is_always of this Schedule.  # noqa: E501
        :rtype: int
        """
        return self._is_always

    @is_always.setter
    def is_always(self, is_always):
        """Sets the is_always of this Schedule.

        Is this event an always on event?  # noqa: E501

        :param is_always: The is_always of this Schedule.  # noqa: E501
        :type: int
        """

        self._is_always = is_always

    @property
    def is_custom(self):
        """Gets the is_custom of this Schedule.  # noqa: E501

        Does this event have custom from/to date times?  # noqa: E501

        :return: The is_custom of this Schedule.  # noqa: E501
        :rtype: int
        """
        return self._is_custom

    @is_custom.setter
    def is_custom(self, is_custom):
        """Sets the is_custom of this Schedule.

        Does this event have custom from/to date times?  # noqa: E501

        :param is_custom: The is_custom of this Schedule.  # noqa: E501
        :type: int
        """

        self._is_custom = is_custom

    @property
    def sync_timezone(self):
        """Gets the sync_timezone of this Schedule.  # noqa: E501

        Flag indicating whether the event will sync to the Display timezone  # noqa: E501

        :return: The sync_timezone of this Schedule.  # noqa: E501
        :rtype: int
        """
        return self._sync_timezone

    @sync_timezone.setter
    def sync_timezone(self, sync_timezone):
        """Sets the sync_timezone of this Schedule.

        Flag indicating whether the event will sync to the Display timezone  # noqa: E501

        :param sync_timezone: The sync_timezone of this Schedule.  # noqa: E501
        :type: int
        """

        self._sync_timezone = sync_timezone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Schedule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
