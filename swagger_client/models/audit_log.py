# coding: utf-8

"""
    Xibo API

    Xibo CMS API  # noqa: E501

    OpenAPI spec version: 1.8.0
    Contact: info@xibo.org.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AuditLog(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'log_id': 'int',
        'log_date': 'int',
        'user_id': 'int',
        'message': 'str',
        'entity': 'str',
        'entity_id': 'int',
        'object_after': 'str',
        'user_name': 'str'
    }

    attribute_map = {
        'log_id': 'logId',
        'log_date': 'logDate',
        'user_id': 'userId',
        'message': 'message',
        'entity': 'entity',
        'entity_id': 'entityId',
        'object_after': 'objectAfter',
        'user_name': 'userName'
    }

    def __init__(self, log_id=None, log_date=None, user_id=None, message=None, entity=None, entity_id=None, object_after=None, user_name=None):  # noqa: E501
        """AuditLog - a model defined in Swagger"""  # noqa: E501

        self._log_id = None
        self._log_date = None
        self._user_id = None
        self._message = None
        self._entity = None
        self._entity_id = None
        self._object_after = None
        self._user_name = None
        self.discriminator = None

        if log_id is not None:
            self.log_id = log_id
        if log_date is not None:
            self.log_date = log_date
        if user_id is not None:
            self.user_id = user_id
        if message is not None:
            self.message = message
        if entity is not None:
            self.entity = entity
        if entity_id is not None:
            self.entity_id = entity_id
        if object_after is not None:
            self.object_after = object_after
        if user_name is not None:
            self.user_name = user_name

    @property
    def log_id(self):
        """Gets the log_id of this AuditLog.  # noqa: E501

        The Log Id  # noqa: E501

        :return: The log_id of this AuditLog.  # noqa: E501
        :rtype: int
        """
        return self._log_id

    @log_id.setter
    def log_id(self, log_id):
        """Sets the log_id of this AuditLog.

        The Log Id  # noqa: E501

        :param log_id: The log_id of this AuditLog.  # noqa: E501
        :type: int
        """

        self._log_id = log_id

    @property
    def log_date(self):
        """Gets the log_date of this AuditLog.  # noqa: E501

        The Log Date  # noqa: E501

        :return: The log_date of this AuditLog.  # noqa: E501
        :rtype: int
        """
        return self._log_date

    @log_date.setter
    def log_date(self, log_date):
        """Sets the log_date of this AuditLog.

        The Log Date  # noqa: E501

        :param log_date: The log_date of this AuditLog.  # noqa: E501
        :type: int
        """

        self._log_date = log_date

    @property
    def user_id(self):
        """Gets the user_id of this AuditLog.  # noqa: E501

        The userId of the User that took this action  # noqa: E501

        :return: The user_id of this AuditLog.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AuditLog.

        The userId of the User that took this action  # noqa: E501

        :param user_id: The user_id of this AuditLog.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def message(self):
        """Gets the message of this AuditLog.  # noqa: E501

        Message describing the action taken  # noqa: E501

        :return: The message of this AuditLog.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this AuditLog.

        Message describing the action taken  # noqa: E501

        :param message: The message of this AuditLog.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def entity(self):
        """Gets the entity of this AuditLog.  # noqa: E501

        The effected entity  # noqa: E501

        :return: The entity of this AuditLog.  # noqa: E501
        :rtype: str
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this AuditLog.

        The effected entity  # noqa: E501

        :param entity: The entity of this AuditLog.  # noqa: E501
        :type: str
        """

        self._entity = entity

    @property
    def entity_id(self):
        """Gets the entity_id of this AuditLog.  # noqa: E501

        The effected entityId  # noqa: E501

        :return: The entity_id of this AuditLog.  # noqa: E501
        :rtype: int
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this AuditLog.

        The effected entityId  # noqa: E501

        :param entity_id: The entity_id of this AuditLog.  # noqa: E501
        :type: int
        """

        self._entity_id = entity_id

    @property
    def object_after(self):
        """Gets the object_after of this AuditLog.  # noqa: E501

        A JSON representation of the object after it was changed  # noqa: E501

        :return: The object_after of this AuditLog.  # noqa: E501
        :rtype: str
        """
        return self._object_after

    @object_after.setter
    def object_after(self, object_after):
        """Sets the object_after of this AuditLog.

        A JSON representation of the object after it was changed  # noqa: E501

        :param object_after: The object_after of this AuditLog.  # noqa: E501
        :type: str
        """

        self._object_after = object_after

    @property
    def user_name(self):
        """Gets the user_name of this AuditLog.  # noqa: E501

        The User Name of the User that took this action  # noqa: E501

        :return: The user_name of this AuditLog.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this AuditLog.

        The User Name of the User that took this action  # noqa: E501

        :param user_name: The user_name of this AuditLog.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuditLog):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
