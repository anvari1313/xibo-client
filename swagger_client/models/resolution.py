# coding: utf-8

"""
    Xibo API

    Xibo CMS API  # noqa: E501

    OpenAPI spec version: 1.8.0
    Contact: info@xibo.org.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Resolution(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resolution_id': 'int',
        'resolution': 'str',
        'width': 'float',
        'height': 'float',
        'designer_width': 'float',
        'designer_height': 'float',
        'version': 'int',
        'enabled': 'int',
        'user_id': 'int'
    }

    attribute_map = {
        'resolution_id': 'resolutionId',
        'resolution': 'resolution',
        'width': 'width',
        'height': 'height',
        'designer_width': 'designerWidth',
        'designer_height': 'designerHeight',
        'version': 'version',
        'enabled': 'enabled',
        'user_id': 'userId'
    }

    def __init__(self, resolution_id=None, resolution=None, width=None, height=None, designer_width=None, designer_height=None, version=None, enabled=None, user_id=None):  # noqa: E501
        """Resolution - a model defined in Swagger"""  # noqa: E501

        self._resolution_id = None
        self._resolution = None
        self._width = None
        self._height = None
        self._designer_width = None
        self._designer_height = None
        self._version = None
        self._enabled = None
        self._user_id = None
        self.discriminator = None

        if resolution_id is not None:
            self.resolution_id = resolution_id
        if resolution is not None:
            self.resolution = resolution
        if width is not None:
            self.width = width
        if height is not None:
            self.height = height
        if designer_width is not None:
            self.designer_width = designer_width
        if designer_height is not None:
            self.designer_height = designer_height
        if version is not None:
            self.version = version
        if enabled is not None:
            self.enabled = enabled
        if user_id is not None:
            self.user_id = user_id

    @property
    def resolution_id(self):
        """Gets the resolution_id of this Resolution.  # noqa: E501

        The ID of this Resolution  # noqa: E501

        :return: The resolution_id of this Resolution.  # noqa: E501
        :rtype: int
        """
        return self._resolution_id

    @resolution_id.setter
    def resolution_id(self, resolution_id):
        """Sets the resolution_id of this Resolution.

        The ID of this Resolution  # noqa: E501

        :param resolution_id: The resolution_id of this Resolution.  # noqa: E501
        :type: int
        """

        self._resolution_id = resolution_id

    @property
    def resolution(self):
        """Gets the resolution of this Resolution.  # noqa: E501

        The resolution name  # noqa: E501

        :return: The resolution of this Resolution.  # noqa: E501
        :rtype: str
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this Resolution.

        The resolution name  # noqa: E501

        :param resolution: The resolution of this Resolution.  # noqa: E501
        :type: str
        """

        self._resolution = resolution

    @property
    def width(self):
        """Gets the width of this Resolution.  # noqa: E501

        The display width of the resolution  # noqa: E501

        :return: The width of this Resolution.  # noqa: E501
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this Resolution.

        The display width of the resolution  # noqa: E501

        :param width: The width of this Resolution.  # noqa: E501
        :type: float
        """

        self._width = width

    @property
    def height(self):
        """Gets the height of this Resolution.  # noqa: E501

        The display height of the resolution  # noqa: E501

        :return: The height of this Resolution.  # noqa: E501
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Resolution.

        The display height of the resolution  # noqa: E501

        :param height: The height of this Resolution.  # noqa: E501
        :type: float
        """

        self._height = height

    @property
    def designer_width(self):
        """Gets the designer_width of this Resolution.  # noqa: E501

        The designer width of the resolution  # noqa: E501

        :return: The designer_width of this Resolution.  # noqa: E501
        :rtype: float
        """
        return self._designer_width

    @designer_width.setter
    def designer_width(self, designer_width):
        """Sets the designer_width of this Resolution.

        The designer width of the resolution  # noqa: E501

        :param designer_width: The designer_width of this Resolution.  # noqa: E501
        :type: float
        """

        self._designer_width = designer_width

    @property
    def designer_height(self):
        """Gets the designer_height of this Resolution.  # noqa: E501

        The designer height of the resolution  # noqa: E501

        :return: The designer_height of this Resolution.  # noqa: E501
        :rtype: float
        """
        return self._designer_height

    @designer_height.setter
    def designer_height(self, designer_height):
        """Sets the designer_height of this Resolution.

        The designer height of the resolution  # noqa: E501

        :param designer_height: The designer_height of this Resolution.  # noqa: E501
        :type: float
        """

        self._designer_height = designer_height

    @property
    def version(self):
        """Gets the version of this Resolution.  # noqa: E501

        The layout schema version  # noqa: E501

        :return: The version of this Resolution.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Resolution.

        The layout schema version  # noqa: E501

        :param version: The version of this Resolution.  # noqa: E501
        :type: int
        """

        self._version = version

    @property
    def enabled(self):
        """Gets the enabled of this Resolution.  # noqa: E501

        A flag indicating whether this resolution is enabled or not  # noqa: E501

        :return: The enabled of this Resolution.  # noqa: E501
        :rtype: int
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Resolution.

        A flag indicating whether this resolution is enabled or not  # noqa: E501

        :param enabled: The enabled of this Resolution.  # noqa: E501
        :type: int
        """

        self._enabled = enabled

    @property
    def user_id(self):
        """Gets the user_id of this Resolution.  # noqa: E501

        The userId who owns this Resolution  # noqa: E501

        :return: The user_id of this Resolution.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Resolution.

        The userId who owns this Resolution  # noqa: E501

        :param user_id: The user_id of this Resolution.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Resolution):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
