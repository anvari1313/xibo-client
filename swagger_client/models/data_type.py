# coding: utf-8

"""
    Xibo API

    Xibo CMS API  # noqa: E501

    OpenAPI spec version: 1.8.0
    Contact: info@xibo.org.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DataType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_type_id': 'int',
        'data_type': 'str'
    }

    attribute_map = {
        'data_type_id': 'dataTypeId',
        'data_type': 'dataType'
    }

    def __init__(self, data_type_id=None, data_type=None):  # noqa: E501
        """DataType - a model defined in Swagger"""  # noqa: E501

        self._data_type_id = None
        self._data_type = None
        self.discriminator = None

        if data_type_id is not None:
            self.data_type_id = data_type_id
        if data_type is not None:
            self.data_type = data_type

    @property
    def data_type_id(self):
        """Gets the data_type_id of this DataType.  # noqa: E501

        The ID for this DataType  # noqa: E501

        :return: The data_type_id of this DataType.  # noqa: E501
        :rtype: int
        """
        return self._data_type_id

    @data_type_id.setter
    def data_type_id(self, data_type_id):
        """Sets the data_type_id of this DataType.

        The ID for this DataType  # noqa: E501

        :param data_type_id: The data_type_id of this DataType.  # noqa: E501
        :type: int
        """

        self._data_type_id = data_type_id

    @property
    def data_type(self):
        """Gets the data_type of this DataType.  # noqa: E501

        The Name for this DataType  # noqa: E501

        :return: The data_type of this DataType.  # noqa: E501
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this DataType.

        The Name for this DataType  # noqa: E501

        :param data_type: The data_type of this DataType.  # noqa: E501
        :type: str
        """

        self._data_type = data_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
