# coding: utf-8

"""
    Xibo API

    Xibo CMS API  # noqa: E501

    OpenAPI spec version: 1.8.0
    Contact: info@xibo.org.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.display_group import DisplayGroup  # noqa: F401,E501
from swagger_client.models.tag import Tag  # noqa: F401,E501


class Display(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_id': 'int',
        'auditing_until': 'int',
        'display': 'str',
        'description': 'str',
        'default_layout_id': 'int',
        'license': 'str',
        'licensed': 'int',
        'logged_in': 'int',
        'last_accessed': 'int',
        'inc_schedule': 'int',
        'email_alert': 'int',
        'alert_timeout': 'int',
        'client_address': 'str',
        'media_inventory_status': 'int',
        'mac_address': 'str',
        'last_changed': 'int',
        'number_of_mac_address_changes': 'int',
        'last_wake_on_lan_command_sent': 'int',
        'wake_on_lan_enabled': 'int',
        'wake_on_lan_time': 'str',
        'broad_cast_address': 'str',
        'secure_on': 'str',
        'cidr': 'str',
        'latitude': 'float',
        'longitude': 'float',
        'version_instructions': 'str',
        'client_type': 'str',
        'client_version': 'str',
        'client_code': 'int',
        'display_profile_id': 'int',
        'current_layout_id': 'int',
        'screen_shot_requested': 'int',
        'storage_available_space': 'int',
        'storage_total_space': 'int',
        'display_group_id': 'int',
        'current_layout': 'str',
        'default_layout': 'str',
        'display_groups': 'list[DisplayGroup]',
        'xmr_channel': 'str',
        'xmr_pub_key': 'str',
        'last_command_success': 'int',
        'device_name': 'str',
        'time_zone': 'str',
        'tags': 'list[Tag]'
    }

    attribute_map = {
        'display_id': 'displayId',
        'auditing_until': 'auditingUntil',
        'display': 'display',
        'description': 'description',
        'default_layout_id': 'defaultLayoutId',
        'license': 'license',
        'licensed': 'licensed',
        'logged_in': 'loggedIn',
        'last_accessed': 'lastAccessed',
        'inc_schedule': 'incSchedule',
        'email_alert': 'emailAlert',
        'alert_timeout': 'alertTimeout',
        'client_address': 'clientAddress',
        'media_inventory_status': 'mediaInventoryStatus',
        'mac_address': 'macAddress',
        'last_changed': 'lastChanged',
        'number_of_mac_address_changes': 'numberOfMacAddressChanges',
        'last_wake_on_lan_command_sent': 'lastWakeOnLanCommandSent',
        'wake_on_lan_enabled': 'wakeOnLanEnabled',
        'wake_on_lan_time': 'wakeOnLanTime',
        'broad_cast_address': 'broadCastAddress',
        'secure_on': 'secureOn',
        'cidr': 'cidr',
        'latitude': 'latitude',
        'longitude': 'longitude',
        'version_instructions': 'versionInstructions',
        'client_type': 'clientType',
        'client_version': 'clientVersion',
        'client_code': 'clientCode',
        'display_profile_id': 'displayProfileId',
        'current_layout_id': 'currentLayoutId',
        'screen_shot_requested': 'screenShotRequested',
        'storage_available_space': 'storageAvailableSpace',
        'storage_total_space': 'storageTotalSpace',
        'display_group_id': 'displayGroupId',
        'current_layout': 'currentLayout',
        'default_layout': 'defaultLayout',
        'display_groups': 'displayGroups',
        'xmr_channel': 'xmrChannel',
        'xmr_pub_key': 'xmrPubKey',
        'last_command_success': 'lastCommandSuccess',
        'device_name': 'deviceName',
        'time_zone': 'timeZone',
        'tags': 'tags'
    }

    def __init__(self, display_id=None, auditing_until=None, display=None, description=None, default_layout_id=None, license=None, licensed=None, logged_in=None, last_accessed=None, inc_schedule=None, email_alert=None, alert_timeout=None, client_address=None, media_inventory_status=None, mac_address=None, last_changed=None, number_of_mac_address_changes=None, last_wake_on_lan_command_sent=None, wake_on_lan_enabled=None, wake_on_lan_time=None, broad_cast_address=None, secure_on=None, cidr=None, latitude=None, longitude=None, version_instructions=None, client_type=None, client_version=None, client_code=None, display_profile_id=None, current_layout_id=None, screen_shot_requested=None, storage_available_space=None, storage_total_space=None, display_group_id=None, current_layout=None, default_layout=None, display_groups=None, xmr_channel=None, xmr_pub_key=None, last_command_success=None, device_name=None, time_zone=None, tags=None):  # noqa: E501
        """Display - a model defined in Swagger"""  # noqa: E501

        self._display_id = None
        self._auditing_until = None
        self._display = None
        self._description = None
        self._default_layout_id = None
        self._license = None
        self._licensed = None
        self._logged_in = None
        self._last_accessed = None
        self._inc_schedule = None
        self._email_alert = None
        self._alert_timeout = None
        self._client_address = None
        self._media_inventory_status = None
        self._mac_address = None
        self._last_changed = None
        self._number_of_mac_address_changes = None
        self._last_wake_on_lan_command_sent = None
        self._wake_on_lan_enabled = None
        self._wake_on_lan_time = None
        self._broad_cast_address = None
        self._secure_on = None
        self._cidr = None
        self._latitude = None
        self._longitude = None
        self._version_instructions = None
        self._client_type = None
        self._client_version = None
        self._client_code = None
        self._display_profile_id = None
        self._current_layout_id = None
        self._screen_shot_requested = None
        self._storage_available_space = None
        self._storage_total_space = None
        self._display_group_id = None
        self._current_layout = None
        self._default_layout = None
        self._display_groups = None
        self._xmr_channel = None
        self._xmr_pub_key = None
        self._last_command_success = None
        self._device_name = None
        self._time_zone = None
        self._tags = None
        self.discriminator = None

        if display_id is not None:
            self.display_id = display_id
        if auditing_until is not None:
            self.auditing_until = auditing_until
        if display is not None:
            self.display = display
        if description is not None:
            self.description = description
        if default_layout_id is not None:
            self.default_layout_id = default_layout_id
        if license is not None:
            self.license = license
        if licensed is not None:
            self.licensed = licensed
        if logged_in is not None:
            self.logged_in = logged_in
        if last_accessed is not None:
            self.last_accessed = last_accessed
        if inc_schedule is not None:
            self.inc_schedule = inc_schedule
        if email_alert is not None:
            self.email_alert = email_alert
        if alert_timeout is not None:
            self.alert_timeout = alert_timeout
        if client_address is not None:
            self.client_address = client_address
        if media_inventory_status is not None:
            self.media_inventory_status = media_inventory_status
        if mac_address is not None:
            self.mac_address = mac_address
        if last_changed is not None:
            self.last_changed = last_changed
        if number_of_mac_address_changes is not None:
            self.number_of_mac_address_changes = number_of_mac_address_changes
        if last_wake_on_lan_command_sent is not None:
            self.last_wake_on_lan_command_sent = last_wake_on_lan_command_sent
        if wake_on_lan_enabled is not None:
            self.wake_on_lan_enabled = wake_on_lan_enabled
        if wake_on_lan_time is not None:
            self.wake_on_lan_time = wake_on_lan_time
        if broad_cast_address is not None:
            self.broad_cast_address = broad_cast_address
        if secure_on is not None:
            self.secure_on = secure_on
        if cidr is not None:
            self.cidr = cidr
        if latitude is not None:
            self.latitude = latitude
        if longitude is not None:
            self.longitude = longitude
        if version_instructions is not None:
            self.version_instructions = version_instructions
        if client_type is not None:
            self.client_type = client_type
        if client_version is not None:
            self.client_version = client_version
        if client_code is not None:
            self.client_code = client_code
        if display_profile_id is not None:
            self.display_profile_id = display_profile_id
        if current_layout_id is not None:
            self.current_layout_id = current_layout_id
        if screen_shot_requested is not None:
            self.screen_shot_requested = screen_shot_requested
        if storage_available_space is not None:
            self.storage_available_space = storage_available_space
        if storage_total_space is not None:
            self.storage_total_space = storage_total_space
        if display_group_id is not None:
            self.display_group_id = display_group_id
        if current_layout is not None:
            self.current_layout = current_layout
        if default_layout is not None:
            self.default_layout = default_layout
        if display_groups is not None:
            self.display_groups = display_groups
        if xmr_channel is not None:
            self.xmr_channel = xmr_channel
        if xmr_pub_key is not None:
            self.xmr_pub_key = xmr_pub_key
        if last_command_success is not None:
            self.last_command_success = last_command_success
        if device_name is not None:
            self.device_name = device_name
        if time_zone is not None:
            self.time_zone = time_zone
        if tags is not None:
            self.tags = tags

    @property
    def display_id(self):
        """Gets the display_id of this Display.  # noqa: E501

        The ID of this Display  # noqa: E501

        :return: The display_id of this Display.  # noqa: E501
        :rtype: int
        """
        return self._display_id

    @display_id.setter
    def display_id(self, display_id):
        """Sets the display_id of this Display.

        The ID of this Display  # noqa: E501

        :param display_id: The display_id of this Display.  # noqa: E501
        :type: int
        """

        self._display_id = display_id

    @property
    def auditing_until(self):
        """Gets the auditing_until of this Display.  # noqa: E501

        Flag indicating whether this Display is recording Auditing Information from XMDS  # noqa: E501

        :return: The auditing_until of this Display.  # noqa: E501
        :rtype: int
        """
        return self._auditing_until

    @auditing_until.setter
    def auditing_until(self, auditing_until):
        """Sets the auditing_until of this Display.

        Flag indicating whether this Display is recording Auditing Information from XMDS  # noqa: E501

        :param auditing_until: The auditing_until of this Display.  # noqa: E501
        :type: int
        """

        self._auditing_until = auditing_until

    @property
    def display(self):
        """Gets the display of this Display.  # noqa: E501

        The Name of this Display  # noqa: E501

        :return: The display of this Display.  # noqa: E501
        :rtype: str
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this Display.

        The Name of this Display  # noqa: E501

        :param display: The display of this Display.  # noqa: E501
        :type: str
        """

        self._display = display

    @property
    def description(self):
        """Gets the description of this Display.  # noqa: E501

        The Description of this Display  # noqa: E501

        :return: The description of this Display.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Display.

        The Description of this Display  # noqa: E501

        :param description: The description of this Display.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def default_layout_id(self):
        """Gets the default_layout_id of this Display.  # noqa: E501

        The ID of the Default Layout  # noqa: E501

        :return: The default_layout_id of this Display.  # noqa: E501
        :rtype: int
        """
        return self._default_layout_id

    @default_layout_id.setter
    def default_layout_id(self, default_layout_id):
        """Sets the default_layout_id of this Display.

        The ID of the Default Layout  # noqa: E501

        :param default_layout_id: The default_layout_id of this Display.  # noqa: E501
        :type: int
        """

        self._default_layout_id = default_layout_id

    @property
    def license(self):
        """Gets the license of this Display.  # noqa: E501

        The Display Unique Identifier also called hardware key  # noqa: E501

        :return: The license of this Display.  # noqa: E501
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this Display.

        The Display Unique Identifier also called hardware key  # noqa: E501

        :param license: The license of this Display.  # noqa: E501
        :type: str
        """

        self._license = license

    @property
    def licensed(self):
        """Gets the licensed of this Display.  # noqa: E501

        A flag indicating whether this Display is licensed or not  # noqa: E501

        :return: The licensed of this Display.  # noqa: E501
        :rtype: int
        """
        return self._licensed

    @licensed.setter
    def licensed(self, licensed):
        """Sets the licensed of this Display.

        A flag indicating whether this Display is licensed or not  # noqa: E501

        :param licensed: The licensed of this Display.  # noqa: E501
        :type: int
        """

        self._licensed = licensed

    @property
    def logged_in(self):
        """Gets the logged_in of this Display.  # noqa: E501

        A flag indicating whether this Display is currently logged in  # noqa: E501

        :return: The logged_in of this Display.  # noqa: E501
        :rtype: int
        """
        return self._logged_in

    @logged_in.setter
    def logged_in(self, logged_in):
        """Sets the logged_in of this Display.

        A flag indicating whether this Display is currently logged in  # noqa: E501

        :param logged_in: The logged_in of this Display.  # noqa: E501
        :type: int
        """

        self._logged_in = logged_in

    @property
    def last_accessed(self):
        """Gets the last_accessed of this Display.  # noqa: E501

        A timestamp in CMS time for the last time the Display accessed XMDS  # noqa: E501

        :return: The last_accessed of this Display.  # noqa: E501
        :rtype: int
        """
        return self._last_accessed

    @last_accessed.setter
    def last_accessed(self, last_accessed):
        """Sets the last_accessed of this Display.

        A timestamp in CMS time for the last time the Display accessed XMDS  # noqa: E501

        :param last_accessed: The last_accessed of this Display.  # noqa: E501
        :type: int
        """

        self._last_accessed = last_accessed

    @property
    def inc_schedule(self):
        """Gets the inc_schedule of this Display.  # noqa: E501

        A flag indicating whether the default layout is interleaved with the Schedule  # noqa: E501

        :return: The inc_schedule of this Display.  # noqa: E501
        :rtype: int
        """
        return self._inc_schedule

    @inc_schedule.setter
    def inc_schedule(self, inc_schedule):
        """Sets the inc_schedule of this Display.

        A flag indicating whether the default layout is interleaved with the Schedule  # noqa: E501

        :param inc_schedule: The inc_schedule of this Display.  # noqa: E501
        :type: int
        """

        self._inc_schedule = inc_schedule

    @property
    def email_alert(self):
        """Gets the email_alert of this Display.  # noqa: E501

        A flag indicating whether the Display will send email alerts.  # noqa: E501

        :return: The email_alert of this Display.  # noqa: E501
        :rtype: int
        """
        return self._email_alert

    @email_alert.setter
    def email_alert(self, email_alert):
        """Sets the email_alert of this Display.

        A flag indicating whether the Display will send email alerts.  # noqa: E501

        :param email_alert: The email_alert of this Display.  # noqa: E501
        :type: int
        """

        self._email_alert = email_alert

    @property
    def alert_timeout(self):
        """Gets the alert_timeout of this Display.  # noqa: E501

        A timeout in seconds for the Display to send email alerts.  # noqa: E501

        :return: The alert_timeout of this Display.  # noqa: E501
        :rtype: int
        """
        return self._alert_timeout

    @alert_timeout.setter
    def alert_timeout(self, alert_timeout):
        """Sets the alert_timeout of this Display.

        A timeout in seconds for the Display to send email alerts.  # noqa: E501

        :param alert_timeout: The alert_timeout of this Display.  # noqa: E501
        :type: int
        """

        self._alert_timeout = alert_timeout

    @property
    def client_address(self):
        """Gets the client_address of this Display.  # noqa: E501

        The MAC Address of the Display  # noqa: E501

        :return: The client_address of this Display.  # noqa: E501
        :rtype: str
        """
        return self._client_address

    @client_address.setter
    def client_address(self, client_address):
        """Sets the client_address of this Display.

        The MAC Address of the Display  # noqa: E501

        :param client_address: The client_address of this Display.  # noqa: E501
        :type: str
        """

        self._client_address = client_address

    @property
    def media_inventory_status(self):
        """Gets the media_inventory_status of this Display.  # noqa: E501

        The media inventory status of the Display  # noqa: E501

        :return: The media_inventory_status of this Display.  # noqa: E501
        :rtype: int
        """
        return self._media_inventory_status

    @media_inventory_status.setter
    def media_inventory_status(self, media_inventory_status):
        """Sets the media_inventory_status of this Display.

        The media inventory status of the Display  # noqa: E501

        :param media_inventory_status: The media_inventory_status of this Display.  # noqa: E501
        :type: int
        """

        self._media_inventory_status = media_inventory_status

    @property
    def mac_address(self):
        """Gets the mac_address of this Display.  # noqa: E501

        The current Mac Address of the Player  # noqa: E501

        :return: The mac_address of this Display.  # noqa: E501
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this Display.

        The current Mac Address of the Player  # noqa: E501

        :param mac_address: The mac_address of this Display.  # noqa: E501
        :type: str
        """

        self._mac_address = mac_address

    @property
    def last_changed(self):
        """Gets the last_changed of this Display.  # noqa: E501

        A timestamp indicating the last time the Mac Address changed  # noqa: E501

        :return: The last_changed of this Display.  # noqa: E501
        :rtype: int
        """
        return self._last_changed

    @last_changed.setter
    def last_changed(self, last_changed):
        """Sets the last_changed of this Display.

        A timestamp indicating the last time the Mac Address changed  # noqa: E501

        :param last_changed: The last_changed of this Display.  # noqa: E501
        :type: int
        """

        self._last_changed = last_changed

    @property
    def number_of_mac_address_changes(self):
        """Gets the number_of_mac_address_changes of this Display.  # noqa: E501

        A count of Mac Address changes  # noqa: E501

        :return: The number_of_mac_address_changes of this Display.  # noqa: E501
        :rtype: int
        """
        return self._number_of_mac_address_changes

    @number_of_mac_address_changes.setter
    def number_of_mac_address_changes(self, number_of_mac_address_changes):
        """Sets the number_of_mac_address_changes of this Display.

        A count of Mac Address changes  # noqa: E501

        :param number_of_mac_address_changes: The number_of_mac_address_changes of this Display.  # noqa: E501
        :type: int
        """

        self._number_of_mac_address_changes = number_of_mac_address_changes

    @property
    def last_wake_on_lan_command_sent(self):
        """Gets the last_wake_on_lan_command_sent of this Display.  # noqa: E501

        A timestamp indicating the last time a WOL command was sent  # noqa: E501

        :return: The last_wake_on_lan_command_sent of this Display.  # noqa: E501
        :rtype: int
        """
        return self._last_wake_on_lan_command_sent

    @last_wake_on_lan_command_sent.setter
    def last_wake_on_lan_command_sent(self, last_wake_on_lan_command_sent):
        """Sets the last_wake_on_lan_command_sent of this Display.

        A timestamp indicating the last time a WOL command was sent  # noqa: E501

        :param last_wake_on_lan_command_sent: The last_wake_on_lan_command_sent of this Display.  # noqa: E501
        :type: int
        """

        self._last_wake_on_lan_command_sent = last_wake_on_lan_command_sent

    @property
    def wake_on_lan_enabled(self):
        """Gets the wake_on_lan_enabled of this Display.  # noqa: E501

        A flag indicating whether Wake On Lan is enabled  # noqa: E501

        :return: The wake_on_lan_enabled of this Display.  # noqa: E501
        :rtype: int
        """
        return self._wake_on_lan_enabled

    @wake_on_lan_enabled.setter
    def wake_on_lan_enabled(self, wake_on_lan_enabled):
        """Sets the wake_on_lan_enabled of this Display.

        A flag indicating whether Wake On Lan is enabled  # noqa: E501

        :param wake_on_lan_enabled: The wake_on_lan_enabled of this Display.  # noqa: E501
        :type: int
        """

        self._wake_on_lan_enabled = wake_on_lan_enabled

    @property
    def wake_on_lan_time(self):
        """Gets the wake_on_lan_time of this Display.  # noqa: E501

        A h:i string indicating the time to send a WOL command  # noqa: E501

        :return: The wake_on_lan_time of this Display.  # noqa: E501
        :rtype: str
        """
        return self._wake_on_lan_time

    @wake_on_lan_time.setter
    def wake_on_lan_time(self, wake_on_lan_time):
        """Sets the wake_on_lan_time of this Display.

        A h:i string indicating the time to send a WOL command  # noqa: E501

        :param wake_on_lan_time: The wake_on_lan_time of this Display.  # noqa: E501
        :type: str
        """

        self._wake_on_lan_time = wake_on_lan_time

    @property
    def broad_cast_address(self):
        """Gets the broad_cast_address of this Display.  # noqa: E501

        The broad cast address for this Display  # noqa: E501

        :return: The broad_cast_address of this Display.  # noqa: E501
        :rtype: str
        """
        return self._broad_cast_address

    @broad_cast_address.setter
    def broad_cast_address(self, broad_cast_address):
        """Sets the broad_cast_address of this Display.

        The broad cast address for this Display  # noqa: E501

        :param broad_cast_address: The broad_cast_address of this Display.  # noqa: E501
        :type: str
        """

        self._broad_cast_address = broad_cast_address

    @property
    def secure_on(self):
        """Gets the secure_on of this Display.  # noqa: E501

        The secureOn WOL settings for this display.  # noqa: E501

        :return: The secure_on of this Display.  # noqa: E501
        :rtype: str
        """
        return self._secure_on

    @secure_on.setter
    def secure_on(self, secure_on):
        """Sets the secure_on of this Display.

        The secureOn WOL settings for this display.  # noqa: E501

        :param secure_on: The secure_on of this Display.  # noqa: E501
        :type: str
        """

        self._secure_on = secure_on

    @property
    def cidr(self):
        """Gets the cidr of this Display.  # noqa: E501

        The CIDR WOL settings for this display  # noqa: E501

        :return: The cidr of this Display.  # noqa: E501
        :rtype: str
        """
        return self._cidr

    @cidr.setter
    def cidr(self, cidr):
        """Sets the cidr of this Display.

        The CIDR WOL settings for this display  # noqa: E501

        :param cidr: The cidr of this Display.  # noqa: E501
        :type: str
        """

        self._cidr = cidr

    @property
    def latitude(self):
        """Gets the latitude of this Display.  # noqa: E501

        The display Latitude  # noqa: E501

        :return: The latitude of this Display.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this Display.

        The display Latitude  # noqa: E501

        :param latitude: The latitude of this Display.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this Display.  # noqa: E501

        The display longitude  # noqa: E501

        :return: The longitude of this Display.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this Display.

        The display longitude  # noqa: E501

        :param longitude: The longitude of this Display.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    @property
    def version_instructions(self):
        """Gets the version_instructions of this Display.  # noqa: E501

        A JSON string representing the player installer that should be installed  # noqa: E501

        :return: The version_instructions of this Display.  # noqa: E501
        :rtype: str
        """
        return self._version_instructions

    @version_instructions.setter
    def version_instructions(self, version_instructions):
        """Sets the version_instructions of this Display.

        A JSON string representing the player installer that should be installed  # noqa: E501

        :param version_instructions: The version_instructions of this Display.  # noqa: E501
        :type: str
        """

        self._version_instructions = version_instructions

    @property
    def client_type(self):
        """Gets the client_type of this Display.  # noqa: E501

        A string representing the player type  # noqa: E501

        :return: The client_type of this Display.  # noqa: E501
        :rtype: str
        """
        return self._client_type

    @client_type.setter
    def client_type(self, client_type):
        """Sets the client_type of this Display.

        A string representing the player type  # noqa: E501

        :param client_type: The client_type of this Display.  # noqa: E501
        :type: str
        """

        self._client_type = client_type

    @property
    def client_version(self):
        """Gets the client_version of this Display.  # noqa: E501

        A string representing the player version  # noqa: E501

        :return: The client_version of this Display.  # noqa: E501
        :rtype: str
        """
        return self._client_version

    @client_version.setter
    def client_version(self, client_version):
        """Sets the client_version of this Display.

        A string representing the player version  # noqa: E501

        :param client_version: The client_version of this Display.  # noqa: E501
        :type: str
        """

        self._client_version = client_version

    @property
    def client_code(self):
        """Gets the client_code of this Display.  # noqa: E501

        A number representing the Player version code  # noqa: E501

        :return: The client_code of this Display.  # noqa: E501
        :rtype: int
        """
        return self._client_code

    @client_code.setter
    def client_code(self, client_code):
        """Sets the client_code of this Display.

        A number representing the Player version code  # noqa: E501

        :param client_code: The client_code of this Display.  # noqa: E501
        :type: int
        """

        self._client_code = client_code

    @property
    def display_profile_id(self):
        """Gets the display_profile_id of this Display.  # noqa: E501

        The display settings profile ID for this Display  # noqa: E501

        :return: The display_profile_id of this Display.  # noqa: E501
        :rtype: int
        """
        return self._display_profile_id

    @display_profile_id.setter
    def display_profile_id(self, display_profile_id):
        """Sets the display_profile_id of this Display.

        The display settings profile ID for this Display  # noqa: E501

        :param display_profile_id: The display_profile_id of this Display.  # noqa: E501
        :type: int
        """

        self._display_profile_id = display_profile_id

    @property
    def current_layout_id(self):
        """Gets the current_layout_id of this Display.  # noqa: E501

        The current layout ID reported via XMDS  # noqa: E501

        :return: The current_layout_id of this Display.  # noqa: E501
        :rtype: int
        """
        return self._current_layout_id

    @current_layout_id.setter
    def current_layout_id(self, current_layout_id):
        """Sets the current_layout_id of this Display.

        The current layout ID reported via XMDS  # noqa: E501

        :param current_layout_id: The current_layout_id of this Display.  # noqa: E501
        :type: int
        """

        self._current_layout_id = current_layout_id

    @property
    def screen_shot_requested(self):
        """Gets the screen_shot_requested of this Display.  # noqa: E501

        A flag indicating that a screen shot should be taken by the Player  # noqa: E501

        :return: The screen_shot_requested of this Display.  # noqa: E501
        :rtype: int
        """
        return self._screen_shot_requested

    @screen_shot_requested.setter
    def screen_shot_requested(self, screen_shot_requested):
        """Sets the screen_shot_requested of this Display.

        A flag indicating that a screen shot should be taken by the Player  # noqa: E501

        :param screen_shot_requested: The screen_shot_requested of this Display.  # noqa: E501
        :type: int
        """

        self._screen_shot_requested = screen_shot_requested

    @property
    def storage_available_space(self):
        """Gets the storage_available_space of this Display.  # noqa: E501

        The number of bytes of storage available on the device.  # noqa: E501

        :return: The storage_available_space of this Display.  # noqa: E501
        :rtype: int
        """
        return self._storage_available_space

    @storage_available_space.setter
    def storage_available_space(self, storage_available_space):
        """Sets the storage_available_space of this Display.

        The number of bytes of storage available on the device.  # noqa: E501

        :param storage_available_space: The storage_available_space of this Display.  # noqa: E501
        :type: int
        """

        self._storage_available_space = storage_available_space

    @property
    def storage_total_space(self):
        """Gets the storage_total_space of this Display.  # noqa: E501

        The number of bytes of storage in total on the device  # noqa: E501

        :return: The storage_total_space of this Display.  # noqa: E501
        :rtype: int
        """
        return self._storage_total_space

    @storage_total_space.setter
    def storage_total_space(self, storage_total_space):
        """Sets the storage_total_space of this Display.

        The number of bytes of storage in total on the device  # noqa: E501

        :param storage_total_space: The storage_total_space of this Display.  # noqa: E501
        :type: int
        """

        self._storage_total_space = storage_total_space

    @property
    def display_group_id(self):
        """Gets the display_group_id of this Display.  # noqa: E501

        The ID of the Display Group for this Device  # noqa: E501

        :return: The display_group_id of this Display.  # noqa: E501
        :rtype: int
        """
        return self._display_group_id

    @display_group_id.setter
    def display_group_id(self, display_group_id):
        """Sets the display_group_id of this Display.

        The ID of the Display Group for this Device  # noqa: E501

        :param display_group_id: The display_group_id of this Display.  # noqa: E501
        :type: int
        """

        self._display_group_id = display_group_id

    @property
    def current_layout(self):
        """Gets the current_layout of this Display.  # noqa: E501

        The current layout  # noqa: E501

        :return: The current_layout of this Display.  # noqa: E501
        :rtype: str
        """
        return self._current_layout

    @current_layout.setter
    def current_layout(self, current_layout):
        """Sets the current_layout of this Display.

        The current layout  # noqa: E501

        :param current_layout: The current_layout of this Display.  # noqa: E501
        :type: str
        """

        self._current_layout = current_layout

    @property
    def default_layout(self):
        """Gets the default_layout of this Display.  # noqa: E501

        The default layout  # noqa: E501

        :return: The default_layout of this Display.  # noqa: E501
        :rtype: str
        """
        return self._default_layout

    @default_layout.setter
    def default_layout(self, default_layout):
        """Sets the default_layout of this Display.

        The default layout  # noqa: E501

        :param default_layout: The default_layout of this Display.  # noqa: E501
        :type: str
        """

        self._default_layout = default_layout

    @property
    def display_groups(self):
        """Gets the display_groups of this Display.  # noqa: E501

        The Display Groups this Display belongs to  # noqa: E501

        :return: The display_groups of this Display.  # noqa: E501
        :rtype: list[DisplayGroup]
        """
        return self._display_groups

    @display_groups.setter
    def display_groups(self, display_groups):
        """Sets the display_groups of this Display.

        The Display Groups this Display belongs to  # noqa: E501

        :param display_groups: The display_groups of this Display.  # noqa: E501
        :type: list[DisplayGroup]
        """

        self._display_groups = display_groups

    @property
    def xmr_channel(self):
        """Gets the xmr_channel of this Display.  # noqa: E501

        The Player Subscription Channel  # noqa: E501

        :return: The xmr_channel of this Display.  # noqa: E501
        :rtype: str
        """
        return self._xmr_channel

    @xmr_channel.setter
    def xmr_channel(self, xmr_channel):
        """Sets the xmr_channel of this Display.

        The Player Subscription Channel  # noqa: E501

        :param xmr_channel: The xmr_channel of this Display.  # noqa: E501
        :type: str
        """

        self._xmr_channel = xmr_channel

    @property
    def xmr_pub_key(self):
        """Gets the xmr_pub_key of this Display.  # noqa: E501

        The Player Public Key  # noqa: E501

        :return: The xmr_pub_key of this Display.  # noqa: E501
        :rtype: str
        """
        return self._xmr_pub_key

    @xmr_pub_key.setter
    def xmr_pub_key(self, xmr_pub_key):
        """Sets the xmr_pub_key of this Display.

        The Player Public Key  # noqa: E501

        :param xmr_pub_key: The xmr_pub_key of this Display.  # noqa: E501
        :type: str
        """

        self._xmr_pub_key = xmr_pub_key

    @property
    def last_command_success(self):
        """Gets the last_command_success of this Display.  # noqa: E501

        The last command success, 0 = failure, 1 = success, 2 = unknown  # noqa: E501

        :return: The last_command_success of this Display.  # noqa: E501
        :rtype: int
        """
        return self._last_command_success

    @last_command_success.setter
    def last_command_success(self, last_command_success):
        """Sets the last_command_success of this Display.

        The last command success, 0 = failure, 1 = success, 2 = unknown  # noqa: E501

        :param last_command_success: The last_command_success of this Display.  # noqa: E501
        :type: int
        """

        self._last_command_success = last_command_success

    @property
    def device_name(self):
        """Gets the device_name of this Display.  # noqa: E501

        The Device Name for the device hardware associated with this Display  # noqa: E501

        :return: The device_name of this Display.  # noqa: E501
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this Display.

        The Device Name for the device hardware associated with this Display  # noqa: E501

        :param device_name: The device_name of this Display.  # noqa: E501
        :type: str
        """

        self._device_name = device_name

    @property
    def time_zone(self):
        """Gets the time_zone of this Display.  # noqa: E501

        The Display Timezone, or empty to use the CMS timezone  # noqa: E501

        :return: The time_zone of this Display.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this Display.

        The Display Timezone, or empty to use the CMS timezone  # noqa: E501

        :param time_zone: The time_zone of this Display.  # noqa: E501
        :type: str
        """

        self._time_zone = time_zone

    @property
    def tags(self):
        """Gets the tags of this Display.  # noqa: E501

        Tags associated with this Display  # noqa: E501

        :return: The tags of this Display.  # noqa: E501
        :rtype: list[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Display.

        Tags associated with this Display  # noqa: E501

        :param tags: The tags of this Display.  # noqa: E501
        :type: list[Tag]
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Display):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
