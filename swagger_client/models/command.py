# coding: utf-8

"""
    Xibo API

    Xibo CMS API  # noqa: E501

    OpenAPI spec version: 1.8.0
    Contact: info@xibo.org.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Command(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'command_id': 'int',
        'command': 'str',
        'code': 'str',
        'description': 'str',
        'user_id': 'int',
        'command_string': 'str',
        'validation_string': 'str'
    }

    attribute_map = {
        'command_id': 'commandId',
        'command': 'command',
        'code': 'code',
        'description': 'description',
        'user_id': 'userId',
        'command_string': 'commandString',
        'validation_string': 'validationString'
    }

    def __init__(self, command_id=None, command=None, code=None, description=None, user_id=None, command_string=None, validation_string=None):  # noqa: E501
        """Command - a model defined in Swagger"""  # noqa: E501

        self._command_id = None
        self._command = None
        self._code = None
        self._description = None
        self._user_id = None
        self._command_string = None
        self._validation_string = None
        self.discriminator = None

        if command_id is not None:
            self.command_id = command_id
        if command is not None:
            self.command = command
        if code is not None:
            self.code = code
        if description is not None:
            self.description = description
        if user_id is not None:
            self.user_id = user_id
        if command_string is not None:
            self.command_string = command_string
        if validation_string is not None:
            self.validation_string = validation_string

    @property
    def command_id(self):
        """Gets the command_id of this Command.  # noqa: E501

        Command Id  # noqa: E501

        :return: The command_id of this Command.  # noqa: E501
        :rtype: int
        """
        return self._command_id

    @command_id.setter
    def command_id(self, command_id):
        """Sets the command_id of this Command.

        Command Id  # noqa: E501

        :param command_id: The command_id of this Command.  # noqa: E501
        :type: int
        """

        self._command_id = command_id

    @property
    def command(self):
        """Gets the command of this Command.  # noqa: E501

        Command Name  # noqa: E501

        :return: The command of this Command.  # noqa: E501
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this Command.

        Command Name  # noqa: E501

        :param command: The command of this Command.  # noqa: E501
        :type: str
        """

        self._command = command

    @property
    def code(self):
        """Gets the code of this Command.  # noqa: E501

        Unique Code  # noqa: E501

        :return: The code of this Command.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Command.

        Unique Code  # noqa: E501

        :param code: The code of this Command.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def description(self):
        """Gets the description of this Command.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this Command.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Command.

        Description  # noqa: E501

        :param description: The description of this Command.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def user_id(self):
        """Gets the user_id of this Command.  # noqa: E501

        User Id  # noqa: E501

        :return: The user_id of this Command.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Command.

        User Id  # noqa: E501

        :param user_id: The user_id of this Command.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def command_string(self):
        """Gets the command_string of this Command.  # noqa: E501

        Command String - when child of a Display Profile  # noqa: E501

        :return: The command_string of this Command.  # noqa: E501
        :rtype: str
        """
        return self._command_string

    @command_string.setter
    def command_string(self, command_string):
        """Sets the command_string of this Command.

        Command String - when child of a Display Profile  # noqa: E501

        :param command_string: The command_string of this Command.  # noqa: E501
        :type: str
        """

        self._command_string = command_string

    @property
    def validation_string(self):
        """Gets the validation_string of this Command.  # noqa: E501

        Validation String - when child of a Display Profile  # noqa: E501

        :return: The validation_string of this Command.  # noqa: E501
        :rtype: str
        """
        return self._validation_string

    @validation_string.setter
    def validation_string(self, validation_string):
        """Sets the validation_string of this Command.

        Validation String - when child of a Display Profile  # noqa: E501

        :param validation_string: The validation_string of this Command.  # noqa: E501
        :type: str
        """

        self._validation_string = validation_string

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Command):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
