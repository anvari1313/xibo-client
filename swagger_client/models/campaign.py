# coding: utf-8

"""
    Xibo API

    Xibo CMS API  # noqa: E501

    OpenAPI spec version: 1.8.0
    Contact: info@xibo.org.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Campaign(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'campaign_id': 'int',
        'owner_id': 'int',
        'campaign': 'str',
        'is_layout_specific': 'int',
        'number_layouts': 'int',
        'total_duration': 'int'
    }

    attribute_map = {
        'campaign_id': 'campaignId',
        'owner_id': 'ownerId',
        'campaign': 'campaign',
        'is_layout_specific': 'isLayoutSpecific',
        'number_layouts': 'numberLayouts',
        'total_duration': 'totalDuration'
    }

    def __init__(self, campaign_id=None, owner_id=None, campaign=None, is_layout_specific=None, number_layouts=None, total_duration=None):  # noqa: E501
        """Campaign - a model defined in Swagger"""  # noqa: E501

        self._campaign_id = None
        self._owner_id = None
        self._campaign = None
        self._is_layout_specific = None
        self._number_layouts = None
        self._total_duration = None
        self.discriminator = None

        if campaign_id is not None:
            self.campaign_id = campaign_id
        if owner_id is not None:
            self.owner_id = owner_id
        if campaign is not None:
            self.campaign = campaign
        if is_layout_specific is not None:
            self.is_layout_specific = is_layout_specific
        if number_layouts is not None:
            self.number_layouts = number_layouts
        if total_duration is not None:
            self.total_duration = total_duration

    @property
    def campaign_id(self):
        """Gets the campaign_id of this Campaign.  # noqa: E501

        The Campaign Id  # noqa: E501

        :return: The campaign_id of this Campaign.  # noqa: E501
        :rtype: int
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """Sets the campaign_id of this Campaign.

        The Campaign Id  # noqa: E501

        :param campaign_id: The campaign_id of this Campaign.  # noqa: E501
        :type: int
        """

        self._campaign_id = campaign_id

    @property
    def owner_id(self):
        """Gets the owner_id of this Campaign.  # noqa: E501

        The userId of the User that owns this Campaign  # noqa: E501

        :return: The owner_id of this Campaign.  # noqa: E501
        :rtype: int
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this Campaign.

        The userId of the User that owns this Campaign  # noqa: E501

        :param owner_id: The owner_id of this Campaign.  # noqa: E501
        :type: int
        """

        self._owner_id = owner_id

    @property
    def campaign(self):
        """Gets the campaign of this Campaign.  # noqa: E501

        The name of the Campaign  # noqa: E501

        :return: The campaign of this Campaign.  # noqa: E501
        :rtype: str
        """
        return self._campaign

    @campaign.setter
    def campaign(self, campaign):
        """Sets the campaign of this Campaign.

        The name of the Campaign  # noqa: E501

        :param campaign: The campaign of this Campaign.  # noqa: E501
        :type: str
        """

        self._campaign = campaign

    @property
    def is_layout_specific(self):
        """Gets the is_layout_specific of this Campaign.  # noqa: E501

        A 0|1 flag to indicate whether this is a Layout specific Campaign or not.  # noqa: E501

        :return: The is_layout_specific of this Campaign.  # noqa: E501
        :rtype: int
        """
        return self._is_layout_specific

    @is_layout_specific.setter
    def is_layout_specific(self, is_layout_specific):
        """Sets the is_layout_specific of this Campaign.

        A 0|1 flag to indicate whether this is a Layout specific Campaign or not.  # noqa: E501

        :param is_layout_specific: The is_layout_specific of this Campaign.  # noqa: E501
        :type: int
        """

        self._is_layout_specific = is_layout_specific

    @property
    def number_layouts(self):
        """Gets the number_layouts of this Campaign.  # noqa: E501

        The number of Layouts associated with this Campaign  # noqa: E501

        :return: The number_layouts of this Campaign.  # noqa: E501
        :rtype: int
        """
        return self._number_layouts

    @number_layouts.setter
    def number_layouts(self, number_layouts):
        """Sets the number_layouts of this Campaign.

        The number of Layouts associated with this Campaign  # noqa: E501

        :param number_layouts: The number_layouts of this Campaign.  # noqa: E501
        :type: int
        """

        self._number_layouts = number_layouts

    @property
    def total_duration(self):
        """Gets the total_duration of this Campaign.  # noqa: E501

        The total duration of the campaign (sum of layout's durations)  # noqa: E501

        :return: The total_duration of this Campaign.  # noqa: E501
        :rtype: int
        """
        return self._total_duration

    @total_duration.setter
    def total_duration(self, total_duration):
        """Sets the total_duration of this Campaign.

        The total duration of the campaign (sum of layout's durations)  # noqa: E501

        :param total_duration: The total_duration of this Campaign.  # noqa: E501
        :type: int
        """

        self._total_duration = total_duration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Campaign):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
