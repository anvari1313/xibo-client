# coding: utf-8

"""
    Xibo API

    Xibo CMS API  # noqa: E501

    OpenAPI spec version: 1.8.0
    Contact: info@xibo.org.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.permission import Permission  # noqa: F401,E501
from swagger_client.models.region import Region  # noqa: F401,E501
from swagger_client.models.tag import Tag  # noqa: F401,E501
from swagger_client.models.widget import Widget  # noqa: F401,E501


class Playlist(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'playlist_id': 'int',
        'owner_id': 'int',
        'name': 'str',
        'tags': 'list[Tag]',
        'regions': 'list[Region]',
        'widgets': 'list[Widget]',
        'permissions': 'list[Permission]',
        'display_order': 'int'
    }

    attribute_map = {
        'playlist_id': 'playlistId',
        'owner_id': 'ownerId',
        'name': 'name',
        'tags': 'tags',
        'regions': 'regions',
        'widgets': 'widgets',
        'permissions': 'permissions',
        'display_order': 'displayOrder'
    }

    def __init__(self, playlist_id=None, owner_id=None, name=None, tags=None, regions=None, widgets=None, permissions=None, display_order=None):  # noqa: E501
        """Playlist - a model defined in Swagger"""  # noqa: E501

        self._playlist_id = None
        self._owner_id = None
        self._name = None
        self._tags = None
        self._regions = None
        self._widgets = None
        self._permissions = None
        self._display_order = None
        self.discriminator = None

        if playlist_id is not None:
            self.playlist_id = playlist_id
        if owner_id is not None:
            self.owner_id = owner_id
        if name is not None:
            self.name = name
        if tags is not None:
            self.tags = tags
        if regions is not None:
            self.regions = regions
        if widgets is not None:
            self.widgets = widgets
        if permissions is not None:
            self.permissions = permissions
        if display_order is not None:
            self.display_order = display_order

    @property
    def playlist_id(self):
        """Gets the playlist_id of this Playlist.  # noqa: E501

        The ID of this Playlist  # noqa: E501

        :return: The playlist_id of this Playlist.  # noqa: E501
        :rtype: int
        """
        return self._playlist_id

    @playlist_id.setter
    def playlist_id(self, playlist_id):
        """Sets the playlist_id of this Playlist.

        The ID of this Playlist  # noqa: E501

        :param playlist_id: The playlist_id of this Playlist.  # noqa: E501
        :type: int
        """

        self._playlist_id = playlist_id

    @property
    def owner_id(self):
        """Gets the owner_id of this Playlist.  # noqa: E501

        The userId of the User that owns this Playlist  # noqa: E501

        :return: The owner_id of this Playlist.  # noqa: E501
        :rtype: int
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this Playlist.

        The userId of the User that owns this Playlist  # noqa: E501

        :param owner_id: The owner_id of this Playlist.  # noqa: E501
        :type: int
        """

        self._owner_id = owner_id

    @property
    def name(self):
        """Gets the name of this Playlist.  # noqa: E501

        The Name of the Playlist  # noqa: E501

        :return: The name of this Playlist.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Playlist.

        The Name of the Playlist  # noqa: E501

        :param name: The name of this Playlist.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def tags(self):
        """Gets the tags of this Playlist.  # noqa: E501

        An array of Tags  # noqa: E501

        :return: The tags of this Playlist.  # noqa: E501
        :rtype: list[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Playlist.

        An array of Tags  # noqa: E501

        :param tags: The tags of this Playlist.  # noqa: E501
        :type: list[Tag]
        """

        self._tags = tags

    @property
    def regions(self):
        """Gets the regions of this Playlist.  # noqa: E501

        An array of Regions this Playlist is assigned to  # noqa: E501

        :return: The regions of this Playlist.  # noqa: E501
        :rtype: list[Region]
        """
        return self._regions

    @regions.setter
    def regions(self, regions):
        """Sets the regions of this Playlist.

        An array of Regions this Playlist is assigned to  # noqa: E501

        :param regions: The regions of this Playlist.  # noqa: E501
        :type: list[Region]
        """

        self._regions = regions

    @property
    def widgets(self):
        """Gets the widgets of this Playlist.  # noqa: E501

        An array of Widgets assigned to this Playlist  # noqa: E501

        :return: The widgets of this Playlist.  # noqa: E501
        :rtype: list[Widget]
        """
        return self._widgets

    @widgets.setter
    def widgets(self, widgets):
        """Sets the widgets of this Playlist.

        An array of Widgets assigned to this Playlist  # noqa: E501

        :param widgets: The widgets of this Playlist.  # noqa: E501
        :type: list[Widget]
        """

        self._widgets = widgets

    @property
    def permissions(self):
        """Gets the permissions of this Playlist.  # noqa: E501

        An array of permissions  # noqa: E501

        :return: The permissions of this Playlist.  # noqa: E501
        :rtype: list[Permission]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this Playlist.

        An array of permissions  # noqa: E501

        :param permissions: The permissions of this Playlist.  # noqa: E501
        :type: list[Permission]
        """

        self._permissions = permissions

    @property
    def display_order(self):
        """Gets the display_order of this Playlist.  # noqa: E501

        The display order of the Playlist when assigned to a Region  # noqa: E501

        :return: The display_order of this Playlist.  # noqa: E501
        :rtype: int
        """
        return self._display_order

    @display_order.setter
    def display_order(self, display_order):
        """Sets the display_order of this Playlist.

        The display order of the Playlist when assigned to a Region  # noqa: E501

        :param display_order: The display_order of this Playlist.  # noqa: E501
        :type: int
        """

        self._display_order = display_order

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Playlist):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
