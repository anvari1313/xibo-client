# coding: utf-8

"""
    Xibo API

    Xibo CMS API  # noqa: E501

    OpenAPI spec version: 1.8.0
    Contact: info@xibo.org.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DayPart(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'day_part_id': 'int',
        'is_always': 'int',
        'is_custom': 'int'
    }

    attribute_map = {
        'day_part_id': 'dayPartId',
        'is_always': 'isAlways',
        'is_custom': 'isCustom'
    }

    def __init__(self, day_part_id=None, is_always=None, is_custom=None):  # noqa: E501
        """DayPart - a model defined in Swagger"""  # noqa: E501

        self._day_part_id = None
        self._is_always = None
        self._is_custom = None
        self.discriminator = None

        if day_part_id is not None:
            self.day_part_id = day_part_id
        if is_always is not None:
            self.is_always = is_always
        if is_custom is not None:
            self.is_custom = is_custom

    @property
    def day_part_id(self):
        """Gets the day_part_id of this DayPart.  # noqa: E501

        The ID of this Daypart  # noqa: E501

        :return: The day_part_id of this DayPart.  # noqa: E501
        :rtype: int
        """
        return self._day_part_id

    @day_part_id.setter
    def day_part_id(self, day_part_id):
        """Sets the day_part_id of this DayPart.

        The ID of this Daypart  # noqa: E501

        :param day_part_id: The day_part_id of this DayPart.  # noqa: E501
        :type: int
        """

        self._day_part_id = day_part_id

    @property
    def is_always(self):
        """Gets the is_always of this DayPart.  # noqa: E501

        A readonly flag determining whether this DayPart is always  # noqa: E501

        :return: The is_always of this DayPart.  # noqa: E501
        :rtype: int
        """
        return self._is_always

    @is_always.setter
    def is_always(self, is_always):
        """Sets the is_always of this DayPart.

        A readonly flag determining whether this DayPart is always  # noqa: E501

        :param is_always: The is_always of this DayPart.  # noqa: E501
        :type: int
        """

        self._is_always = is_always

    @property
    def is_custom(self):
        """Gets the is_custom of this DayPart.  # noqa: E501

        A readonly flag determining whether this DayPart is custom  # noqa: E501

        :return: The is_custom of this DayPart.  # noqa: E501
        :rtype: int
        """
        return self._is_custom

    @is_custom.setter
    def is_custom(self, is_custom):
        """Sets the is_custom of this DayPart.

        A readonly flag determining whether this DayPart is custom  # noqa: E501

        :param is_custom: The is_custom of this DayPart.  # noqa: E501
        :type: int
        """

        self._is_custom = is_custom

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DayPart):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
