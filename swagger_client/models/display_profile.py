# coding: utf-8

"""
    Xibo API

    Xibo CMS API  # noqa: E501

    OpenAPI spec version: 1.8.0
    Contact: info@xibo.org.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DisplayProfile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_profile_id': 'int',
        'name': 'str',
        'type': 'str',
        'config': 'list[str]',
        'is_default': 'int',
        'user_id': 'int',
        'config_default': 'list[str]',
        'config_tabs': 'list[str]'
    }

    attribute_map = {
        'display_profile_id': 'displayProfileId',
        'name': 'name',
        'type': 'type',
        'config': 'config',
        'is_default': 'isDefault',
        'user_id': 'userId',
        'config_default': 'configDefault',
        'config_tabs': 'configTabs'
    }

    def __init__(self, display_profile_id=None, name=None, type=None, config=None, is_default=None, user_id=None, config_default=None, config_tabs=None):  # noqa: E501
        """DisplayProfile - a model defined in Swagger"""  # noqa: E501

        self._display_profile_id = None
        self._name = None
        self._type = None
        self._config = None
        self._is_default = None
        self._user_id = None
        self._config_default = None
        self._config_tabs = None
        self.discriminator = None

        if display_profile_id is not None:
            self.display_profile_id = display_profile_id
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if config is not None:
            self.config = config
        if is_default is not None:
            self.is_default = is_default
        if user_id is not None:
            self.user_id = user_id
        if config_default is not None:
            self.config_default = config_default
        if config_tabs is not None:
            self.config_tabs = config_tabs

    @property
    def display_profile_id(self):
        """Gets the display_profile_id of this DisplayProfile.  # noqa: E501

        The ID of this Display Profile  # noqa: E501

        :return: The display_profile_id of this DisplayProfile.  # noqa: E501
        :rtype: int
        """
        return self._display_profile_id

    @display_profile_id.setter
    def display_profile_id(self, display_profile_id):
        """Sets the display_profile_id of this DisplayProfile.

        The ID of this Display Profile  # noqa: E501

        :param display_profile_id: The display_profile_id of this DisplayProfile.  # noqa: E501
        :type: int
        """

        self._display_profile_id = display_profile_id

    @property
    def name(self):
        """Gets the name of this DisplayProfile.  # noqa: E501

        The name of this Display Profile  # noqa: E501

        :return: The name of this DisplayProfile.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DisplayProfile.

        The name of this Display Profile  # noqa: E501

        :param name: The name of this DisplayProfile.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this DisplayProfile.  # noqa: E501

        The player type that this Display Profile is for  # noqa: E501

        :return: The type of this DisplayProfile.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DisplayProfile.

        The player type that this Display Profile is for  # noqa: E501

        :param type: The type of this DisplayProfile.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def config(self):
        """Gets the config of this DisplayProfile.  # noqa: E501

        The configuration options for this Profile  # noqa: E501

        :return: The config of this DisplayProfile.  # noqa: E501
        :rtype: list[str]
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this DisplayProfile.

        The configuration options for this Profile  # noqa: E501

        :param config: The config of this DisplayProfile.  # noqa: E501
        :type: list[str]
        """

        self._config = config

    @property
    def is_default(self):
        """Gets the is_default of this DisplayProfile.  # noqa: E501

        A flag indicating if this profile should be used as the Default for the client type  # noqa: E501

        :return: The is_default of this DisplayProfile.  # noqa: E501
        :rtype: int
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this DisplayProfile.

        A flag indicating if this profile should be used as the Default for the client type  # noqa: E501

        :param is_default: The is_default of this DisplayProfile.  # noqa: E501
        :type: int
        """

        self._is_default = is_default

    @property
    def user_id(self):
        """Gets the user_id of this DisplayProfile.  # noqa: E501

        The userId of the User that owns this profile  # noqa: E501

        :return: The user_id of this DisplayProfile.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this DisplayProfile.

        The userId of the User that owns this profile  # noqa: E501

        :param user_id: The user_id of this DisplayProfile.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def config_default(self):
        """Gets the config_default of this DisplayProfile.  # noqa: E501

        The default configuration options for this Profile  # noqa: E501

        :return: The config_default of this DisplayProfile.  # noqa: E501
        :rtype: list[str]
        """
        return self._config_default

    @config_default.setter
    def config_default(self, config_default):
        """Sets the config_default of this DisplayProfile.

        The default configuration options for this Profile  # noqa: E501

        :param config_default: The config_default of this DisplayProfile.  # noqa: E501
        :type: list[str]
        """

        self._config_default = config_default

    @property
    def config_tabs(self):
        """Gets the config_tabs of this DisplayProfile.  # noqa: E501

        Array of tab names to logically group the configuration options  # noqa: E501

        :return: The config_tabs of this DisplayProfile.  # noqa: E501
        :rtype: list[str]
        """
        return self._config_tabs

    @config_tabs.setter
    def config_tabs(self, config_tabs):
        """Sets the config_tabs of this DisplayProfile.

        Array of tab names to logically group the configuration options  # noqa: E501

        :param config_tabs: The config_tabs of this DisplayProfile.  # noqa: E501
        :type: list[str]
        """

        self._config_tabs = config_tabs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DisplayProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
