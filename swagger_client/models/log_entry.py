# coding: utf-8

"""
    Xibo API

    Xibo CMS API  # noqa: E501

    OpenAPI spec version: 1.8.0
    Contact: info@xibo.org.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LogEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'log_id': 'int',
        'run_no': 'str',
        'log_date': 'int',
        'channel': 'str',
        'page': 'str',
        'function': 'str',
        'message': 'str',
        'display_id': 'int',
        'type': 'str',
        'display': 'str'
    }

    attribute_map = {
        'log_id': 'logId',
        'run_no': 'runNo',
        'log_date': 'logDate',
        'channel': 'channel',
        'page': 'page',
        'function': 'function',
        'message': 'message',
        'display_id': 'displayId',
        'type': 'type',
        'display': 'display'
    }

    def __init__(self, log_id=None, run_no=None, log_date=None, channel=None, page=None, function=None, message=None, display_id=None, type=None, display=None):  # noqa: E501
        """LogEntry - a model defined in Swagger"""  # noqa: E501

        self._log_id = None
        self._run_no = None
        self._log_date = None
        self._channel = None
        self._page = None
        self._function = None
        self._message = None
        self._display_id = None
        self._type = None
        self._display = None
        self.discriminator = None

        if log_id is not None:
            self.log_id = log_id
        if run_no is not None:
            self.run_no = run_no
        if log_date is not None:
            self.log_date = log_date
        if channel is not None:
            self.channel = channel
        if page is not None:
            self.page = page
        if function is not None:
            self.function = function
        if message is not None:
            self.message = message
        if display_id is not None:
            self.display_id = display_id
        if type is not None:
            self.type = type
        if display is not None:
            self.display = display

    @property
    def log_id(self):
        """Gets the log_id of this LogEntry.  # noqa: E501

        The Log ID  # noqa: E501

        :return: The log_id of this LogEntry.  # noqa: E501
        :rtype: int
        """
        return self._log_id

    @log_id.setter
    def log_id(self, log_id):
        """Sets the log_id of this LogEntry.

        The Log ID  # noqa: E501

        :param log_id: The log_id of this LogEntry.  # noqa: E501
        :type: int
        """

        self._log_id = log_id

    @property
    def run_no(self):
        """Gets the run_no of this LogEntry.  # noqa: E501

        A unique run number for a set of Log Messages.  # noqa: E501

        :return: The run_no of this LogEntry.  # noqa: E501
        :rtype: str
        """
        return self._run_no

    @run_no.setter
    def run_no(self, run_no):
        """Sets the run_no of this LogEntry.

        A unique run number for a set of Log Messages.  # noqa: E501

        :param run_no: The run_no of this LogEntry.  # noqa: E501
        :type: str
        """

        self._run_no = run_no

    @property
    def log_date(self):
        """Gets the log_date of this LogEntry.  # noqa: E501

        A timestamp representing the CMS date this log message occured  # noqa: E501

        :return: The log_date of this LogEntry.  # noqa: E501
        :rtype: int
        """
        return self._log_date

    @log_date.setter
    def log_date(self, log_date):
        """Sets the log_date of this LogEntry.

        A timestamp representing the CMS date this log message occured  # noqa: E501

        :param log_date: The log_date of this LogEntry.  # noqa: E501
        :type: int
        """

        self._log_date = log_date

    @property
    def channel(self):
        """Gets the channel of this LogEntry.  # noqa: E501

        The Channel that generated this message. WEB/API/MAINT/TEST  # noqa: E501

        :return: The channel of this LogEntry.  # noqa: E501
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this LogEntry.

        The Channel that generated this message. WEB/API/MAINT/TEST  # noqa: E501

        :param channel: The channel of this LogEntry.  # noqa: E501
        :type: str
        """

        self._channel = channel

    @property
    def page(self):
        """Gets the page of this LogEntry.  # noqa: E501

        The requested route  # noqa: E501

        :return: The page of this LogEntry.  # noqa: E501
        :rtype: str
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this LogEntry.

        The requested route  # noqa: E501

        :param page: The page of this LogEntry.  # noqa: E501
        :type: str
        """

        self._page = page

    @property
    def function(self):
        """Gets the function of this LogEntry.  # noqa: E501

        The request method, GET/POST/PUT/DELETE  # noqa: E501

        :return: The function of this LogEntry.  # noqa: E501
        :rtype: str
        """
        return self._function

    @function.setter
    def function(self, function):
        """Sets the function of this LogEntry.

        The request method, GET/POST/PUT/DELETE  # noqa: E501

        :param function: The function of this LogEntry.  # noqa: E501
        :type: str
        """

        self._function = function

    @property
    def message(self):
        """Gets the message of this LogEntry.  # noqa: E501

        The log message  # noqa: E501

        :return: The message of this LogEntry.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this LogEntry.

        The log message  # noqa: E501

        :param message: The message of this LogEntry.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def display_id(self):
        """Gets the display_id of this LogEntry.  # noqa: E501

        The display ID this message relates to or NULL for CMS  # noqa: E501

        :return: The display_id of this LogEntry.  # noqa: E501
        :rtype: int
        """
        return self._display_id

    @display_id.setter
    def display_id(self, display_id):
        """Sets the display_id of this LogEntry.

        The display ID this message relates to or NULL for CMS  # noqa: E501

        :param display_id: The display_id of this LogEntry.  # noqa: E501
        :type: int
        """

        self._display_id = display_id

    @property
    def type(self):
        """Gets the type of this LogEntry.  # noqa: E501

        The Log Level  # noqa: E501

        :return: The type of this LogEntry.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LogEntry.

        The Log Level  # noqa: E501

        :param type: The type of this LogEntry.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def display(self):
        """Gets the display of this LogEntry.  # noqa: E501

        The display this message relates to or CMS for CMS.  # noqa: E501

        :return: The display of this LogEntry.  # noqa: E501
        :rtype: str
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this LogEntry.

        The display this message relates to or CMS for CMS.  # noqa: E501

        :param display: The display of this LogEntry.  # noqa: E501
        :type: str
        """

        self._display = display

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LogEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
