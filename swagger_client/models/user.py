# coding: utf-8

"""
    Xibo API

    Xibo CMS API  # noqa: E501

    OpenAPI spec version: 1.8.0
    Contact: info@xibo.org.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.campaign import Campaign  # noqa: F401,E501
from swagger_client.models.layout import Layout  # noqa: F401,E501
from swagger_client.models.media import Media  # noqa: F401,E501
from swagger_client.models.schedule import Schedule  # noqa: F401,E501
from swagger_client.models.user_group import UserGroup  # noqa: F401,E501


class User(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_id': 'int',
        'user_name': 'str',
        'user_type_id': 'int',
        'logged_in': 'int',
        'email': 'str',
        'home_page_id': 'int',
        'last_accessed': 'int',
        'new_user_wizard': 'int',
        'retired': 'int',
        'group_id': 'int',
        'group': 'int',
        'library_quota': 'int',
        'first_name': 'str',
        'last_name': 'str',
        'phone': 'str',
        'ref1': 'str',
        'ref2': 'str',
        'ref3': 'str',
        'ref4': 'str',
        'ref5': 'str',
        'groups': 'list[UserGroup]',
        'campaigns': 'list[Campaign]',
        'layouts': 'list[Layout]',
        'media': 'list[Media]',
        'events': 'list[Schedule]',
        'home_page': 'str',
        'is_system_notification': 'int',
        'is_display_notification': 'int'
    }

    attribute_map = {
        'user_id': 'userId',
        'user_name': 'userName',
        'user_type_id': 'userTypeId',
        'logged_in': 'loggedIn',
        'email': 'email',
        'home_page_id': 'homePageId',
        'last_accessed': 'lastAccessed',
        'new_user_wizard': 'newUserWizard',
        'retired': 'retired',
        'group_id': 'groupId',
        'group': 'group',
        'library_quota': 'libraryQuota',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'phone': 'phone',
        'ref1': 'ref1',
        'ref2': 'ref2',
        'ref3': 'ref3',
        'ref4': 'ref4',
        'ref5': 'ref5',
        'groups': 'groups',
        'campaigns': 'campaigns',
        'layouts': 'layouts',
        'media': 'media',
        'events': 'events',
        'home_page': 'homePage',
        'is_system_notification': 'isSystemNotification',
        'is_display_notification': 'isDisplayNotification'
    }

    def __init__(self, user_id=None, user_name=None, user_type_id=None, logged_in=None, email=None, home_page_id=None, last_accessed=None, new_user_wizard=None, retired=None, group_id=None, group=None, library_quota=None, first_name=None, last_name=None, phone=None, ref1=None, ref2=None, ref3=None, ref4=None, ref5=None, groups=None, campaigns=None, layouts=None, media=None, events=None, home_page=None, is_system_notification=None, is_display_notification=None):  # noqa: E501
        """User - a model defined in Swagger"""  # noqa: E501

        self._user_id = None
        self._user_name = None
        self._user_type_id = None
        self._logged_in = None
        self._email = None
        self._home_page_id = None
        self._last_accessed = None
        self._new_user_wizard = None
        self._retired = None
        self._group_id = None
        self._group = None
        self._library_quota = None
        self._first_name = None
        self._last_name = None
        self._phone = None
        self._ref1 = None
        self._ref2 = None
        self._ref3 = None
        self._ref4 = None
        self._ref5 = None
        self._groups = None
        self._campaigns = None
        self._layouts = None
        self._media = None
        self._events = None
        self._home_page = None
        self._is_system_notification = None
        self._is_display_notification = None
        self.discriminator = None

        if user_id is not None:
            self.user_id = user_id
        if user_name is not None:
            self.user_name = user_name
        if user_type_id is not None:
            self.user_type_id = user_type_id
        if logged_in is not None:
            self.logged_in = logged_in
        if email is not None:
            self.email = email
        if home_page_id is not None:
            self.home_page_id = home_page_id
        if last_accessed is not None:
            self.last_accessed = last_accessed
        if new_user_wizard is not None:
            self.new_user_wizard = new_user_wizard
        if retired is not None:
            self.retired = retired
        if group_id is not None:
            self.group_id = group_id
        if group is not None:
            self.group = group
        if library_quota is not None:
            self.library_quota = library_quota
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if phone is not None:
            self.phone = phone
        if ref1 is not None:
            self.ref1 = ref1
        if ref2 is not None:
            self.ref2 = ref2
        if ref3 is not None:
            self.ref3 = ref3
        if ref4 is not None:
            self.ref4 = ref4
        if ref5 is not None:
            self.ref5 = ref5
        if groups is not None:
            self.groups = groups
        if campaigns is not None:
            self.campaigns = campaigns
        if layouts is not None:
            self.layouts = layouts
        if media is not None:
            self.media = media
        if events is not None:
            self.events = events
        if home_page is not None:
            self.home_page = home_page
        if is_system_notification is not None:
            self.is_system_notification = is_system_notification
        if is_display_notification is not None:
            self.is_display_notification = is_display_notification

    @property
    def user_id(self):
        """Gets the user_id of this User.  # noqa: E501

        The ID of this User  # noqa: E501

        :return: The user_id of this User.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this User.

        The ID of this User  # noqa: E501

        :param user_id: The user_id of this User.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def user_name(self):
        """Gets the user_name of this User.  # noqa: E501

        The user name  # noqa: E501

        :return: The user_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this User.

        The user name  # noqa: E501

        :param user_name: The user_name of this User.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def user_type_id(self):
        """Gets the user_type_id of this User.  # noqa: E501

        The user type ID  # noqa: E501

        :return: The user_type_id of this User.  # noqa: E501
        :rtype: int
        """
        return self._user_type_id

    @user_type_id.setter
    def user_type_id(self, user_type_id):
        """Sets the user_type_id of this User.

        The user type ID  # noqa: E501

        :param user_type_id: The user_type_id of this User.  # noqa: E501
        :type: int
        """

        self._user_type_id = user_type_id

    @property
    def logged_in(self):
        """Gets the logged_in of this User.  # noqa: E501

        Flag indicating whether this user is logged in or not  # noqa: E501

        :return: The logged_in of this User.  # noqa: E501
        :rtype: int
        """
        return self._logged_in

    @logged_in.setter
    def logged_in(self, logged_in):
        """Sets the logged_in of this User.

        Flag indicating whether this user is logged in or not  # noqa: E501

        :param logged_in: The logged_in of this User.  # noqa: E501
        :type: int
        """

        self._logged_in = logged_in

    @property
    def email(self):
        """Gets the email of this User.  # noqa: E501

        Email address of the user used for email alerts  # noqa: E501

        :return: The email of this User.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.

        Email address of the user used for email alerts  # noqa: E501

        :param email: The email of this User.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def home_page_id(self):
        """Gets the home_page_id of this User.  # noqa: E501

        The pageId of the Homepage for this User  # noqa: E501

        :return: The home_page_id of this User.  # noqa: E501
        :rtype: int
        """
        return self._home_page_id

    @home_page_id.setter
    def home_page_id(self, home_page_id):
        """Sets the home_page_id of this User.

        The pageId of the Homepage for this User  # noqa: E501

        :param home_page_id: The home_page_id of this User.  # noqa: E501
        :type: int
        """

        self._home_page_id = home_page_id

    @property
    def last_accessed(self):
        """Gets the last_accessed of this User.  # noqa: E501

        A timestamp indicating the time the user last logged into the CMS  # noqa: E501

        :return: The last_accessed of this User.  # noqa: E501
        :rtype: int
        """
        return self._last_accessed

    @last_accessed.setter
    def last_accessed(self, last_accessed):
        """Sets the last_accessed of this User.

        A timestamp indicating the time the user last logged into the CMS  # noqa: E501

        :param last_accessed: The last_accessed of this User.  # noqa: E501
        :type: int
        """

        self._last_accessed = last_accessed

    @property
    def new_user_wizard(self):
        """Gets the new_user_wizard of this User.  # noqa: E501

        A flag indicating whether this user has see the new user wizard  # noqa: E501

        :return: The new_user_wizard of this User.  # noqa: E501
        :rtype: int
        """
        return self._new_user_wizard

    @new_user_wizard.setter
    def new_user_wizard(self, new_user_wizard):
        """Sets the new_user_wizard of this User.

        A flag indicating whether this user has see the new user wizard  # noqa: E501

        :param new_user_wizard: The new_user_wizard of this User.  # noqa: E501
        :type: int
        """

        self._new_user_wizard = new_user_wizard

    @property
    def retired(self):
        """Gets the retired of this User.  # noqa: E501

        A flag indicating whether the user is retired  # noqa: E501

        :return: The retired of this User.  # noqa: E501
        :rtype: int
        """
        return self._retired

    @retired.setter
    def retired(self, retired):
        """Sets the retired of this User.

        A flag indicating whether the user is retired  # noqa: E501

        :param retired: The retired of this User.  # noqa: E501
        :type: int
        """

        self._retired = retired

    @property
    def group_id(self):
        """Gets the group_id of this User.  # noqa: E501

        The users user group ID  # noqa: E501

        :return: The group_id of this User.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this User.

        The users user group ID  # noqa: E501

        :param group_id: The group_id of this User.  # noqa: E501
        :type: int
        """

        self._group_id = group_id

    @property
    def group(self):
        """Gets the group of this User.  # noqa: E501

        The users group name  # noqa: E501

        :return: The group of this User.  # noqa: E501
        :rtype: int
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this User.

        The users group name  # noqa: E501

        :param group: The group of this User.  # noqa: E501
        :type: int
        """

        self._group = group

    @property
    def library_quota(self):
        """Gets the library_quota of this User.  # noqa: E501

        The users library quota in bytes  # noqa: E501

        :return: The library_quota of this User.  # noqa: E501
        :rtype: int
        """
        return self._library_quota

    @library_quota.setter
    def library_quota(self, library_quota):
        """Sets the library_quota of this User.

        The users library quota in bytes  # noqa: E501

        :param library_quota: The library_quota of this User.  # noqa: E501
        :type: int
        """

        self._library_quota = library_quota

    @property
    def first_name(self):
        """Gets the first_name of this User.  # noqa: E501

        First Name  # noqa: E501

        :return: The first_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this User.

        First Name  # noqa: E501

        :param first_name: The first_name of this User.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this User.  # noqa: E501

        Last Name  # noqa: E501

        :return: The last_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this User.

        Last Name  # noqa: E501

        :param last_name: The last_name of this User.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def phone(self):
        """Gets the phone of this User.  # noqa: E501

        Phone Number  # noqa: E501

        :return: The phone of this User.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this User.

        Phone Number  # noqa: E501

        :param phone: The phone of this User.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def ref1(self):
        """Gets the ref1 of this User.  # noqa: E501

        Reference field 1  # noqa: E501

        :return: The ref1 of this User.  # noqa: E501
        :rtype: str
        """
        return self._ref1

    @ref1.setter
    def ref1(self, ref1):
        """Sets the ref1 of this User.

        Reference field 1  # noqa: E501

        :param ref1: The ref1 of this User.  # noqa: E501
        :type: str
        """

        self._ref1 = ref1

    @property
    def ref2(self):
        """Gets the ref2 of this User.  # noqa: E501

        Reference field 2  # noqa: E501

        :return: The ref2 of this User.  # noqa: E501
        :rtype: str
        """
        return self._ref2

    @ref2.setter
    def ref2(self, ref2):
        """Sets the ref2 of this User.

        Reference field 2  # noqa: E501

        :param ref2: The ref2 of this User.  # noqa: E501
        :type: str
        """

        self._ref2 = ref2

    @property
    def ref3(self):
        """Gets the ref3 of this User.  # noqa: E501

        Reference field 3  # noqa: E501

        :return: The ref3 of this User.  # noqa: E501
        :rtype: str
        """
        return self._ref3

    @ref3.setter
    def ref3(self, ref3):
        """Sets the ref3 of this User.

        Reference field 3  # noqa: E501

        :param ref3: The ref3 of this User.  # noqa: E501
        :type: str
        """

        self._ref3 = ref3

    @property
    def ref4(self):
        """Gets the ref4 of this User.  # noqa: E501

        Reference field 4  # noqa: E501

        :return: The ref4 of this User.  # noqa: E501
        :rtype: str
        """
        return self._ref4

    @ref4.setter
    def ref4(self, ref4):
        """Sets the ref4 of this User.

        Reference field 4  # noqa: E501

        :param ref4: The ref4 of this User.  # noqa: E501
        :type: str
        """

        self._ref4 = ref4

    @property
    def ref5(self):
        """Gets the ref5 of this User.  # noqa: E501

        Reference field 5  # noqa: E501

        :return: The ref5 of this User.  # noqa: E501
        :rtype: str
        """
        return self._ref5

    @ref5.setter
    def ref5(self, ref5):
        """Sets the ref5 of this User.

        Reference field 5  # noqa: E501

        :param ref5: The ref5 of this User.  # noqa: E501
        :type: str
        """

        self._ref5 = ref5

    @property
    def groups(self):
        """Gets the groups of this User.  # noqa: E501

        An array of user groups this user is assigned to  # noqa: E501

        :return: The groups of this User.  # noqa: E501
        :rtype: list[UserGroup]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this User.

        An array of user groups this user is assigned to  # noqa: E501

        :param groups: The groups of this User.  # noqa: E501
        :type: list[UserGroup]
        """

        self._groups = groups

    @property
    def campaigns(self):
        """Gets the campaigns of this User.  # noqa: E501

        An array of Campaigns for this User  # noqa: E501

        :return: The campaigns of this User.  # noqa: E501
        :rtype: list[Campaign]
        """
        return self._campaigns

    @campaigns.setter
    def campaigns(self, campaigns):
        """Sets the campaigns of this User.

        An array of Campaigns for this User  # noqa: E501

        :param campaigns: The campaigns of this User.  # noqa: E501
        :type: list[Campaign]
        """

        self._campaigns = campaigns

    @property
    def layouts(self):
        """Gets the layouts of this User.  # noqa: E501

        An array of Layouts for this User  # noqa: E501

        :return: The layouts of this User.  # noqa: E501
        :rtype: list[Layout]
        """
        return self._layouts

    @layouts.setter
    def layouts(self, layouts):
        """Sets the layouts of this User.

        An array of Layouts for this User  # noqa: E501

        :param layouts: The layouts of this User.  # noqa: E501
        :type: list[Layout]
        """

        self._layouts = layouts

    @property
    def media(self):
        """Gets the media of this User.  # noqa: E501

        An array of Media for this user  # noqa: E501

        :return: The media of this User.  # noqa: E501
        :rtype: list[Media]
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this User.

        An array of Media for this user  # noqa: E501

        :param media: The media of this User.  # noqa: E501
        :type: list[Media]
        """

        self._media = media

    @property
    def events(self):
        """Gets the events of this User.  # noqa: E501

        An array of Scheduled Events for this User  # noqa: E501

        :return: The events of this User.  # noqa: E501
        :rtype: list[Schedule]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this User.

        An array of Scheduled Events for this User  # noqa: E501

        :param events: The events of this User.  # noqa: E501
        :type: list[Schedule]
        """

        self._events = events

    @property
    def home_page(self):
        """Gets the home_page of this User.  # noqa: E501

        The name of home page  # noqa: E501

        :return: The home_page of this User.  # noqa: E501
        :rtype: str
        """
        return self._home_page

    @home_page.setter
    def home_page(self, home_page):
        """Sets the home_page of this User.

        The name of home page  # noqa: E501

        :param home_page: The home_page of this User.  # noqa: E501
        :type: str
        """

        self._home_page = home_page

    @property
    def is_system_notification(self):
        """Gets the is_system_notification of this User.  # noqa: E501

        Does this Group receive system notifications.  # noqa: E501

        :return: The is_system_notification of this User.  # noqa: E501
        :rtype: int
        """
        return self._is_system_notification

    @is_system_notification.setter
    def is_system_notification(self, is_system_notification):
        """Sets the is_system_notification of this User.

        Does this Group receive system notifications.  # noqa: E501

        :param is_system_notification: The is_system_notification of this User.  # noqa: E501
        :type: int
        """

        self._is_system_notification = is_system_notification

    @property
    def is_display_notification(self):
        """Gets the is_display_notification of this User.  # noqa: E501

        Does this Group receive system notifications.  # noqa: E501

        :return: The is_display_notification of this User.  # noqa: E501
        :rtype: int
        """
        return self._is_display_notification

    @is_display_notification.setter
    def is_display_notification(self, is_display_notification):
        """Sets the is_display_notification of this User.

        Does this Group receive system notifications.  # noqa: E501

        :param is_display_notification: The is_display_notification of this User.  # noqa: E501
        :type: int
        """

        self._is_display_notification = is_display_notification

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
