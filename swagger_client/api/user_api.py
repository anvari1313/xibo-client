# coding: utf-8

"""
    Xibo API

    Xibo CMS API  # noqa: E501

    OpenAPI spec version: 1.8.0
    Contact: info@xibo.org.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class UserApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def user_add(self, user_name, user_type_id, home_page_id, password, group_id, new_user_wizard, hide_navigation, **kwargs):  # noqa: E501
        """Add User  # noqa: E501

        Add a new User  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.user_add(user_name, user_type_id, home_page_id, password, group_id, new_user_wizard, hide_navigation, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_name: The User Name (required)
        :param int user_type_id: The user type ID (required)
        :param int home_page_id: The homepage to use for this User (required)
        :param str password: The users password (required)
        :param int group_id: The inital user group for this User (required)
        :param int new_user_wizard: Flag indicating whether to show the new user guide (required)
        :param int hide_navigation: Flag indicating whether to hide the navigation (required)
        :param str email: The user email address
        :param int library_quota: The users library quota in kilobytes
        :param str first_name: The users first name
        :param str last_name: The users last name
        :param str phone: The users phone number
        :param str ref1: Reference 1
        :param str ref2: Reference 2
        :param str ref3: Reference 3
        :param str ref4: Reference 4
        :param str ref5: Reference 5
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.user_add_with_http_info(user_name, user_type_id, home_page_id, password, group_id, new_user_wizard, hide_navigation, **kwargs)  # noqa: E501
        else:
            (data) = self.user_add_with_http_info(user_name, user_type_id, home_page_id, password, group_id, new_user_wizard, hide_navigation, **kwargs)  # noqa: E501
            return data

    def user_add_with_http_info(self, user_name, user_type_id, home_page_id, password, group_id, new_user_wizard, hide_navigation, **kwargs):  # noqa: E501
        """Add User  # noqa: E501

        Add a new User  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.user_add_with_http_info(user_name, user_type_id, home_page_id, password, group_id, new_user_wizard, hide_navigation, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_name: The User Name (required)
        :param int user_type_id: The user type ID (required)
        :param int home_page_id: The homepage to use for this User (required)
        :param str password: The users password (required)
        :param int group_id: The inital user group for this User (required)
        :param int new_user_wizard: Flag indicating whether to show the new user guide (required)
        :param int hide_navigation: Flag indicating whether to hide the navigation (required)
        :param str email: The user email address
        :param int library_quota: The users library quota in kilobytes
        :param str first_name: The users first name
        :param str last_name: The users last name
        :param str phone: The users phone number
        :param str ref1: Reference 1
        :param str ref2: Reference 2
        :param str ref3: Reference 3
        :param str ref4: Reference 4
        :param str ref5: Reference 5
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_name', 'user_type_id', 'home_page_id', 'password', 'group_id', 'new_user_wizard', 'hide_navigation', 'email', 'library_quota', 'first_name', 'last_name', 'phone', 'ref1', 'ref2', 'ref3', 'ref4', 'ref5']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_name' is set
        if ('user_name' not in params or
                params['user_name'] is None):
            raise ValueError("Missing the required parameter `user_name` when calling `user_add`")  # noqa: E501
        # verify the required parameter 'user_type_id' is set
        if ('user_type_id' not in params or
                params['user_type_id'] is None):
            raise ValueError("Missing the required parameter `user_type_id` when calling `user_add`")  # noqa: E501
        # verify the required parameter 'home_page_id' is set
        if ('home_page_id' not in params or
                params['home_page_id'] is None):
            raise ValueError("Missing the required parameter `home_page_id` when calling `user_add`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `user_add`")  # noqa: E501
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `user_add`")  # noqa: E501
        # verify the required parameter 'new_user_wizard' is set
        if ('new_user_wizard' not in params or
                params['new_user_wizard'] is None):
            raise ValueError("Missing the required parameter `new_user_wizard` when calling `user_add`")  # noqa: E501
        # verify the required parameter 'hide_navigation' is set
        if ('hide_navigation' not in params or
                params['hide_navigation'] is None):
            raise ValueError("Missing the required parameter `hide_navigation` when calling `user_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'user_name' in params:
            form_params.append(('userName', params['user_name']))  # noqa: E501
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501
        if 'user_type_id' in params:
            form_params.append(('userTypeId', params['user_type_id']))  # noqa: E501
        if 'home_page_id' in params:
            form_params.append(('homePageId', params['home_page_id']))  # noqa: E501
        if 'library_quota' in params:
            form_params.append(('libraryQuota', params['library_quota']))  # noqa: E501
        if 'password' in params:
            form_params.append(('password', params['password']))  # noqa: E501
        if 'group_id' in params:
            form_params.append(('groupId', params['group_id']))  # noqa: E501
        if 'first_name' in params:
            form_params.append(('firstName', params['first_name']))  # noqa: E501
        if 'last_name' in params:
            form_params.append(('lastName', params['last_name']))  # noqa: E501
        if 'phone' in params:
            form_params.append(('phone', params['phone']))  # noqa: E501
        if 'ref1' in params:
            form_params.append(('ref1', params['ref1']))  # noqa: E501
        if 'ref2' in params:
            form_params.append(('ref2', params['ref2']))  # noqa: E501
        if 'ref3' in params:
            form_params.append(('ref3', params['ref3']))  # noqa: E501
        if 'ref4' in params:
            form_params.append(('ref4', params['ref4']))  # noqa: E501
        if 'ref5' in params:
            form_params.append(('ref5', params['ref5']))  # noqa: E501
        if 'new_user_wizard' in params:
            form_params.append(('newUserWizard', params['new_user_wizard']))  # noqa: E501
        if 'hide_navigation' in params:
            form_params.append(('hideNavigation', params['hide_navigation']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/user', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='User',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_me(self, **kwargs):  # noqa: E501
        """Get Me  # noqa: E501

        Get my details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.user_me(async=True)
        >>> result = thread.get()

        :param async bool
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.user_me_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_me_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_me_with_http_info(self, **kwargs):  # noqa: E501
        """Get Me  # noqa: E501

        Get my details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.user_me_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_me" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/user/me', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='User',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_permissions_search(self, entity, object_id, **kwargs):  # noqa: E501
        """Permission Data  # noqa: E501

        Permission data for the Entity and Object Provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.user_permissions_search(entity, object_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str entity: The Entity (required)
        :param int object_id: The ID of the Object to return permissions for (required)
        :return: list[Permission]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.user_permissions_search_with_http_info(entity, object_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_permissions_search_with_http_info(entity, object_id, **kwargs)  # noqa: E501
            return data

    def user_permissions_search_with_http_info(self, entity, object_id, **kwargs):  # noqa: E501
        """Permission Data  # noqa: E501

        Permission data for the Entity and Object Provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.user_permissions_search_with_http_info(entity, object_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str entity: The Entity (required)
        :param int object_id: The ID of the Object to return permissions for (required)
        :return: list[Permission]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['entity', 'object_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_permissions_search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'entity' is set
        if ('entity' not in params or
                params['entity'] is None):
            raise ValueError("Missing the required parameter `entity` when calling `user_permissions_search`")  # noqa: E501
        # verify the required parameter 'object_id' is set
        if ('object_id' not in params or
                params['object_id'] is None):
            raise ValueError("Missing the required parameter `object_id` when calling `user_permissions_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'entity' in params:
            path_params['entity'] = params['entity']  # noqa: E501
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/user/permissions/{entity}/{objectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Permission]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_permissions_set(self, entity, object_id, group_ids, **kwargs):  # noqa: E501
        """Permission Set  # noqa: E501

        Set Permissions to users/groups for the provided entity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.user_permissions_set(entity, object_id, group_ids, async=True)
        >>> result = thread.get()

        :param async bool
        :param str entity: The Entity (required)
        :param int object_id: The ID of the Object to set permissions on (required)
        :param list[str] group_ids: Array of permissions with groupId as the key (required)
        :param int owner_id: Change the owner of this item. Leave empty to keep the current owner
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.user_permissions_set_with_http_info(entity, object_id, group_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.user_permissions_set_with_http_info(entity, object_id, group_ids, **kwargs)  # noqa: E501
            return data

    def user_permissions_set_with_http_info(self, entity, object_id, group_ids, **kwargs):  # noqa: E501
        """Permission Set  # noqa: E501

        Set Permissions to users/groups for the provided entity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.user_permissions_set_with_http_info(entity, object_id, group_ids, async=True)
        >>> result = thread.get()

        :param async bool
        :param str entity: The Entity (required)
        :param int object_id: The ID of the Object to set permissions on (required)
        :param list[str] group_ids: Array of permissions with groupId as the key (required)
        :param int owner_id: Change the owner of this item. Leave empty to keep the current owner
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['entity', 'object_id', 'group_ids', 'owner_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_permissions_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'entity' is set
        if ('entity' not in params or
                params['entity'] is None):
            raise ValueError("Missing the required parameter `entity` when calling `user_permissions_set`")  # noqa: E501
        # verify the required parameter 'object_id' is set
        if ('object_id' not in params or
                params['object_id'] is None):
            raise ValueError("Missing the required parameter `object_id` when calling `user_permissions_set`")  # noqa: E501
        # verify the required parameter 'group_ids' is set
        if ('group_ids' not in params or
                params['group_ids'] is None):
            raise ValueError("Missing the required parameter `group_ids` when calling `user_permissions_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'entity' in params:
            path_params['entity'] = params['entity']  # noqa: E501
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'group_ids' in params:
            form_params.append(('groupIds', params['group_ids']))  # noqa: E501
            collection_formats['groupIds'] = 'csv'  # noqa: E501
        if 'owner_id' in params:
            form_params.append(('ownerId', params['owner_id']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/user/permissions/{entity}/{objectId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_pref_edit(self, preference, **kwargs):  # noqa: E501
        """Save User Preferences  # noqa: E501

        Save User preferences for non-state information, such as Layout designer zoom levels  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.user_pref_edit(preference, async=True)
        >>> result = thread.get()

        :param async bool
        :param list[UserOption] preference: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.user_pref_edit_with_http_info(preference, **kwargs)  # noqa: E501
        else:
            (data) = self.user_pref_edit_with_http_info(preference, **kwargs)  # noqa: E501
            return data

    def user_pref_edit_with_http_info(self, preference, **kwargs):  # noqa: E501
        """Save User Preferences  # noqa: E501

        Save User preferences for non-state information, such as Layout designer zoom levels  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.user_pref_edit_with_http_info(preference, async=True)
        >>> result = thread.get()

        :param async bool
        :param list[UserOption] preference: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['preference']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_pref_edit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'preference' is set
        if ('preference' not in params or
                params['preference'] is None):
            raise ValueError("Missing the required parameter `preference` when calling `user_pref_edit`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'preference' in params:
            body_params = params['preference']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/user/pref', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_pref_get(self, **kwargs):  # noqa: E501
        """Retrieve User Preferences  # noqa: E501

        User preferences for non-state information, such as Layout designer zoom levels  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.user_pref_get(async=True)
        >>> result = thread.get()

        :param async bool
        :param str preference: An optional preference
        :return: list[UserOption]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.user_pref_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_pref_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_pref_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve User Preferences  # noqa: E501

        User preferences for non-state information, such as Layout designer zoom levels  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.user_pref_get_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str preference: An optional preference
        :return: list[UserOption]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['preference']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_pref_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'preference' in params:
            form_params.append(('preference', params['preference']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/user/pref', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[UserOption]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_search(self, **kwargs):  # noqa: E501
        """User Search  # noqa: E501

        Search users  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.user_search(async=True)
        >>> result = thread.get()

        :param async bool
        :param int user_id: Filter by User Id
        :param str user_name: Filter by User Name
        :param int user_type_id: Filter by UserType Id
        :param int retired: Filter by Retired
        :return: list[User]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.user_search_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_search_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_search_with_http_info(self, **kwargs):  # noqa: E501
        """User Search  # noqa: E501

        Search users  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.user_search_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int user_id: Filter by User Id
        :param str user_name: Filter by User Name
        :param int user_type_id: Filter by UserType Id
        :param int retired: Filter by Retired
        :return: list[User]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'user_name', 'user_type_id', 'retired']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_search" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'user_id' in params:
            form_params.append(('userId', params['user_id']))  # noqa: E501
        if 'user_name' in params:
            form_params.append(('userName', params['user_name']))  # noqa: E501
        if 'user_type_id' in params:
            form_params.append(('userTypeId', params['user_type_id']))  # noqa: E501
        if 'retired' in params:
            form_params.append(('retired', params['retired']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/user', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[User]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
