# coding: utf-8

"""
    Xibo API

    Xibo CMS API  # noqa: E501

    OpenAPI spec version: 1.8.0
    Contact: info@xibo.org.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class NotificationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def notification_add(self, subject, is_email, is_interrupt, display_group_ids, user_group_ids, **kwargs):  # noqa: E501
        """Notification Add  # noqa: E501

        Add a Notification  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.notification_add(subject, is_email, is_interrupt, display_group_ids, user_group_ids, async=True)
        >>> result = thread.get()

        :param async bool
        :param str subject: The Subject (required)
        :param int is_email: Flag indicating whether this notification should be emailed. (required)
        :param int is_interrupt: Flag indication whether this notification should interrupt the web portal nativation/login (required)
        :param list[int] display_group_ids: The display group ids to assign this notification to (required)
        :param list[int] user_group_ids: The user group ids to assign to this notification (required)
        :param str body: The Body
        :param str release_dt: ISO date representing the release date for this notification
        :return: Notification
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.notification_add_with_http_info(subject, is_email, is_interrupt, display_group_ids, user_group_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.notification_add_with_http_info(subject, is_email, is_interrupt, display_group_ids, user_group_ids, **kwargs)  # noqa: E501
            return data

    def notification_add_with_http_info(self, subject, is_email, is_interrupt, display_group_ids, user_group_ids, **kwargs):  # noqa: E501
        """Notification Add  # noqa: E501

        Add a Notification  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.notification_add_with_http_info(subject, is_email, is_interrupt, display_group_ids, user_group_ids, async=True)
        >>> result = thread.get()

        :param async bool
        :param str subject: The Subject (required)
        :param int is_email: Flag indicating whether this notification should be emailed. (required)
        :param int is_interrupt: Flag indication whether this notification should interrupt the web portal nativation/login (required)
        :param list[int] display_group_ids: The display group ids to assign this notification to (required)
        :param list[int] user_group_ids: The user group ids to assign to this notification (required)
        :param str body: The Body
        :param str release_dt: ISO date representing the release date for this notification
        :return: Notification
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subject', 'is_email', 'is_interrupt', 'display_group_ids', 'user_group_ids', 'body', 'release_dt']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notification_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subject' is set
        if ('subject' not in params or
                params['subject'] is None):
            raise ValueError("Missing the required parameter `subject` when calling `notification_add`")  # noqa: E501
        # verify the required parameter 'is_email' is set
        if ('is_email' not in params or
                params['is_email'] is None):
            raise ValueError("Missing the required parameter `is_email` when calling `notification_add`")  # noqa: E501
        # verify the required parameter 'is_interrupt' is set
        if ('is_interrupt' not in params or
                params['is_interrupt'] is None):
            raise ValueError("Missing the required parameter `is_interrupt` when calling `notification_add`")  # noqa: E501
        # verify the required parameter 'display_group_ids' is set
        if ('display_group_ids' not in params or
                params['display_group_ids'] is None):
            raise ValueError("Missing the required parameter `display_group_ids` when calling `notification_add`")  # noqa: E501
        # verify the required parameter 'user_group_ids' is set
        if ('user_group_ids' not in params or
                params['user_group_ids'] is None):
            raise ValueError("Missing the required parameter `user_group_ids` when calling `notification_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'subject' in params:
            form_params.append(('subject', params['subject']))  # noqa: E501
        if 'body' in params:
            form_params.append(('body', params['body']))  # noqa: E501
        if 'release_dt' in params:
            form_params.append(('releaseDt', params['release_dt']))  # noqa: E501
        if 'is_email' in params:
            form_params.append(('isEmail', params['is_email']))  # noqa: E501
        if 'is_interrupt' in params:
            form_params.append(('isInterrupt', params['is_interrupt']))  # noqa: E501
        if 'display_group_ids' in params:
            form_params.append(('displayGroupIds', params['display_group_ids']))  # noqa: E501
            collection_formats['displayGroupIds'] = 'csv'  # noqa: E501
        if 'user_group_ids' in params:
            form_params.append(('userGroupIds', params['user_group_ids']))  # noqa: E501
            collection_formats['userGroupIds'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/notification', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Notification',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notification_delete(self, notification_id, **kwargs):  # noqa: E501
        """Delete Notification  # noqa: E501

        Delete the provided notification  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.notification_delete(notification_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int notification_id: The Notification Id to Delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.notification_delete_with_http_info(notification_id, **kwargs)  # noqa: E501
        else:
            (data) = self.notification_delete_with_http_info(notification_id, **kwargs)  # noqa: E501
            return data

    def notification_delete_with_http_info(self, notification_id, **kwargs):  # noqa: E501
        """Delete Notification  # noqa: E501

        Delete the provided notification  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.notification_delete_with_http_info(notification_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int notification_id: The Notification Id to Delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['notification_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notification_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'notification_id' is set
        if ('notification_id' not in params or
                params['notification_id'] is None):
            raise ValueError("Missing the required parameter `notification_id` when calling `notification_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'notification_id' in params:
            path_params['notificationId'] = params['notification_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/notification/{notificationId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notification_edit(self, notification_id, subject, release_dt, is_email, is_interrupt, display_group_ids, user_group_ids, **kwargs):  # noqa: E501
        """Notification Edit  # noqa: E501

        Edit a Notification  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.notification_edit(notification_id, subject, release_dt, is_email, is_interrupt, display_group_ids, user_group_ids, async=True)
        >>> result = thread.get()

        :param async bool
        :param int notification_id: The NotificationId (required)
        :param str subject: The Subject (required)
        :param str release_dt: ISO date representing the release date for this notification (required)
        :param int is_email: Flag indicating whether this notification should be emailed. (required)
        :param int is_interrupt: Flag indication whether this notification should interrupt the web portal nativation/login (required)
        :param list[int] display_group_ids: The display group ids to assign this notification to (required)
        :param list[int] user_group_ids: The user group ids to assign to this notification (required)
        :param str body: The Body
        :return: Notification
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.notification_edit_with_http_info(notification_id, subject, release_dt, is_email, is_interrupt, display_group_ids, user_group_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.notification_edit_with_http_info(notification_id, subject, release_dt, is_email, is_interrupt, display_group_ids, user_group_ids, **kwargs)  # noqa: E501
            return data

    def notification_edit_with_http_info(self, notification_id, subject, release_dt, is_email, is_interrupt, display_group_ids, user_group_ids, **kwargs):  # noqa: E501
        """Notification Edit  # noqa: E501

        Edit a Notification  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.notification_edit_with_http_info(notification_id, subject, release_dt, is_email, is_interrupt, display_group_ids, user_group_ids, async=True)
        >>> result = thread.get()

        :param async bool
        :param int notification_id: The NotificationId (required)
        :param str subject: The Subject (required)
        :param str release_dt: ISO date representing the release date for this notification (required)
        :param int is_email: Flag indicating whether this notification should be emailed. (required)
        :param int is_interrupt: Flag indication whether this notification should interrupt the web portal nativation/login (required)
        :param list[int] display_group_ids: The display group ids to assign this notification to (required)
        :param list[int] user_group_ids: The user group ids to assign to this notification (required)
        :param str body: The Body
        :return: Notification
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['notification_id', 'subject', 'release_dt', 'is_email', 'is_interrupt', 'display_group_ids', 'user_group_ids', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notification_edit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'notification_id' is set
        if ('notification_id' not in params or
                params['notification_id'] is None):
            raise ValueError("Missing the required parameter `notification_id` when calling `notification_edit`")  # noqa: E501
        # verify the required parameter 'subject' is set
        if ('subject' not in params or
                params['subject'] is None):
            raise ValueError("Missing the required parameter `subject` when calling `notification_edit`")  # noqa: E501
        # verify the required parameter 'release_dt' is set
        if ('release_dt' not in params or
                params['release_dt'] is None):
            raise ValueError("Missing the required parameter `release_dt` when calling `notification_edit`")  # noqa: E501
        # verify the required parameter 'is_email' is set
        if ('is_email' not in params or
                params['is_email'] is None):
            raise ValueError("Missing the required parameter `is_email` when calling `notification_edit`")  # noqa: E501
        # verify the required parameter 'is_interrupt' is set
        if ('is_interrupt' not in params or
                params['is_interrupt'] is None):
            raise ValueError("Missing the required parameter `is_interrupt` when calling `notification_edit`")  # noqa: E501
        # verify the required parameter 'display_group_ids' is set
        if ('display_group_ids' not in params or
                params['display_group_ids'] is None):
            raise ValueError("Missing the required parameter `display_group_ids` when calling `notification_edit`")  # noqa: E501
        # verify the required parameter 'user_group_ids' is set
        if ('user_group_ids' not in params or
                params['user_group_ids'] is None):
            raise ValueError("Missing the required parameter `user_group_ids` when calling `notification_edit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'notification_id' in params:
            path_params['notificationId'] = params['notification_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'subject' in params:
            form_params.append(('subject', params['subject']))  # noqa: E501
        if 'body' in params:
            form_params.append(('body', params['body']))  # noqa: E501
        if 'release_dt' in params:
            form_params.append(('releaseDt', params['release_dt']))  # noqa: E501
        if 'is_email' in params:
            form_params.append(('isEmail', params['is_email']))  # noqa: E501
        if 'is_interrupt' in params:
            form_params.append(('isInterrupt', params['is_interrupt']))  # noqa: E501
        if 'display_group_ids' in params:
            form_params.append(('displayGroupIds', params['display_group_ids']))  # noqa: E501
            collection_formats['displayGroupIds'] = 'csv'  # noqa: E501
        if 'user_group_ids' in params:
            form_params.append(('userGroupIds', params['user_group_ids']))  # noqa: E501
            collection_formats['userGroupIds'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/notification/{notificationId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Notification',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notification_search(self, **kwargs):  # noqa: E501
        """Notification Search  # noqa: E501

        Search this users Notifications  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.notification_search(async=True)
        >>> result = thread.get()

        :param async bool
        :param int notification_id: Filter by Notification Id
        :param str subject: Filter by Subject
        :return: list[Notification]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.notification_search_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.notification_search_with_http_info(**kwargs)  # noqa: E501
            return data

    def notification_search_with_http_info(self, **kwargs):  # noqa: E501
        """Notification Search  # noqa: E501

        Search this users Notifications  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.notification_search_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int notification_id: Filter by Notification Id
        :param str subject: Filter by Subject
        :return: list[Notification]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['notification_id', 'subject']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notification_search" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'notification_id' in params:
            form_params.append(('notificationId', params['notification_id']))  # noqa: E501
        if 'subject' in params:
            form_params.append(('subject', params['subject']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/notification', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Notification]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
