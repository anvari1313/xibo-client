# coding: utf-8

"""
    Xibo API

    Xibo CMS API  # noqa: E501

    OpenAPI spec version: 1.8.0
    Contact: info@xibo.org.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DisplayApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def display_default_layout(self, display_id, layout_id, **kwargs):  # noqa: E501
        """Set Default Layout  # noqa: E501

        Set the default Layout on this Display  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_default_layout(display_id, layout_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_id: The Display ID (required)
        :param int layout_id: The Layout ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.display_default_layout_with_http_info(display_id, layout_id, **kwargs)  # noqa: E501
        else:
            (data) = self.display_default_layout_with_http_info(display_id, layout_id, **kwargs)  # noqa: E501
            return data

    def display_default_layout_with_http_info(self, display_id, layout_id, **kwargs):  # noqa: E501
        """Set Default Layout  # noqa: E501

        Set the default Layout on this Display  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_default_layout_with_http_info(display_id, layout_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_id: The Display ID (required)
        :param int layout_id: The Layout ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['display_id', 'layout_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method display_default_layout" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'display_id' is set
        if ('display_id' not in params or
                params['display_id'] is None):
            raise ValueError("Missing the required parameter `display_id` when calling `display_default_layout`")  # noqa: E501
        # verify the required parameter 'layout_id' is set
        if ('layout_id' not in params or
                params['layout_id'] is None):
            raise ValueError("Missing the required parameter `layout_id` when calling `display_default_layout`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'display_id' in params:
            path_params['displayId'] = params['display_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'layout_id' in params:
            form_params.append(('layoutId', params['layout_id']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/display/defaultlayout/{displayId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def display_delete(self, display_id, **kwargs):  # noqa: E501
        """Display Delete  # noqa: E501

        Delete a Display  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_delete(display_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_id: The Display ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.display_delete_with_http_info(display_id, **kwargs)  # noqa: E501
        else:
            (data) = self.display_delete_with_http_info(display_id, **kwargs)  # noqa: E501
            return data

    def display_delete_with_http_info(self, display_id, **kwargs):  # noqa: E501
        """Display Delete  # noqa: E501

        Delete a Display  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_delete_with_http_info(display_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_id: The Display ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['display_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method display_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'display_id' is set
        if ('display_id' not in params or
                params['display_id'] is None):
            raise ValueError("Missing the required parameter `display_id` when calling `display_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'display_id' in params:
            path_params['displayId'] = params['display_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/display/{displayId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def display_edit(self, display_id, display, default_layout_id, licensed, license, inc_schedule, email_alert, wake_on_lan_enabled, **kwargs):  # noqa: E501
        """Display Edit  # noqa: E501

        Edit a Display  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_edit(display_id, display, default_layout_id, licensed, license, inc_schedule, email_alert, wake_on_lan_enabled, async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_id: The Display ID (required)
        :param str display: The Display Name (required)
        :param int default_layout_id: A Layout ID representing the Default Layout for this Display. (required)
        :param int licensed: Flag indicating whether this display is licensed. (required)
        :param str license: The hardwareKey to use as the licence key for this Display (required)
        :param int inc_schedule: Flag indicating whether the Default Layout should be included in the Schedule (required)
        :param int email_alert: Flag indicating whether the Display generates up/down email alerts. (required)
        :param int wake_on_lan_enabled: Flag indicating if Wake On LAN is enabled for this Display (required)
        :param str description: A description of the Display
        :param str tags: A comma separated list of tags for this item
        :param datetime auditing_until: A date this Display records auditing information until.
        :param int alert_timeout: How long in seconds should this display wait before alerting when it hasn't connected. Override for the collection interval.
        :param str wake_on_lan_time: A h:i string representing the time that the Display should receive its Wake on LAN command
        :param str broad_cast_address: The BroadCast Address for this Display - used by Wake On LAN
        :param str secure_on: The secure on configuration for this Display
        :param int cidr: The CIDR configuration for this Display
        :param float latitude: The Latitude of this Display
        :param float longitude: The Longitude of this Display
        :param str time_zone: The timezone for this display, or empty to use the CMS timezone
        :param int display_profile_id: The Display Settings Profile ID
        :param int clear_cached_data: Clear all Cached data for this display
        :param int rekey_xmr: Clear the cached XMR configuration and send a rekey
        :return: Display
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.display_edit_with_http_info(display_id, display, default_layout_id, licensed, license, inc_schedule, email_alert, wake_on_lan_enabled, **kwargs)  # noqa: E501
        else:
            (data) = self.display_edit_with_http_info(display_id, display, default_layout_id, licensed, license, inc_schedule, email_alert, wake_on_lan_enabled, **kwargs)  # noqa: E501
            return data

    def display_edit_with_http_info(self, display_id, display, default_layout_id, licensed, license, inc_schedule, email_alert, wake_on_lan_enabled, **kwargs):  # noqa: E501
        """Display Edit  # noqa: E501

        Edit a Display  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_edit_with_http_info(display_id, display, default_layout_id, licensed, license, inc_schedule, email_alert, wake_on_lan_enabled, async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_id: The Display ID (required)
        :param str display: The Display Name (required)
        :param int default_layout_id: A Layout ID representing the Default Layout for this Display. (required)
        :param int licensed: Flag indicating whether this display is licensed. (required)
        :param str license: The hardwareKey to use as the licence key for this Display (required)
        :param int inc_schedule: Flag indicating whether the Default Layout should be included in the Schedule (required)
        :param int email_alert: Flag indicating whether the Display generates up/down email alerts. (required)
        :param int wake_on_lan_enabled: Flag indicating if Wake On LAN is enabled for this Display (required)
        :param str description: A description of the Display
        :param str tags: A comma separated list of tags for this item
        :param datetime auditing_until: A date this Display records auditing information until.
        :param int alert_timeout: How long in seconds should this display wait before alerting when it hasn't connected. Override for the collection interval.
        :param str wake_on_lan_time: A h:i string representing the time that the Display should receive its Wake on LAN command
        :param str broad_cast_address: The BroadCast Address for this Display - used by Wake On LAN
        :param str secure_on: The secure on configuration for this Display
        :param int cidr: The CIDR configuration for this Display
        :param float latitude: The Latitude of this Display
        :param float longitude: The Longitude of this Display
        :param str time_zone: The timezone for this display, or empty to use the CMS timezone
        :param int display_profile_id: The Display Settings Profile ID
        :param int clear_cached_data: Clear all Cached data for this display
        :param int rekey_xmr: Clear the cached XMR configuration and send a rekey
        :return: Display
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['display_id', 'display', 'default_layout_id', 'licensed', 'license', 'inc_schedule', 'email_alert', 'wake_on_lan_enabled', 'description', 'tags', 'auditing_until', 'alert_timeout', 'wake_on_lan_time', 'broad_cast_address', 'secure_on', 'cidr', 'latitude', 'longitude', 'time_zone', 'display_profile_id', 'clear_cached_data', 'rekey_xmr']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method display_edit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'display_id' is set
        if ('display_id' not in params or
                params['display_id'] is None):
            raise ValueError("Missing the required parameter `display_id` when calling `display_edit`")  # noqa: E501
        # verify the required parameter 'display' is set
        if ('display' not in params or
                params['display'] is None):
            raise ValueError("Missing the required parameter `display` when calling `display_edit`")  # noqa: E501
        # verify the required parameter 'default_layout_id' is set
        if ('default_layout_id' not in params or
                params['default_layout_id'] is None):
            raise ValueError("Missing the required parameter `default_layout_id` when calling `display_edit`")  # noqa: E501
        # verify the required parameter 'licensed' is set
        if ('licensed' not in params or
                params['licensed'] is None):
            raise ValueError("Missing the required parameter `licensed` when calling `display_edit`")  # noqa: E501
        # verify the required parameter 'license' is set
        if ('license' not in params or
                params['license'] is None):
            raise ValueError("Missing the required parameter `license` when calling `display_edit`")  # noqa: E501
        # verify the required parameter 'inc_schedule' is set
        if ('inc_schedule' not in params or
                params['inc_schedule'] is None):
            raise ValueError("Missing the required parameter `inc_schedule` when calling `display_edit`")  # noqa: E501
        # verify the required parameter 'email_alert' is set
        if ('email_alert' not in params or
                params['email_alert'] is None):
            raise ValueError("Missing the required parameter `email_alert` when calling `display_edit`")  # noqa: E501
        # verify the required parameter 'wake_on_lan_enabled' is set
        if ('wake_on_lan_enabled' not in params or
                params['wake_on_lan_enabled'] is None):
            raise ValueError("Missing the required parameter `wake_on_lan_enabled` when calling `display_edit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'display_id' in params:
            path_params['displayId'] = params['display_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'display' in params:
            form_params.append(('display', params['display']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'tags' in params:
            form_params.append(('tags', params['tags']))  # noqa: E501
        if 'auditing_until' in params:
            form_params.append(('auditingUntil', params['auditing_until']))  # noqa: E501
        if 'default_layout_id' in params:
            form_params.append(('defaultLayoutId', params['default_layout_id']))  # noqa: E501
        if 'licensed' in params:
            form_params.append(('licensed', params['licensed']))  # noqa: E501
        if 'license' in params:
            form_params.append(('license', params['license']))  # noqa: E501
        if 'inc_schedule' in params:
            form_params.append(('incSchedule', params['inc_schedule']))  # noqa: E501
        if 'email_alert' in params:
            form_params.append(('emailAlert', params['email_alert']))  # noqa: E501
        if 'alert_timeout' in params:
            form_params.append(('alertTimeout', params['alert_timeout']))  # noqa: E501
        if 'wake_on_lan_enabled' in params:
            form_params.append(('wakeOnLanEnabled', params['wake_on_lan_enabled']))  # noqa: E501
        if 'wake_on_lan_time' in params:
            form_params.append(('wakeOnLanTime', params['wake_on_lan_time']))  # noqa: E501
        if 'broad_cast_address' in params:
            form_params.append(('broadCastAddress', params['broad_cast_address']))  # noqa: E501
        if 'secure_on' in params:
            form_params.append(('secureOn', params['secure_on']))  # noqa: E501
        if 'cidr' in params:
            form_params.append(('cidr', params['cidr']))  # noqa: E501
        if 'latitude' in params:
            form_params.append(('latitude', params['latitude']))  # noqa: E501
        if 'longitude' in params:
            form_params.append(('longitude', params['longitude']))  # noqa: E501
        if 'time_zone' in params:
            form_params.append(('timeZone', params['time_zone']))  # noqa: E501
        if 'display_profile_id' in params:
            form_params.append(('displayProfileId', params['display_profile_id']))  # noqa: E501
        if 'clear_cached_data' in params:
            form_params.append(('clearCachedData', params['clear_cached_data']))  # noqa: E501
        if 'rekey_xmr' in params:
            form_params.append(('rekeyXmr', params['rekey_xmr']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/display/{displayId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Display',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def display_request_screenshot(self, display_id, **kwargs):  # noqa: E501
        """Request Screen Shot  # noqa: E501

        Notify the display that the CMS would like a screen shot to be sent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_request_screenshot(display_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_id: The Display ID (required)
        :return: Display
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.display_request_screenshot_with_http_info(display_id, **kwargs)  # noqa: E501
        else:
            (data) = self.display_request_screenshot_with_http_info(display_id, **kwargs)  # noqa: E501
            return data

    def display_request_screenshot_with_http_info(self, display_id, **kwargs):  # noqa: E501
        """Request Screen Shot  # noqa: E501

        Notify the display that the CMS would like a screen shot to be sent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_request_screenshot_with_http_info(display_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_id: The Display ID (required)
        :return: Display
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['display_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method display_request_screenshot" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'display_id' is set
        if ('display_id' not in params or
                params['display_id'] is None):
            raise ValueError("Missing the required parameter `display_id` when calling `display_request_screenshot`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'display_id' in params:
            path_params['displayId'] = params['display_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/display/requestscreenshot/{displayId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Display',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def display_search(self, **kwargs):  # noqa: E501
        """Display Search  # noqa: E501

        Search Displays for this User  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_search(async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_id: Filter by Display Id
        :param int display_group_id: Filter by DisplayGroup Id
        :param str display: Filter by Display Name
        :param str mac_address: Filter by Mac Address
        :param str hardware_key: Filter by Hardware Key
        :param str client_version: Filter by Client Version
        :param str embed: Embed related data, namely displaygroups. A comma separated list of child objects to embed.
        :param int authorised: Filter by authorised flag
        :param int display_profile_id: Filter by Display Profile
        :return: list[Display]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.display_search_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.display_search_with_http_info(**kwargs)  # noqa: E501
            return data

    def display_search_with_http_info(self, **kwargs):  # noqa: E501
        """Display Search  # noqa: E501

        Search Displays for this User  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_search_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_id: Filter by Display Id
        :param int display_group_id: Filter by DisplayGroup Id
        :param str display: Filter by Display Name
        :param str mac_address: Filter by Mac Address
        :param str hardware_key: Filter by Hardware Key
        :param str client_version: Filter by Client Version
        :param str embed: Embed related data, namely displaygroups. A comma separated list of child objects to embed.
        :param int authorised: Filter by authorised flag
        :param int display_profile_id: Filter by Display Profile
        :return: list[Display]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['display_id', 'display_group_id', 'display', 'mac_address', 'hardware_key', 'client_version', 'embed', 'authorised', 'display_profile_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method display_search" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'display_id' in params:
            form_params.append(('displayId', params['display_id']))  # noqa: E501
        if 'display_group_id' in params:
            form_params.append(('displayGroupId', params['display_group_id']))  # noqa: E501
        if 'display' in params:
            form_params.append(('display', params['display']))  # noqa: E501
        if 'mac_address' in params:
            form_params.append(('macAddress', params['mac_address']))  # noqa: E501
        if 'hardware_key' in params:
            form_params.append(('hardwareKey', params['hardware_key']))  # noqa: E501
        if 'client_version' in params:
            form_params.append(('clientVersion', params['client_version']))  # noqa: E501
        if 'embed' in params:
            form_params.append(('embed', params['embed']))  # noqa: E501
        if 'authorised' in params:
            form_params.append(('authorised', params['authorised']))  # noqa: E501
        if 'display_profile_id' in params:
            form_params.append(('displayProfileId', params['display_profile_id']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/display', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Display]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def display_toggle_authorise(self, display_id, **kwargs):  # noqa: E501
        """Toggle authorised  # noqa: E501

        Toggle authorised for the Display.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_toggle_authorise(display_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_id: The Display ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.display_toggle_authorise_with_http_info(display_id, **kwargs)  # noqa: E501
        else:
            (data) = self.display_toggle_authorise_with_http_info(display_id, **kwargs)  # noqa: E501
            return data

    def display_toggle_authorise_with_http_info(self, display_id, **kwargs):  # noqa: E501
        """Toggle authorised  # noqa: E501

        Toggle authorised for the Display.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_toggle_authorise_with_http_info(display_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_id: The Display ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['display_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method display_toggle_authorise" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'display_id' is set
        if ('display_id' not in params or
                params['display_id'] is None):
            raise ValueError("Missing the required parameter `display_id` when calling `display_toggle_authorise`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'display_id' in params:
            path_params['displayId'] = params['display_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/display/authorise/{displayId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def display_wake_on_lan(self, display_id, **kwargs):  # noqa: E501
        """Issue WOL  # noqa: E501

        Send a Wake On LAN packet to this Display  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_wake_on_lan(display_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_id: The Display ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.display_wake_on_lan_with_http_info(display_id, **kwargs)  # noqa: E501
        else:
            (data) = self.display_wake_on_lan_with_http_info(display_id, **kwargs)  # noqa: E501
            return data

    def display_wake_on_lan_with_http_info(self, display_id, **kwargs):  # noqa: E501
        """Issue WOL  # noqa: E501

        Send a Wake On LAN packet to this Display  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_wake_on_lan_with_http_info(display_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_id: The Display ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['display_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method display_wake_on_lan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'display_id' is set
        if ('display_id' not in params or
                params['display_id'] is None):
            raise ValueError("Missing the required parameter `display_id` when calling `display_wake_on_lan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'display_id' in params:
            path_params['displayId'] = params['display_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/display/wol/{displayId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
