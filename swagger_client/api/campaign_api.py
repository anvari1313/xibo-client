# coding: utf-8

"""
    Xibo API

    Xibo CMS API  # noqa: E501

    OpenAPI spec version: 1.8.0
    Contact: info@xibo.org.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CampaignApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def campaign_add(self, name, **kwargs):  # noqa: E501
        """Add Campaign  # noqa: E501

        Add a Campaign  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.campaign_add(name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: Name for this Campaign (required)
        :return: Campaign
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.campaign_add_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.campaign_add_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def campaign_add_with_http_info(self, name, **kwargs):  # noqa: E501
        """Add Campaign  # noqa: E501

        Add a Campaign  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.campaign_add_with_http_info(name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: Name for this Campaign (required)
        :return: Campaign
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method campaign_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `campaign_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/campaign', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Campaign',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def campaign_assign_layout(self, campaign_id, layout_id, **kwargs):  # noqa: E501
        """Assign Layouts  # noqa: E501

        Assign Layouts to a Campaign  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.campaign_assign_layout(campaign_id, layout_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int campaign_id: The Campaign ID (required)
        :param list[LayoutAssignmentArray] layout_id: Array of Layout ID/Display Orders to Assign (required)
        :param list[LayoutAssignmentArray] unassign_layout_id: Array of Layout ID/Display Orders to unassign
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.campaign_assign_layout_with_http_info(campaign_id, layout_id, **kwargs)  # noqa: E501
        else:
            (data) = self.campaign_assign_layout_with_http_info(campaign_id, layout_id, **kwargs)  # noqa: E501
            return data

    def campaign_assign_layout_with_http_info(self, campaign_id, layout_id, **kwargs):  # noqa: E501
        """Assign Layouts  # noqa: E501

        Assign Layouts to a Campaign  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.campaign_assign_layout_with_http_info(campaign_id, layout_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int campaign_id: The Campaign ID (required)
        :param list[LayoutAssignmentArray] layout_id: Array of Layout ID/Display Orders to Assign (required)
        :param list[LayoutAssignmentArray] unassign_layout_id: Array of Layout ID/Display Orders to unassign
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['campaign_id', 'layout_id', 'unassign_layout_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method campaign_assign_layout" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'campaign_id' is set
        if ('campaign_id' not in params or
                params['campaign_id'] is None):
            raise ValueError("Missing the required parameter `campaign_id` when calling `campaign_assign_layout`")  # noqa: E501
        # verify the required parameter 'layout_id' is set
        if ('layout_id' not in params or
                params['layout_id'] is None):
            raise ValueError("Missing the required parameter `layout_id` when calling `campaign_assign_layout`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'campaign_id' in params:
            path_params['campaignId'] = params['campaign_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'layout_id' in params:
            form_params.append(('layoutId', params['layout_id']))  # noqa: E501
            collection_formats['layoutId'] = 'csv'  # noqa: E501
        if 'unassign_layout_id' in params:
            form_params.append(('unassignLayoutId', params['unassign_layout_id']))  # noqa: E501
            collection_formats['unassignLayoutId'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/campaign/layout/assign/{campaignId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def campaign_delete(self, campaign_id, **kwargs):  # noqa: E501
        """Delete Campaign  # noqa: E501

        Delete an existing Campaign  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.campaign_delete(campaign_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int campaign_id: The Campaign ID to Delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.campaign_delete_with_http_info(campaign_id, **kwargs)  # noqa: E501
        else:
            (data) = self.campaign_delete_with_http_info(campaign_id, **kwargs)  # noqa: E501
            return data

    def campaign_delete_with_http_info(self, campaign_id, **kwargs):  # noqa: E501
        """Delete Campaign  # noqa: E501

        Delete an existing Campaign  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.campaign_delete_with_http_info(campaign_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int campaign_id: The Campaign ID to Delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['campaign_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method campaign_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'campaign_id' is set
        if ('campaign_id' not in params or
                params['campaign_id'] is None):
            raise ValueError("Missing the required parameter `campaign_id` when calling `campaign_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'campaign_id' in params:
            path_params['campaignId'] = params['campaign_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/campaign/{campaignId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def campaign_edit(self, campaign_id, name, **kwargs):  # noqa: E501
        """Edit Campaign  # noqa: E501

        Edit an existing Campaign  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.campaign_edit(campaign_id, name, async=True)
        >>> result = thread.get()

        :param async bool
        :param int campaign_id: The Campaign ID to Edit (required)
        :param str name: Name for this Campaign (required)
        :return: Campaign
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.campaign_edit_with_http_info(campaign_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.campaign_edit_with_http_info(campaign_id, name, **kwargs)  # noqa: E501
            return data

    def campaign_edit_with_http_info(self, campaign_id, name, **kwargs):  # noqa: E501
        """Edit Campaign  # noqa: E501

        Edit an existing Campaign  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.campaign_edit_with_http_info(campaign_id, name, async=True)
        >>> result = thread.get()

        :param async bool
        :param int campaign_id: The Campaign ID to Edit (required)
        :param str name: Name for this Campaign (required)
        :return: Campaign
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['campaign_id', 'name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method campaign_edit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'campaign_id' is set
        if ('campaign_id' not in params or
                params['campaign_id'] is None):
            raise ValueError("Missing the required parameter `campaign_id` when calling `campaign_edit`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `campaign_edit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'campaign_id' in params:
            path_params['campaignId'] = params['campaign_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/campaign/{campaignId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Campaign',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def campaign_search(self, **kwargs):  # noqa: E501
        """Search Campaigns  # noqa: E501

        Search all Campaigns this user has access to  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.campaign_search(async=True)
        >>> result = thread.get()

        :param async bool
        :param int campaign_id: Filter by Campaign Id
        :param str name: Filter by Name
        :param str tags: Filter by Tags
        :param int has_layouts: Filter by has layouts
        :param int is_layout_specific: Filter by whether this Campaign is specific to a Layout or User added
        :param int retired: Filter by retired
        :param int total_duration: Should we total the duration?
        :return: list[Campaign]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.campaign_search_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.campaign_search_with_http_info(**kwargs)  # noqa: E501
            return data

    def campaign_search_with_http_info(self, **kwargs):  # noqa: E501
        """Search Campaigns  # noqa: E501

        Search all Campaigns this user has access to  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.campaign_search_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int campaign_id: Filter by Campaign Id
        :param str name: Filter by Name
        :param str tags: Filter by Tags
        :param int has_layouts: Filter by has layouts
        :param int is_layout_specific: Filter by whether this Campaign is specific to a Layout or User added
        :param int retired: Filter by retired
        :param int total_duration: Should we total the duration?
        :return: list[Campaign]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['campaign_id', 'name', 'tags', 'has_layouts', 'is_layout_specific', 'retired', 'total_duration']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method campaign_search" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'campaign_id' in params:
            form_params.append(('campaignId', params['campaign_id']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'tags' in params:
            form_params.append(('tags', params['tags']))  # noqa: E501
        if 'has_layouts' in params:
            form_params.append(('hasLayouts', params['has_layouts']))  # noqa: E501
        if 'is_layout_specific' in params:
            form_params.append(('isLayoutSpecific', params['is_layout_specific']))  # noqa: E501
        if 'retired' in params:
            form_params.append(('retired', params['retired']))  # noqa: E501
        if 'total_duration' in params:
            form_params.append(('totalDuration', params['total_duration']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/campaign', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Campaign]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
