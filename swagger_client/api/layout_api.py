# coding: utf-8

"""
    Xibo API

    Xibo CMS API  # noqa: E501

    OpenAPI spec version: 1.8.0
    Contact: info@xibo.org.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class LayoutApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def layout_add(self, name, **kwargs):  # noqa: E501
        """Add a Layout  # noqa: E501

        Add a new Layout to the CMS  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.layout_add(name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: The layout name (required)
        :param str description: The layout description
        :param int layout_id: If the Layout should be created with a Template, provide the ID, otherwise don't provide
        :param int resolution_id: If a Template is not provided, provide the resolutionId for this Layout.
        :return: Layout
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.layout_add_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.layout_add_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def layout_add_with_http_info(self, name, **kwargs):  # noqa: E501
        """Add a Layout  # noqa: E501

        Add a new Layout to the CMS  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.layout_add_with_http_info(name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: The layout name (required)
        :param str description: The layout description
        :param int layout_id: If the Layout should be created with a Template, provide the ID, otherwise don't provide
        :param int resolution_id: If a Template is not provided, provide the resolutionId for this Layout.
        :return: Layout
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'description', 'layout_id', 'resolution_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method layout_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `layout_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'layout_id' in params:
            form_params.append(('layoutId', params['layout_id']))  # noqa: E501
        if 'resolution_id' in params:
            form_params.append(('resolutionId', params['resolution_id']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/layout', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Layout',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def layout_copy(self, layout_id, name, copy_media_files, **kwargs):  # noqa: E501
        """Copy Layout  # noqa: E501

        Copy a Layout, providing a new name if applicable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.layout_copy(layout_id, name, copy_media_files, async=True)
        >>> result = thread.get()

        :param async bool
        :param int layout_id: The Layout ID to Copy (required)
        :param str name: The name for the new Layout (required)
        :param int copy_media_files: Flag indicating whether to make new Copies of all Media Files assigned to the Layout being Copied (required)
        :param str description: The Description for the new Layout
        :return: Layout
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.layout_copy_with_http_info(layout_id, name, copy_media_files, **kwargs)  # noqa: E501
        else:
            (data) = self.layout_copy_with_http_info(layout_id, name, copy_media_files, **kwargs)  # noqa: E501
            return data

    def layout_copy_with_http_info(self, layout_id, name, copy_media_files, **kwargs):  # noqa: E501
        """Copy Layout  # noqa: E501

        Copy a Layout, providing a new name if applicable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.layout_copy_with_http_info(layout_id, name, copy_media_files, async=True)
        >>> result = thread.get()

        :param async bool
        :param int layout_id: The Layout ID to Copy (required)
        :param str name: The name for the new Layout (required)
        :param int copy_media_files: Flag indicating whether to make new Copies of all Media Files assigned to the Layout being Copied (required)
        :param str description: The Description for the new Layout
        :return: Layout
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['layout_id', 'name', 'copy_media_files', 'description']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method layout_copy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'layout_id' is set
        if ('layout_id' not in params or
                params['layout_id'] is None):
            raise ValueError("Missing the required parameter `layout_id` when calling `layout_copy`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `layout_copy`")  # noqa: E501
        # verify the required parameter 'copy_media_files' is set
        if ('copy_media_files' not in params or
                params['copy_media_files'] is None):
            raise ValueError("Missing the required parameter `copy_media_files` when calling `layout_copy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'layout_id' in params:
            path_params['layoutId'] = params['layout_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'copy_media_files' in params:
            form_params.append(('copyMediaFiles', params['copy_media_files']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/layout/copy/{layoutId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Layout',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def layout_delete(self, layout_id, **kwargs):  # noqa: E501
        """Delete Layout  # noqa: E501

        Delete a Layout  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.layout_delete(layout_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int layout_id: The Layout ID to Delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.layout_delete_with_http_info(layout_id, **kwargs)  # noqa: E501
        else:
            (data) = self.layout_delete_with_http_info(layout_id, **kwargs)  # noqa: E501
            return data

    def layout_delete_with_http_info(self, layout_id, **kwargs):  # noqa: E501
        """Delete Layout  # noqa: E501

        Delete a Layout  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.layout_delete_with_http_info(layout_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int layout_id: The Layout ID to Delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['layout_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method layout_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'layout_id' is set
        if ('layout_id' not in params or
                params['layout_id'] is None):
            raise ValueError("Missing the required parameter `layout_id` when calling `layout_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'layout_id' in params:
            path_params['layoutId'] = params['layout_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/layout/{layoutId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def layout_edit(self, layout_id, name, background_color, backgroundz_index, **kwargs):  # noqa: E501
        """Edit Layout  # noqa: E501

        Edit a Layout  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.layout_edit(layout_id, name, background_color, backgroundz_index, async=True)
        >>> result = thread.get()

        :param async bool
        :param int layout_id: (required)
        :param str name: The Layout Name (required)
        :param str background_color: A HEX color to use as the background color of this Layout. (required)
        :param int backgroundz_index: The Layer Number to use for the background. (required)
        :param str description: The Layout Description
        :param str tags: A comma separated list of Tags
        :param int retired: A flag indicating whether this Layout is retired.
        :param int background_image_id: A media ID to use as the background image for this Layout.
        :param int resolution_id: The Resolution ID to use on this Layout.
        :return: Layout
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.layout_edit_with_http_info(layout_id, name, background_color, backgroundz_index, **kwargs)  # noqa: E501
        else:
            (data) = self.layout_edit_with_http_info(layout_id, name, background_color, backgroundz_index, **kwargs)  # noqa: E501
            return data

    def layout_edit_with_http_info(self, layout_id, name, background_color, backgroundz_index, **kwargs):  # noqa: E501
        """Edit Layout  # noqa: E501

        Edit a Layout  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.layout_edit_with_http_info(layout_id, name, background_color, backgroundz_index, async=True)
        >>> result = thread.get()

        :param async bool
        :param int layout_id: (required)
        :param str name: The Layout Name (required)
        :param str background_color: A HEX color to use as the background color of this Layout. (required)
        :param int backgroundz_index: The Layer Number to use for the background. (required)
        :param str description: The Layout Description
        :param str tags: A comma separated list of Tags
        :param int retired: A flag indicating whether this Layout is retired.
        :param int background_image_id: A media ID to use as the background image for this Layout.
        :param int resolution_id: The Resolution ID to use on this Layout.
        :return: Layout
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['layout_id', 'name', 'background_color', 'backgroundz_index', 'description', 'tags', 'retired', 'background_image_id', 'resolution_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method layout_edit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'layout_id' is set
        if ('layout_id' not in params or
                params['layout_id'] is None):
            raise ValueError("Missing the required parameter `layout_id` when calling `layout_edit`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `layout_edit`")  # noqa: E501
        # verify the required parameter 'background_color' is set
        if ('background_color' not in params or
                params['background_color'] is None):
            raise ValueError("Missing the required parameter `background_color` when calling `layout_edit`")  # noqa: E501
        # verify the required parameter 'backgroundz_index' is set
        if ('backgroundz_index' not in params or
                params['backgroundz_index'] is None):
            raise ValueError("Missing the required parameter `backgroundz_index` when calling `layout_edit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'layout_id' in params:
            path_params['layoutId'] = params['layout_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'tags' in params:
            form_params.append(('tags', params['tags']))  # noqa: E501
        if 'retired' in params:
            form_params.append(('retired', params['retired']))  # noqa: E501
        if 'background_color' in params:
            form_params.append(('backgroundColor', params['background_color']))  # noqa: E501
        if 'background_image_id' in params:
            form_params.append(('backgroundImageId', params['background_image_id']))  # noqa: E501
        if 'backgroundz_index' in params:
            form_params.append(('backgroundzIndex', params['backgroundz_index']))  # noqa: E501
        if 'resolution_id' in params:
            form_params.append(('resolutionId', params['resolution_id']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/layout/{layoutId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Layout',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def layout_retire(self, layout_id, **kwargs):  # noqa: E501
        """Retire Layout  # noqa: E501

        Retire a Layout so that it isn't available to Schedule. Existing Layouts will still be played  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.layout_retire(layout_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int layout_id: The Layout ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.layout_retire_with_http_info(layout_id, **kwargs)  # noqa: E501
        else:
            (data) = self.layout_retire_with_http_info(layout_id, **kwargs)  # noqa: E501
            return data

    def layout_retire_with_http_info(self, layout_id, **kwargs):  # noqa: E501
        """Retire Layout  # noqa: E501

        Retire a Layout so that it isn't available to Schedule. Existing Layouts will still be played  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.layout_retire_with_http_info(layout_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int layout_id: The Layout ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['layout_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method layout_retire" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'layout_id' is set
        if ('layout_id' not in params or
                params['layout_id'] is None):
            raise ValueError("Missing the required parameter `layout_id` when calling `layout_retire`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'layout_id' in params:
            path_params['layoutId'] = params['layout_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/layout/retire/{layoutId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def layout_search(self, **kwargs):  # noqa: E501
        """Search Layouts  # noqa: E501

        Search for Layouts viewable by this user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.layout_search(async=True)
        >>> result = thread.get()

        :param async bool
        :param int layout_id: Filter by Layout Id
        :param str layout: Filter by partial Layout name
        :param int user_id: Filter by user Id
        :param int retired: Filter by retired flag
        :param str tags: Filter by Tags
        :param int exact_tags: A flag indicating whether to treat the tags filter as an exact match
        :param int owner_user_group_id: Filter by users in this UserGroupId
        :param str embed: Embed related data such as regions, playlists, tags, etc
        :return: list[Layout]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.layout_search_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.layout_search_with_http_info(**kwargs)  # noqa: E501
            return data

    def layout_search_with_http_info(self, **kwargs):  # noqa: E501
        """Search Layouts  # noqa: E501

        Search for Layouts viewable by this user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.layout_search_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int layout_id: Filter by Layout Id
        :param str layout: Filter by partial Layout name
        :param int user_id: Filter by user Id
        :param int retired: Filter by retired flag
        :param str tags: Filter by Tags
        :param int exact_tags: A flag indicating whether to treat the tags filter as an exact match
        :param int owner_user_group_id: Filter by users in this UserGroupId
        :param str embed: Embed related data such as regions, playlists, tags, etc
        :return: list[Layout]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['layout_id', 'layout', 'user_id', 'retired', 'tags', 'exact_tags', 'owner_user_group_id', 'embed']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method layout_search" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'layout_id' in params:
            form_params.append(('layoutId', params['layout_id']))  # noqa: E501
        if 'layout' in params:
            form_params.append(('layout', params['layout']))  # noqa: E501
        if 'user_id' in params:
            form_params.append(('userId', params['user_id']))  # noqa: E501
        if 'retired' in params:
            form_params.append(('retired', params['retired']))  # noqa: E501
        if 'tags' in params:
            form_params.append(('tags', params['tags']))  # noqa: E501
        if 'exact_tags' in params:
            form_params.append(('exactTags', params['exact_tags']))  # noqa: E501
        if 'owner_user_group_id' in params:
            form_params.append(('ownerUserGroupId', params['owner_user_group_id']))  # noqa: E501
        if 'embed' in params:
            form_params.append(('embed', params['embed']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/layout', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Layout]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def layout_status(self, layout_id, **kwargs):  # noqa: E501
        """Layout Status  # noqa: E501

        Calculate the Layout status and return a Layout  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.layout_status(layout_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int layout_id: The Layout Id to get the status (required)
        :return: Layout
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.layout_status_with_http_info(layout_id, **kwargs)  # noqa: E501
        else:
            (data) = self.layout_status_with_http_info(layout_id, **kwargs)  # noqa: E501
            return data

    def layout_status_with_http_info(self, layout_id, **kwargs):  # noqa: E501
        """Layout Status  # noqa: E501

        Calculate the Layout status and return a Layout  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.layout_status_with_http_info(layout_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int layout_id: The Layout Id to get the status (required)
        :return: Layout
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['layout_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method layout_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'layout_id' is set
        if ('layout_id' not in params or
                params['layout_id'] is None):
            raise ValueError("Missing the required parameter `layout_id` when calling `layout_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'layout_id' in params:
            path_params['layoutId'] = params['layout_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/layout/status/{layoutId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Layout',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def layout_tag(self, layout_id, tag, **kwargs):  # noqa: E501
        """Tag Layout  # noqa: E501

        Tag a Layout with one or more tags  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.layout_tag(layout_id, tag, async=True)
        >>> result = thread.get()

        :param async bool
        :param int layout_id: The Layout Id to Tag (required)
        :param list[str] tag: An array of tags (required)
        :return: Layout
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.layout_tag_with_http_info(layout_id, tag, **kwargs)  # noqa: E501
        else:
            (data) = self.layout_tag_with_http_info(layout_id, tag, **kwargs)  # noqa: E501
            return data

    def layout_tag_with_http_info(self, layout_id, tag, **kwargs):  # noqa: E501
        """Tag Layout  # noqa: E501

        Tag a Layout with one or more tags  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.layout_tag_with_http_info(layout_id, tag, async=True)
        >>> result = thread.get()

        :param async bool
        :param int layout_id: The Layout Id to Tag (required)
        :param list[str] tag: An array of tags (required)
        :return: Layout
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['layout_id', 'tag']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method layout_tag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'layout_id' is set
        if ('layout_id' not in params or
                params['layout_id'] is None):
            raise ValueError("Missing the required parameter `layout_id` when calling `layout_tag`")  # noqa: E501
        # verify the required parameter 'tag' is set
        if ('tag' not in params or
                params['tag'] is None):
            raise ValueError("Missing the required parameter `tag` when calling `layout_tag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'layout_id' in params:
            path_params['layoutId'] = params['layout_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'tag' in params:
            form_params.append(('tag', params['tag']))  # noqa: E501
            collection_formats['tag'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/layout/{layoutId}/tag', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Layout',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def layout_untag(self, layout_id, tag, **kwargs):  # noqa: E501
        """Untag Layout  # noqa: E501

        Untag a Layout with one or more tags  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.layout_untag(layout_id, tag, async=True)
        >>> result = thread.get()

        :param async bool
        :param int layout_id: The Layout Id to Untag (required)
        :param list[str] tag: An array of tags (required)
        :return: Layout
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.layout_untag_with_http_info(layout_id, tag, **kwargs)  # noqa: E501
        else:
            (data) = self.layout_untag_with_http_info(layout_id, tag, **kwargs)  # noqa: E501
            return data

    def layout_untag_with_http_info(self, layout_id, tag, **kwargs):  # noqa: E501
        """Untag Layout  # noqa: E501

        Untag a Layout with one or more tags  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.layout_untag_with_http_info(layout_id, tag, async=True)
        >>> result = thread.get()

        :param async bool
        :param int layout_id: The Layout Id to Untag (required)
        :param list[str] tag: An array of tags (required)
        :return: Layout
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['layout_id', 'tag']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method layout_untag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'layout_id' is set
        if ('layout_id' not in params or
                params['layout_id'] is None):
            raise ValueError("Missing the required parameter `layout_id` when calling `layout_untag`")  # noqa: E501
        # verify the required parameter 'tag' is set
        if ('tag' not in params or
                params['tag'] is None):
            raise ValueError("Missing the required parameter `tag` when calling `layout_untag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'layout_id' in params:
            path_params['layoutId'] = params['layout_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'tag' in params:
            form_params.append(('tag', params['tag']))  # noqa: E501
            collection_formats['tag'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/layout/{layoutId}/untag', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Layout',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def region_add(self, id, **kwargs):  # noqa: E501
        """Add Region  # noqa: E501

        Add a Region to a Layout  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.region_add(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int id: The Layout ID to add the Region to (required)
        :param int width: The Width, default 250
        :param int height: The Height
        :param int top: The Top Coordinate
        :param int left: The Left Coordinate
        :return: Region
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.region_add_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.region_add_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def region_add_with_http_info(self, id, **kwargs):  # noqa: E501
        """Add Region  # noqa: E501

        Add a Region to a Layout  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.region_add_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int id: The Layout ID to add the Region to (required)
        :param int width: The Width, default 250
        :param int height: The Height
        :param int top: The Top Coordinate
        :param int left: The Left Coordinate
        :return: Region
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'width', 'height', 'top', 'left']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method region_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `region_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'width' in params:
            form_params.append(('width', params['width']))  # noqa: E501
        if 'height' in params:
            form_params.append(('height', params['height']))  # noqa: E501
        if 'top' in params:
            form_params.append(('top', params['top']))  # noqa: E501
        if 'left' in params:
            form_params.append(('left', params['left']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/region/{id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Region',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def region_delete(self, region_id, **kwargs):  # noqa: E501
        """Region Delete  # noqa: E501

        Delete an existing region  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.region_delete(region_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int region_id: The Region ID to Delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.region_delete_with_http_info(region_id, **kwargs)  # noqa: E501
        else:
            (data) = self.region_delete_with_http_info(region_id, **kwargs)  # noqa: E501
            return data

    def region_delete_with_http_info(self, region_id, **kwargs):  # noqa: E501
        """Region Delete  # noqa: E501

        Delete an existing region  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.region_delete_with_http_info(region_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int region_id: The Region ID to Delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['region_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method region_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'region_id' is set
        if ('region_id' not in params or
                params['region_id'] is None):
            raise ValueError("Missing the required parameter `region_id` when calling `region_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'region_id' in params:
            path_params['regionId'] = params['region_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/region/{regionId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def region_edit(self, id, loop, **kwargs):  # noqa: E501
        """Edit Region  # noqa: E501

        Edit Region  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.region_edit(id, loop, async=True)
        >>> result = thread.get()

        :param async bool
        :param int id: The Region ID to Edit (required)
        :param int loop: Flag indicating whether this region should loop if there is only 1 media item in the timeline (required)
        :param int width: The Width, default 250
        :param int height: The Height
        :param int top: The Top Coordinate
        :param int left: The Left Coordinate
        :param int z_index: The Layer for this Region
        :param str transition_type: The Transition Type. Must be a valid transition code as returned by /transition
        :param int transition_duration: The transition duration in milliseconds if required by the transition type
        :param str transition_direction: The transition direction if required by the transition type.
        :return: Region
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.region_edit_with_http_info(id, loop, **kwargs)  # noqa: E501
        else:
            (data) = self.region_edit_with_http_info(id, loop, **kwargs)  # noqa: E501
            return data

    def region_edit_with_http_info(self, id, loop, **kwargs):  # noqa: E501
        """Edit Region  # noqa: E501

        Edit Region  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.region_edit_with_http_info(id, loop, async=True)
        >>> result = thread.get()

        :param async bool
        :param int id: The Region ID to Edit (required)
        :param int loop: Flag indicating whether this region should loop if there is only 1 media item in the timeline (required)
        :param int width: The Width, default 250
        :param int height: The Height
        :param int top: The Top Coordinate
        :param int left: The Left Coordinate
        :param int z_index: The Layer for this Region
        :param str transition_type: The Transition Type. Must be a valid transition code as returned by /transition
        :param int transition_duration: The transition duration in milliseconds if required by the transition type
        :param str transition_direction: The transition direction if required by the transition type.
        :return: Region
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'loop', 'width', 'height', 'top', 'left', 'z_index', 'transition_type', 'transition_duration', 'transition_direction']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method region_edit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `region_edit`")  # noqa: E501
        # verify the required parameter 'loop' is set
        if ('loop' not in params or
                params['loop'] is None):
            raise ValueError("Missing the required parameter `loop` when calling `region_edit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'width' in params:
            form_params.append(('width', params['width']))  # noqa: E501
        if 'height' in params:
            form_params.append(('height', params['height']))  # noqa: E501
        if 'top' in params:
            form_params.append(('top', params['top']))  # noqa: E501
        if 'left' in params:
            form_params.append(('left', params['left']))  # noqa: E501
        if 'z_index' in params:
            form_params.append(('zIndex', params['z_index']))  # noqa: E501
        if 'transition_type' in params:
            form_params.append(('transitionType', params['transition_type']))  # noqa: E501
        if 'transition_duration' in params:
            form_params.append(('transitionDuration', params['transition_duration']))  # noqa: E501
        if 'transition_direction' in params:
            form_params.append(('transitionDirection', params['transition_direction']))  # noqa: E501
        if 'loop' in params:
            form_params.append(('loop', params['loop']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/region/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Region',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def region_position_all(self, layout_id, regions, **kwargs):  # noqa: E501
        """Position Regions  # noqa: E501

        Position all regions for a Layout  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.region_position_all(layout_id, regions, async=True)
        >>> result = thread.get()

        :param async bool
        :param int layout_id: The Layout ID (required)
        :param list[str] regions: Array of regions and their new positions. Each array element should be json encoded and have regionId, top, left, width and height. (required)
        :return: Layout
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.region_position_all_with_http_info(layout_id, regions, **kwargs)  # noqa: E501
        else:
            (data) = self.region_position_all_with_http_info(layout_id, regions, **kwargs)  # noqa: E501
            return data

    def region_position_all_with_http_info(self, layout_id, regions, **kwargs):  # noqa: E501
        """Position Regions  # noqa: E501

        Position all regions for a Layout  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.region_position_all_with_http_info(layout_id, regions, async=True)
        >>> result = thread.get()

        :param async bool
        :param int layout_id: The Layout ID (required)
        :param list[str] regions: Array of regions and their new positions. Each array element should be json encoded and have regionId, top, left, width and height. (required)
        :return: Layout
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['layout_id', 'regions']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method region_position_all" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'layout_id' is set
        if ('layout_id' not in params or
                params['layout_id'] is None):
            raise ValueError("Missing the required parameter `layout_id` when calling `region_position_all`")  # noqa: E501
        # verify the required parameter 'regions' is set
        if ('regions' not in params or
                params['regions'] is None):
            raise ValueError("Missing the required parameter `regions` when calling `region_position_all`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'layout_id' in params:
            path_params['layoutId'] = params['layout_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'regions' in params:
            form_params.append(('regions', params['regions']))  # noqa: E501
            collection_formats['regions'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/region/position/all/{layoutId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Layout',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
