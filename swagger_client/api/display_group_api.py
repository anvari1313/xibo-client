# coding: utf-8

"""
    Xibo API

    Xibo CMS API  # noqa: E501

    OpenAPI spec version: 1.8.0
    Contact: info@xibo.org.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DisplayGroupApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def display_group_action_change_layout(self, display_group_id, layout_id, change_mode, **kwargs):  # noqa: E501
        """Action: Change Layout  # noqa: E501

        Send the change layout action to this DisplayGroup  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_group_action_change_layout(display_group_id, layout_id, change_mode, async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_group_id: The Display Group Id (required)
        :param int layout_id: The Layout Id (required)
        :param str change_mode: Whether to queue or replace with this action (required)
        :param int duration: The duration in seconds for this Layout change to remain in effect
        :param int download_required: Flag indicating whether the player should perform a collect before playing the Layout
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.display_group_action_change_layout_with_http_info(display_group_id, layout_id, change_mode, **kwargs)  # noqa: E501
        else:
            (data) = self.display_group_action_change_layout_with_http_info(display_group_id, layout_id, change_mode, **kwargs)  # noqa: E501
            return data

    def display_group_action_change_layout_with_http_info(self, display_group_id, layout_id, change_mode, **kwargs):  # noqa: E501
        """Action: Change Layout  # noqa: E501

        Send the change layout action to this DisplayGroup  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_group_action_change_layout_with_http_info(display_group_id, layout_id, change_mode, async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_group_id: The Display Group Id (required)
        :param int layout_id: The Layout Id (required)
        :param str change_mode: Whether to queue or replace with this action (required)
        :param int duration: The duration in seconds for this Layout change to remain in effect
        :param int download_required: Flag indicating whether the player should perform a collect before playing the Layout
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['display_group_id', 'layout_id', 'change_mode', 'duration', 'download_required']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method display_group_action_change_layout" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'display_group_id' is set
        if ('display_group_id' not in params or
                params['display_group_id'] is None):
            raise ValueError("Missing the required parameter `display_group_id` when calling `display_group_action_change_layout`")  # noqa: E501
        # verify the required parameter 'layout_id' is set
        if ('layout_id' not in params or
                params['layout_id'] is None):
            raise ValueError("Missing the required parameter `layout_id` when calling `display_group_action_change_layout`")  # noqa: E501
        # verify the required parameter 'change_mode' is set
        if ('change_mode' not in params or
                params['change_mode'] is None):
            raise ValueError("Missing the required parameter `change_mode` when calling `display_group_action_change_layout`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'display_group_id' in params:
            path_params['displayGroupId'] = params['display_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'layout_id' in params:
            form_params.append(('layoutId', params['layout_id']))  # noqa: E501
        if 'duration' in params:
            form_params.append(('duration', params['duration']))  # noqa: E501
        if 'download_required' in params:
            form_params.append(('downloadRequired', params['download_required']))  # noqa: E501
        if 'change_mode' in params:
            form_params.append(('changeMode', params['change_mode']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/displaygroup/{displayGroupId}/action/changeLayout', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def display_group_action_clear_stats_and_logs(self, display_group_id, **kwargs):  # noqa: E501
        """Action: Clear Stats and Logs  # noqa: E501

        Clear all stats and logs on this Group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_group_action_clear_stats_and_logs(display_group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_group_id: The display group id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.display_group_action_clear_stats_and_logs_with_http_info(display_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.display_group_action_clear_stats_and_logs_with_http_info(display_group_id, **kwargs)  # noqa: E501
            return data

    def display_group_action_clear_stats_and_logs_with_http_info(self, display_group_id, **kwargs):  # noqa: E501
        """Action: Clear Stats and Logs  # noqa: E501

        Clear all stats and logs on this Group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_group_action_clear_stats_and_logs_with_http_info(display_group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_group_id: The display group id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['display_group_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method display_group_action_clear_stats_and_logs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'display_group_id' is set
        if ('display_group_id' not in params or
                params['display_group_id'] is None):
            raise ValueError("Missing the required parameter `display_group_id` when calling `display_group_action_clear_stats_and_logs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'display_group_id' in params:
            path_params['displayGroupId'] = params['display_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/displaygroup/{displayGroupId}/action/clearStatsAndLogs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def display_group_action_collect_now(self, display_group_id, **kwargs):  # noqa: E501
        """Action: Collect Now  # noqa: E501

        Send the collect now action to this DisplayGroup  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_group_action_collect_now(display_group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_group_id: The display group id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.display_group_action_collect_now_with_http_info(display_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.display_group_action_collect_now_with_http_info(display_group_id, **kwargs)  # noqa: E501
            return data

    def display_group_action_collect_now_with_http_info(self, display_group_id, **kwargs):  # noqa: E501
        """Action: Collect Now  # noqa: E501

        Send the collect now action to this DisplayGroup  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_group_action_collect_now_with_http_info(display_group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_group_id: The display group id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['display_group_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method display_group_action_collect_now" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'display_group_id' is set
        if ('display_group_id' not in params or
                params['display_group_id'] is None):
            raise ValueError("Missing the required parameter `display_group_id` when calling `display_group_action_collect_now`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'display_group_id' in params:
            path_params['displayGroupId'] = params['display_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/displaygroup/{displayGroupId}/action/collectNow', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def display_group_action_command(self, display_group_id, command_id, **kwargs):  # noqa: E501
        """Send Command  # noqa: E501

        Send a predefined command to this Group of Displays  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_group_action_command(display_group_id, command_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_group_id: The display group id (required)
        :param int command_id: The Command Id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.display_group_action_command_with_http_info(display_group_id, command_id, **kwargs)  # noqa: E501
        else:
            (data) = self.display_group_action_command_with_http_info(display_group_id, command_id, **kwargs)  # noqa: E501
            return data

    def display_group_action_command_with_http_info(self, display_group_id, command_id, **kwargs):  # noqa: E501
        """Send Command  # noqa: E501

        Send a predefined command to this Group of Displays  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_group_action_command_with_http_info(display_group_id, command_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_group_id: The display group id (required)
        :param int command_id: The Command Id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['display_group_id', 'command_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method display_group_action_command" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'display_group_id' is set
        if ('display_group_id' not in params or
                params['display_group_id'] is None):
            raise ValueError("Missing the required parameter `display_group_id` when calling `display_group_action_command`")  # noqa: E501
        # verify the required parameter 'command_id' is set
        if ('command_id' not in params or
                params['command_id'] is None):
            raise ValueError("Missing the required parameter `command_id` when calling `display_group_action_command`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'display_group_id' in params:
            path_params['displayGroupId'] = params['display_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'command_id' in params:
            form_params.append(('commandId', params['command_id']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/displaygroup/{displayGroupId}/action/command', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def display_group_action_overlay_layout(self, display_group_id, layout_id, **kwargs):  # noqa: E501
        """Action: Overlay Layout  # noqa: E501

        Send the overlay layout action to this DisplayGroup  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_group_action_overlay_layout(display_group_id, layout_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_group_id: The Display Group Id (required)
        :param int layout_id: The Layout Id (required)
        :param int duration: The duration in seconds for this Overlay to remain in effect
        :param int download_required: Flag indicating whether the player should perform a collect before adding the Overlay
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.display_group_action_overlay_layout_with_http_info(display_group_id, layout_id, **kwargs)  # noqa: E501
        else:
            (data) = self.display_group_action_overlay_layout_with_http_info(display_group_id, layout_id, **kwargs)  # noqa: E501
            return data

    def display_group_action_overlay_layout_with_http_info(self, display_group_id, layout_id, **kwargs):  # noqa: E501
        """Action: Overlay Layout  # noqa: E501

        Send the overlay layout action to this DisplayGroup  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_group_action_overlay_layout_with_http_info(display_group_id, layout_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_group_id: The Display Group Id (required)
        :param int layout_id: The Layout Id (required)
        :param int duration: The duration in seconds for this Overlay to remain in effect
        :param int download_required: Flag indicating whether the player should perform a collect before adding the Overlay
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['display_group_id', 'layout_id', 'duration', 'download_required']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method display_group_action_overlay_layout" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'display_group_id' is set
        if ('display_group_id' not in params or
                params['display_group_id'] is None):
            raise ValueError("Missing the required parameter `display_group_id` when calling `display_group_action_overlay_layout`")  # noqa: E501
        # verify the required parameter 'layout_id' is set
        if ('layout_id' not in params or
                params['layout_id'] is None):
            raise ValueError("Missing the required parameter `layout_id` when calling `display_group_action_overlay_layout`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'display_group_id' in params:
            path_params['displayGroupId'] = params['display_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'layout_id' in params:
            form_params.append(('layoutId', params['layout_id']))  # noqa: E501
        if 'duration' in params:
            form_params.append(('duration', params['duration']))  # noqa: E501
        if 'download_required' in params:
            form_params.append(('downloadRequired', params['download_required']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/displaygroup/{displayGroupId}/action/overlayLayout', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def display_group_action_revert_to_schedule(self, display_group_id, **kwargs):  # noqa: E501
        """Action: Revert to Schedule  # noqa: E501

        Send the revert to schedule action to this DisplayGroup  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_group_action_revert_to_schedule(display_group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_group_id: The display group id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.display_group_action_revert_to_schedule_with_http_info(display_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.display_group_action_revert_to_schedule_with_http_info(display_group_id, **kwargs)  # noqa: E501
            return data

    def display_group_action_revert_to_schedule_with_http_info(self, display_group_id, **kwargs):  # noqa: E501
        """Action: Revert to Schedule  # noqa: E501

        Send the revert to schedule action to this DisplayGroup  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_group_action_revert_to_schedule_with_http_info(display_group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_group_id: The display group id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['display_group_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method display_group_action_revert_to_schedule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'display_group_id' is set
        if ('display_group_id' not in params or
                params['display_group_id'] is None):
            raise ValueError("Missing the required parameter `display_group_id` when calling `display_group_action_revert_to_schedule`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'display_group_id' in params:
            path_params['displayGroupId'] = params['display_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/displaygroup/{displayGroupId}/action/revertToSchedule', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def display_group_add(self, display_group, is_dynamic, **kwargs):  # noqa: E501
        """Add a Display Group  # noqa: E501

        Add a new Display Group to the CMS  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_group_add(display_group, is_dynamic, async=True)
        >>> result = thread.get()

        :param async bool
        :param str display_group: The Display Group Name (required)
        :param int is_dynamic: Flag indicating whether this DisplayGroup is Dynamic (required)
        :param str description: The Display Group Description
        :param str tags: A comma separated list of tags for this item
        :param str dynamic_content: The filter criteria for this dynamic group. A command separated set of regular expressions to apply
        :return: DisplayGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.display_group_add_with_http_info(display_group, is_dynamic, **kwargs)  # noqa: E501
        else:
            (data) = self.display_group_add_with_http_info(display_group, is_dynamic, **kwargs)  # noqa: E501
            return data

    def display_group_add_with_http_info(self, display_group, is_dynamic, **kwargs):  # noqa: E501
        """Add a Display Group  # noqa: E501

        Add a new Display Group to the CMS  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_group_add_with_http_info(display_group, is_dynamic, async=True)
        >>> result = thread.get()

        :param async bool
        :param str display_group: The Display Group Name (required)
        :param int is_dynamic: Flag indicating whether this DisplayGroup is Dynamic (required)
        :param str description: The Display Group Description
        :param str tags: A comma separated list of tags for this item
        :param str dynamic_content: The filter criteria for this dynamic group. A command separated set of regular expressions to apply
        :return: DisplayGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['display_group', 'is_dynamic', 'description', 'tags', 'dynamic_content']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method display_group_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'display_group' is set
        if ('display_group' not in params or
                params['display_group'] is None):
            raise ValueError("Missing the required parameter `display_group` when calling `display_group_add`")  # noqa: E501
        # verify the required parameter 'is_dynamic' is set
        if ('is_dynamic' not in params or
                params['is_dynamic'] is None):
            raise ValueError("Missing the required parameter `is_dynamic` when calling `display_group_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'display_group' in params:
            form_params.append(('displayGroup', params['display_group']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'tags' in params:
            form_params.append(('tags', params['tags']))  # noqa: E501
        if 'is_dynamic' in params:
            form_params.append(('isDynamic', params['is_dynamic']))  # noqa: E501
        if 'dynamic_content' in params:
            form_params.append(('dynamicContent', params['dynamic_content']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/displaygroup', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DisplayGroup',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def display_group_delete(self, display_group_id, **kwargs):  # noqa: E501
        """Delete a Display Group  # noqa: E501

        Delete an existing Display Group identified by its Id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_group_delete(display_group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_group_id: The displayGroupId to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.display_group_delete_with_http_info(display_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.display_group_delete_with_http_info(display_group_id, **kwargs)  # noqa: E501
            return data

    def display_group_delete_with_http_info(self, display_group_id, **kwargs):  # noqa: E501
        """Delete a Display Group  # noqa: E501

        Delete an existing Display Group identified by its Id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_group_delete_with_http_info(display_group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_group_id: The displayGroupId to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['display_group_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method display_group_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'display_group_id' is set
        if ('display_group_id' not in params or
                params['display_group_id'] is None):
            raise ValueError("Missing the required parameter `display_group_id` when calling `display_group_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'display_group_id' in params:
            path_params['displayGroupId'] = params['display_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/displaygroup/{displayGroupId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def display_group_display_assign(self, display_group_id, display_id, **kwargs):  # noqa: E501
        """Assign one or more Displays to a Display Group  # noqa: E501

        Adds the provided Displays to the Display Group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_group_display_assign(display_group_id, display_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_group_id: The Display Group to assign to (required)
        :param list[int] display_id: The Display Ids to assign (required)
        :param list[int] unassign_display_id: An optional array of Display IDs to unassign
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.display_group_display_assign_with_http_info(display_group_id, display_id, **kwargs)  # noqa: E501
        else:
            (data) = self.display_group_display_assign_with_http_info(display_group_id, display_id, **kwargs)  # noqa: E501
            return data

    def display_group_display_assign_with_http_info(self, display_group_id, display_id, **kwargs):  # noqa: E501
        """Assign one or more Displays to a Display Group  # noqa: E501

        Adds the provided Displays to the Display Group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_group_display_assign_with_http_info(display_group_id, display_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_group_id: The Display Group to assign to (required)
        :param list[int] display_id: The Display Ids to assign (required)
        :param list[int] unassign_display_id: An optional array of Display IDs to unassign
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['display_group_id', 'display_id', 'unassign_display_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method display_group_display_assign" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'display_group_id' is set
        if ('display_group_id' not in params or
                params['display_group_id'] is None):
            raise ValueError("Missing the required parameter `display_group_id` when calling `display_group_display_assign`")  # noqa: E501
        # verify the required parameter 'display_id' is set
        if ('display_id' not in params or
                params['display_id'] is None):
            raise ValueError("Missing the required parameter `display_id` when calling `display_group_display_assign`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'display_group_id' in params:
            path_params['displayGroupId'] = params['display_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'display_id' in params:
            form_params.append(('displayId', params['display_id']))  # noqa: E501
            collection_formats['displayId'] = 'csv'  # noqa: E501
        if 'unassign_display_id' in params:
            form_params.append(('unassignDisplayId', params['unassign_display_id']))  # noqa: E501
            collection_formats['unassignDisplayId'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/displaygroup/{displayGroupId}/display/assign', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def display_group_display_group_assign(self, display_group_id, display_group_id2, **kwargs):  # noqa: E501
        """Assign one or more DisplayGroups to a Display Group  # noqa: E501

        Adds the provided DisplayGroups to the Display Group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_group_display_group_assign(display_group_id, display_group_id2, async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_group_id: The Display Group to assign to (required)
        :param list[int] display_group_id2: The displayGroup Ids to assign (required)
        :param list[int] unassign_display_group_id: An optional array of displayGroup IDs to unassign
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.display_group_display_group_assign_with_http_info(display_group_id, display_group_id2, **kwargs)  # noqa: E501
        else:
            (data) = self.display_group_display_group_assign_with_http_info(display_group_id, display_group_id2, **kwargs)  # noqa: E501
            return data

    def display_group_display_group_assign_with_http_info(self, display_group_id, display_group_id2, **kwargs):  # noqa: E501
        """Assign one or more DisplayGroups to a Display Group  # noqa: E501

        Adds the provided DisplayGroups to the Display Group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_group_display_group_assign_with_http_info(display_group_id, display_group_id2, async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_group_id: The Display Group to assign to (required)
        :param list[int] display_group_id2: The displayGroup Ids to assign (required)
        :param list[int] unassign_display_group_id: An optional array of displayGroup IDs to unassign
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['display_group_id', 'display_group_id2', 'unassign_display_group_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method display_group_display_group_assign" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'display_group_id' is set
        if ('display_group_id' not in params or
                params['display_group_id'] is None):
            raise ValueError("Missing the required parameter `display_group_id` when calling `display_group_display_group_assign`")  # noqa: E501
        # verify the required parameter 'display_group_id2' is set
        if ('display_group_id2' not in params or
                params['display_group_id2'] is None):
            raise ValueError("Missing the required parameter `display_group_id2` when calling `display_group_display_group_assign`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'display_group_id' in params:
            path_params['displayGroupId'] = params['display_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'display_group_id2' in params:
            form_params.append(('displayGroupId', params['display_group_id2']))  # noqa: E501
            collection_formats['displayGroupId'] = 'csv'  # noqa: E501
        if 'unassign_display_group_id' in params:
            form_params.append(('unassignDisplayGroupId', params['unassign_display_group_id']))  # noqa: E501
            collection_formats['unassignDisplayGroupId'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/displaygroup/{displayGroupId}/displayGroup/assign', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def display_group_display_group_unassign(self, display_group_id, display_group_id2, **kwargs):  # noqa: E501
        """Unassigns one or more DisplayGroups to a Display Group  # noqa: E501

        Removes the provided DisplayGroups from the Display Group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_group_display_group_unassign(display_group_id, display_group_id2, async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_group_id: The Display Group to unassign from (required)
        :param list[int] display_group_id2: The DisplayGroup Ids to unassign (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.display_group_display_group_unassign_with_http_info(display_group_id, display_group_id2, **kwargs)  # noqa: E501
        else:
            (data) = self.display_group_display_group_unassign_with_http_info(display_group_id, display_group_id2, **kwargs)  # noqa: E501
            return data

    def display_group_display_group_unassign_with_http_info(self, display_group_id, display_group_id2, **kwargs):  # noqa: E501
        """Unassigns one or more DisplayGroups to a Display Group  # noqa: E501

        Removes the provided DisplayGroups from the Display Group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_group_display_group_unassign_with_http_info(display_group_id, display_group_id2, async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_group_id: The Display Group to unassign from (required)
        :param list[int] display_group_id2: The DisplayGroup Ids to unassign (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['display_group_id', 'display_group_id2']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method display_group_display_group_unassign" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'display_group_id' is set
        if ('display_group_id' not in params or
                params['display_group_id'] is None):
            raise ValueError("Missing the required parameter `display_group_id` when calling `display_group_display_group_unassign`")  # noqa: E501
        # verify the required parameter 'display_group_id2' is set
        if ('display_group_id2' not in params or
                params['display_group_id2'] is None):
            raise ValueError("Missing the required parameter `display_group_id2` when calling `display_group_display_group_unassign`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'display_group_id' in params:
            path_params['displayGroupId'] = params['display_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'display_group_id2' in params:
            form_params.append(('displayGroupId', params['display_group_id2']))  # noqa: E501
            collection_formats['displayGroupId'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/displaygroup/{displayGroupId}/displayGroup/unassign', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def display_group_display_unassign(self, display_group_id, display_id, **kwargs):  # noqa: E501
        """Unassigns one or more Displays to a Display Group  # noqa: E501

        Removes the provided Displays from the Display Group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_group_display_unassign(display_group_id, display_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_group_id: The Display Group to unassign from (required)
        :param list[int] display_id: The Display Ids to unassign (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.display_group_display_unassign_with_http_info(display_group_id, display_id, **kwargs)  # noqa: E501
        else:
            (data) = self.display_group_display_unassign_with_http_info(display_group_id, display_id, **kwargs)  # noqa: E501
            return data

    def display_group_display_unassign_with_http_info(self, display_group_id, display_id, **kwargs):  # noqa: E501
        """Unassigns one or more Displays to a Display Group  # noqa: E501

        Removes the provided Displays from the Display Group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_group_display_unassign_with_http_info(display_group_id, display_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_group_id: The Display Group to unassign from (required)
        :param list[int] display_id: The Display Ids to unassign (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['display_group_id', 'display_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method display_group_display_unassign" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'display_group_id' is set
        if ('display_group_id' not in params or
                params['display_group_id'] is None):
            raise ValueError("Missing the required parameter `display_group_id` when calling `display_group_display_unassign`")  # noqa: E501
        # verify the required parameter 'display_id' is set
        if ('display_id' not in params or
                params['display_id'] is None):
            raise ValueError("Missing the required parameter `display_id` when calling `display_group_display_unassign`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'display_group_id' in params:
            path_params['displayGroupId'] = params['display_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'display_id' in params:
            form_params.append(('displayId', params['display_id']))  # noqa: E501
            collection_formats['displayId'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/displaygroup/{displayGroupId}/display/unassign', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def display_group_display_version(self, display_group_id, media_id, **kwargs):  # noqa: E501
        """Set the Version for this Display  # noqa: E501

        Sets the version instructions on all Displays in the Group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_group_display_version(display_group_id, media_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_group_id: The Display Group ID (required)
        :param int media_id: The Media Id of the Installer File (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.display_group_display_version_with_http_info(display_group_id, media_id, **kwargs)  # noqa: E501
        else:
            (data) = self.display_group_display_version_with_http_info(display_group_id, media_id, **kwargs)  # noqa: E501
            return data

    def display_group_display_version_with_http_info(self, display_group_id, media_id, **kwargs):  # noqa: E501
        """Set the Version for this Display  # noqa: E501

        Sets the version instructions on all Displays in the Group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_group_display_version_with_http_info(display_group_id, media_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_group_id: The Display Group ID (required)
        :param int media_id: The Media Id of the Installer File (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['display_group_id', 'media_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method display_group_display_version" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'display_group_id' is set
        if ('display_group_id' not in params or
                params['display_group_id'] is None):
            raise ValueError("Missing the required parameter `display_group_id` when calling `display_group_display_version`")  # noqa: E501
        # verify the required parameter 'media_id' is set
        if ('media_id' not in params or
                params['media_id'] is None):
            raise ValueError("Missing the required parameter `media_id` when calling `display_group_display_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'display_group_id' in params:
            path_params['displayGroupId'] = params['display_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'media_id' in params:
            form_params.append(('mediaId', params['media_id']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/displaygroup/{displayGroupId}/version', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def display_group_edit(self, display_group_id, display_group, is_dynamic, **kwargs):  # noqa: E501
        """Edit a Display Group  # noqa: E501

        Edit an existing Display Group identified by its Id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_group_edit(display_group_id, display_group, is_dynamic, async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_group_id: The displayGroupId to edit. (required)
        :param str display_group: The Display Group Name (required)
        :param int is_dynamic: Flag indicating whether this DisplayGroup is Dynamic (required)
        :param str description: The Display Group Description
        :param str tags: A comma separated list of tags for this item
        :param str dynamic_criteria: The filter criteria for this dynamic group. A command separated set of regular expressions to apply
        :return: DisplayGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.display_group_edit_with_http_info(display_group_id, display_group, is_dynamic, **kwargs)  # noqa: E501
        else:
            (data) = self.display_group_edit_with_http_info(display_group_id, display_group, is_dynamic, **kwargs)  # noqa: E501
            return data

    def display_group_edit_with_http_info(self, display_group_id, display_group, is_dynamic, **kwargs):  # noqa: E501
        """Edit a Display Group  # noqa: E501

        Edit an existing Display Group identified by its Id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_group_edit_with_http_info(display_group_id, display_group, is_dynamic, async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_group_id: The displayGroupId to edit. (required)
        :param str display_group: The Display Group Name (required)
        :param int is_dynamic: Flag indicating whether this DisplayGroup is Dynamic (required)
        :param str description: The Display Group Description
        :param str tags: A comma separated list of tags for this item
        :param str dynamic_criteria: The filter criteria for this dynamic group. A command separated set of regular expressions to apply
        :return: DisplayGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['display_group_id', 'display_group', 'is_dynamic', 'description', 'tags', 'dynamic_criteria']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method display_group_edit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'display_group_id' is set
        if ('display_group_id' not in params or
                params['display_group_id'] is None):
            raise ValueError("Missing the required parameter `display_group_id` when calling `display_group_edit`")  # noqa: E501
        # verify the required parameter 'display_group' is set
        if ('display_group' not in params or
                params['display_group'] is None):
            raise ValueError("Missing the required parameter `display_group` when calling `display_group_edit`")  # noqa: E501
        # verify the required parameter 'is_dynamic' is set
        if ('is_dynamic' not in params or
                params['is_dynamic'] is None):
            raise ValueError("Missing the required parameter `is_dynamic` when calling `display_group_edit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'display_group_id' in params:
            path_params['displayGroupId'] = params['display_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'display_group' in params:
            form_params.append(('displayGroup', params['display_group']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'tags' in params:
            form_params.append(('tags', params['tags']))  # noqa: E501
        if 'is_dynamic' in params:
            form_params.append(('isDynamic', params['is_dynamic']))  # noqa: E501
        if 'dynamic_criteria' in params:
            form_params.append(('dynamicCriteria', params['dynamic_criteria']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/displaygroup/{displayGroupId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DisplayGroup',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def display_group_layout_unassign(self, display_group_id, layout_id, **kwargs):  # noqa: E501
        """Unassign one or more Layout items from a Display Group  # noqa: E501

        Removes the provided from the Display Group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_group_layout_unassign(display_group_id, layout_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_group_id: The Display Group to unassign from (required)
        :param list[int] layout_id: The Layout Ids to unassign (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.display_group_layout_unassign_with_http_info(display_group_id, layout_id, **kwargs)  # noqa: E501
        else:
            (data) = self.display_group_layout_unassign_with_http_info(display_group_id, layout_id, **kwargs)  # noqa: E501
            return data

    def display_group_layout_unassign_with_http_info(self, display_group_id, layout_id, **kwargs):  # noqa: E501
        """Unassign one or more Layout items from a Display Group  # noqa: E501

        Removes the provided from the Display Group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_group_layout_unassign_with_http_info(display_group_id, layout_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_group_id: The Display Group to unassign from (required)
        :param list[int] layout_id: The Layout Ids to unassign (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['display_group_id', 'layout_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method display_group_layout_unassign" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'display_group_id' is set
        if ('display_group_id' not in params or
                params['display_group_id'] is None):
            raise ValueError("Missing the required parameter `display_group_id` when calling `display_group_layout_unassign`")  # noqa: E501
        # verify the required parameter 'layout_id' is set
        if ('layout_id' not in params or
                params['layout_id'] is None):
            raise ValueError("Missing the required parameter `layout_id` when calling `display_group_layout_unassign`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'display_group_id' in params:
            path_params['displayGroupId'] = params['display_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'layout_id' in params:
            form_params.append(('layoutId', params['layout_id']))  # noqa: E501
            collection_formats['layoutId'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/displaygroup/{displayGroupId}/layout/unassign', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def display_group_layouts_assign(self, display_group_id, layout_id, **kwargs):  # noqa: E501
        """Assign one or more Layouts items to a Display Group  # noqa: E501

        Adds the provided Layouts to the Display Group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_group_layouts_assign(display_group_id, layout_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_group_id: The Display Group to assign to (required)
        :param list[int] layout_id: The Layouts Ids to assign (required)
        :param list[int] unassign_layout_id: Optional array of Layouts Id to unassign
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.display_group_layouts_assign_with_http_info(display_group_id, layout_id, **kwargs)  # noqa: E501
        else:
            (data) = self.display_group_layouts_assign_with_http_info(display_group_id, layout_id, **kwargs)  # noqa: E501
            return data

    def display_group_layouts_assign_with_http_info(self, display_group_id, layout_id, **kwargs):  # noqa: E501
        """Assign one or more Layouts items to a Display Group  # noqa: E501

        Adds the provided Layouts to the Display Group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_group_layouts_assign_with_http_info(display_group_id, layout_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_group_id: The Display Group to assign to (required)
        :param list[int] layout_id: The Layouts Ids to assign (required)
        :param list[int] unassign_layout_id: Optional array of Layouts Id to unassign
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['display_group_id', 'layout_id', 'unassign_layout_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method display_group_layouts_assign" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'display_group_id' is set
        if ('display_group_id' not in params or
                params['display_group_id'] is None):
            raise ValueError("Missing the required parameter `display_group_id` when calling `display_group_layouts_assign`")  # noqa: E501
        # verify the required parameter 'layout_id' is set
        if ('layout_id' not in params or
                params['layout_id'] is None):
            raise ValueError("Missing the required parameter `layout_id` when calling `display_group_layouts_assign`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'display_group_id' in params:
            path_params['displayGroupId'] = params['display_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'layout_id' in params:
            form_params.append(('layoutId', params['layout_id']))  # noqa: E501
            collection_formats['layoutId'] = 'csv'  # noqa: E501
        if 'unassign_layout_id' in params:
            form_params.append(('unassignLayoutId', params['unassign_layout_id']))  # noqa: E501
            collection_formats['unassignLayoutId'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/displaygroup/{displayGroupId}/layout/assign', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def display_group_media_assign(self, display_group_id, media_id, **kwargs):  # noqa: E501
        """Assign one or more Media items to a Display Group  # noqa: E501

        Adds the provided Media to the Display Group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_group_media_assign(display_group_id, media_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_group_id: The Display Group to assign to (required)
        :param list[int] media_id: The Media Ids to assign (required)
        :param list[int] unassign_media_id: Optional array of Media Id to unassign
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.display_group_media_assign_with_http_info(display_group_id, media_id, **kwargs)  # noqa: E501
        else:
            (data) = self.display_group_media_assign_with_http_info(display_group_id, media_id, **kwargs)  # noqa: E501
            return data

    def display_group_media_assign_with_http_info(self, display_group_id, media_id, **kwargs):  # noqa: E501
        """Assign one or more Media items to a Display Group  # noqa: E501

        Adds the provided Media to the Display Group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_group_media_assign_with_http_info(display_group_id, media_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_group_id: The Display Group to assign to (required)
        :param list[int] media_id: The Media Ids to assign (required)
        :param list[int] unassign_media_id: Optional array of Media Id to unassign
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['display_group_id', 'media_id', 'unassign_media_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method display_group_media_assign" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'display_group_id' is set
        if ('display_group_id' not in params or
                params['display_group_id'] is None):
            raise ValueError("Missing the required parameter `display_group_id` when calling `display_group_media_assign`")  # noqa: E501
        # verify the required parameter 'media_id' is set
        if ('media_id' not in params or
                params['media_id'] is None):
            raise ValueError("Missing the required parameter `media_id` when calling `display_group_media_assign`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'display_group_id' in params:
            path_params['displayGroupId'] = params['display_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'media_id' in params:
            form_params.append(('mediaId', params['media_id']))  # noqa: E501
            collection_formats['mediaId'] = 'csv'  # noqa: E501
        if 'unassign_media_id' in params:
            form_params.append(('unassignMediaId', params['unassign_media_id']))  # noqa: E501
            collection_formats['unassignMediaId'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/displaygroup/{displayGroupId}/media/assign', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def display_group_media_unassign(self, display_group_id, media_id, **kwargs):  # noqa: E501
        """Unassign one or more Media items from a Display Group  # noqa: E501

        Removes the provided from the Display Group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_group_media_unassign(display_group_id, media_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_group_id: The Display Group to unassign from (required)
        :param list[int] media_id: The Media Ids to unassign (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.display_group_media_unassign_with_http_info(display_group_id, media_id, **kwargs)  # noqa: E501
        else:
            (data) = self.display_group_media_unassign_with_http_info(display_group_id, media_id, **kwargs)  # noqa: E501
            return data

    def display_group_media_unassign_with_http_info(self, display_group_id, media_id, **kwargs):  # noqa: E501
        """Unassign one or more Media items from a Display Group  # noqa: E501

        Removes the provided from the Display Group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_group_media_unassign_with_http_info(display_group_id, media_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_group_id: The Display Group to unassign from (required)
        :param list[int] media_id: The Media Ids to unassign (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['display_group_id', 'media_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method display_group_media_unassign" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'display_group_id' is set
        if ('display_group_id' not in params or
                params['display_group_id'] is None):
            raise ValueError("Missing the required parameter `display_group_id` when calling `display_group_media_unassign`")  # noqa: E501
        # verify the required parameter 'media_id' is set
        if ('media_id' not in params or
                params['media_id'] is None):
            raise ValueError("Missing the required parameter `media_id` when calling `display_group_media_unassign`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'display_group_id' in params:
            path_params['displayGroupId'] = params['display_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'media_id' in params:
            form_params.append(('mediaId', params['media_id']))  # noqa: E501
            collection_formats['mediaId'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/displaygroup/{displayGroupId}/media/unassign', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def display_group_search(self, **kwargs):  # noqa: E501
        """Get Display Groups  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_group_search(async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_group_id: Filter by DisplayGroup Id
        :param str display_group: Filter by DisplayGroup Name
        :param int display_id: Filter by DisplayGroups containing a specific display
        :param int nested_display_id: Filter by DisplayGroups containing a specific display in there nesting
        :param str dynamic_criteria: Filter by DisplayGroups containing a specific dynamic criteria
        :param int is_display_specific: Filter by whether the Display Group belongs to a Display or is user created
        :param int for_schedule: Should the list be refined for only those groups the User can Schedule against?
        :return: list[DisplayGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.display_group_search_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.display_group_search_with_http_info(**kwargs)  # noqa: E501
            return data

    def display_group_search_with_http_info(self, **kwargs):  # noqa: E501
        """Get Display Groups  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_group_search_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_group_id: Filter by DisplayGroup Id
        :param str display_group: Filter by DisplayGroup Name
        :param int display_id: Filter by DisplayGroups containing a specific display
        :param int nested_display_id: Filter by DisplayGroups containing a specific display in there nesting
        :param str dynamic_criteria: Filter by DisplayGroups containing a specific dynamic criteria
        :param int is_display_specific: Filter by whether the Display Group belongs to a Display or is user created
        :param int for_schedule: Should the list be refined for only those groups the User can Schedule against?
        :return: list[DisplayGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['display_group_id', 'display_group', 'display_id', 'nested_display_id', 'dynamic_criteria', 'is_display_specific', 'for_schedule']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method display_group_search" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'display_group_id' in params:
            form_params.append(('displayGroupId', params['display_group_id']))  # noqa: E501
        if 'display_group' in params:
            form_params.append(('displayGroup', params['display_group']))  # noqa: E501
        if 'display_id' in params:
            form_params.append(('displayId', params['display_id']))  # noqa: E501
        if 'nested_display_id' in params:
            form_params.append(('nestedDisplayId', params['nested_display_id']))  # noqa: E501
        if 'dynamic_criteria' in params:
            form_params.append(('dynamicCriteria', params['dynamic_criteria']))  # noqa: E501
        if 'is_display_specific' in params:
            form_params.append(('isDisplaySpecific', params['is_display_specific']))  # noqa: E501
        if 'for_schedule' in params:
            form_params.append(('forSchedule', params['for_schedule']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/displaygroup', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DisplayGroup]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
