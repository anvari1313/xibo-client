# coding: utf-8

"""
    Xibo API

    Xibo CMS API  # noqa: E501

    OpenAPI spec version: 1.8.0
    Contact: info@xibo.org.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CommandApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def command_add(self, command, code, **kwargs):  # noqa: E501
        """Command Add  # noqa: E501

        Add a Command  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.command_add(command, code, async=True)
        >>> result = thread.get()

        :param async bool
        :param str command: The Command Name (required)
        :param str code: A unique code for this command (required)
        :param str description: A description for the command
        :return: Command
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.command_add_with_http_info(command, code, **kwargs)  # noqa: E501
        else:
            (data) = self.command_add_with_http_info(command, code, **kwargs)  # noqa: E501
            return data

    def command_add_with_http_info(self, command, code, **kwargs):  # noqa: E501
        """Command Add  # noqa: E501

        Add a Command  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.command_add_with_http_info(command, code, async=True)
        >>> result = thread.get()

        :param async bool
        :param str command: The Command Name (required)
        :param str code: A unique code for this command (required)
        :param str description: A description for the command
        :return: Command
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['command', 'code', 'description']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method command_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'command' is set
        if ('command' not in params or
                params['command'] is None):
            raise ValueError("Missing the required parameter `command` when calling `command_add`")  # noqa: E501
        # verify the required parameter 'code' is set
        if ('code' not in params or
                params['code'] is None):
            raise ValueError("Missing the required parameter `code` when calling `command_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'command' in params:
            form_params.append(('command', params['command']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'code' in params:
            form_params.append(('code', params['code']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/command', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Command',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def command_delete(self, command_id, **kwargs):  # noqa: E501
        """Delete Command  # noqa: E501

        Delete the provided command  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.command_delete(command_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int command_id: The Command Id to Delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.command_delete_with_http_info(command_id, **kwargs)  # noqa: E501
        else:
            (data) = self.command_delete_with_http_info(command_id, **kwargs)  # noqa: E501
            return data

    def command_delete_with_http_info(self, command_id, **kwargs):  # noqa: E501
        """Delete Command  # noqa: E501

        Delete the provided command  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.command_delete_with_http_info(command_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int command_id: The Command Id to Delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['command_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method command_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'command_id' is set
        if ('command_id' not in params or
                params['command_id'] is None):
            raise ValueError("Missing the required parameter `command_id` when calling `command_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'command_id' in params:
            path_params['commandId'] = params['command_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/command/{commandId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def command_edit(self, command_id, command, **kwargs):  # noqa: E501
        """Edit Command  # noqa: E501

        Edit the provided command  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.command_edit(command_id, command, async=True)
        >>> result = thread.get()

        :param async bool
        :param int command_id: The Command Id to Edit (required)
        :param str command: The Command Name (required)
        :param str description: A description for the command
        :return: Command
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.command_edit_with_http_info(command_id, command, **kwargs)  # noqa: E501
        else:
            (data) = self.command_edit_with_http_info(command_id, command, **kwargs)  # noqa: E501
            return data

    def command_edit_with_http_info(self, command_id, command, **kwargs):  # noqa: E501
        """Edit Command  # noqa: E501

        Edit the provided command  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.command_edit_with_http_info(command_id, command, async=True)
        >>> result = thread.get()

        :param async bool
        :param int command_id: The Command Id to Edit (required)
        :param str command: The Command Name (required)
        :param str description: A description for the command
        :return: Command
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['command_id', 'command', 'description']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method command_edit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'command_id' is set
        if ('command_id' not in params or
                params['command_id'] is None):
            raise ValueError("Missing the required parameter `command_id` when calling `command_edit`")  # noqa: E501
        # verify the required parameter 'command' is set
        if ('command' not in params or
                params['command'] is None):
            raise ValueError("Missing the required parameter `command` when calling `command_edit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'command_id' in params:
            path_params['commandId'] = params['command_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'command' in params:
            form_params.append(('command', params['command']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/command/{commandId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Command',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def command_search(self, **kwargs):  # noqa: E501
        """Command Search  # noqa: E501

        Search this users Commands  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.command_search(async=True)
        >>> result = thread.get()

        :param async bool
        :param int command_id: Filter by Command Id
        :param str command: Filter by Command Name
        :param str code: Filter by Command Code
        :return: list[Command]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.command_search_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.command_search_with_http_info(**kwargs)  # noqa: E501
            return data

    def command_search_with_http_info(self, **kwargs):  # noqa: E501
        """Command Search  # noqa: E501

        Search this users Commands  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.command_search_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int command_id: Filter by Command Id
        :param str command: Filter by Command Name
        :param str code: Filter by Command Code
        :return: list[Command]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['command_id', 'command', 'code']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method command_search" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'command_id' in params:
            form_params.append(('commandId', params['command_id']))  # noqa: E501
        if 'command' in params:
            form_params.append(('command', params['command']))  # noqa: E501
        if 'code' in params:
            form_params.append(('code', params['code']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/command', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Command]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
