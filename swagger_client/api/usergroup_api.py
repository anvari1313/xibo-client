# coding: utf-8

"""
    Xibo API

    Xibo CMS API  # noqa: E501

    OpenAPI spec version: 1.8.0
    Contact: info@xibo.org.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class UsergroupApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def user_group_add(self, group, **kwargs):  # noqa: E501
        """UserGroup Add  # noqa: E501

        Add User Group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.user_group_add(group, async=True)
        >>> result = thread.get()

        :param async bool
        :param str group: Name of the User Group (required)
        :param str library_quota: The quota that should be applied (KiB). Provide 0 for no quota
        :param int is_system_notification: Flag (0, 1), should members of this Group receive system notifications?
        :param int is_display_notification: Flag (0, 1), should members of this Group receive Display notifications for Displays they have permissions to see
        :return: list[UserGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.user_group_add_with_http_info(group, **kwargs)  # noqa: E501
        else:
            (data) = self.user_group_add_with_http_info(group, **kwargs)  # noqa: E501
            return data

    def user_group_add_with_http_info(self, group, **kwargs):  # noqa: E501
        """UserGroup Add  # noqa: E501

        Add User Group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.user_group_add_with_http_info(group, async=True)
        >>> result = thread.get()

        :param async bool
        :param str group: Name of the User Group (required)
        :param str library_quota: The quota that should be applied (KiB). Provide 0 for no quota
        :param int is_system_notification: Flag (0, 1), should members of this Group receive system notifications?
        :param int is_display_notification: Flag (0, 1), should members of this Group receive Display notifications for Displays they have permissions to see
        :return: list[UserGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group', 'library_quota', 'is_system_notification', 'is_display_notification']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_group_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group' is set
        if ('group' not in params or
                params['group'] is None):
            raise ValueError("Missing the required parameter `group` when calling `user_group_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'group' in params:
            form_params.append(('group', params['group']))  # noqa: E501
        if 'library_quota' in params:
            form_params.append(('libraryQuota', params['library_quota']))  # noqa: E501
        if 'is_system_notification' in params:
            form_params.append(('isSystemNotification', params['is_system_notification']))  # noqa: E501
        if 'is_display_notification' in params:
            form_params.append(('isDisplayNotification', params['is_display_notification']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/group', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[UserGroup]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_group_assign(self, user_group_id, user_id, **kwargs):  # noqa: E501
        """Assign User to User Group  # noqa: E501

        Assign User to User Group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.user_group_assign(user_group_id, user_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_group_id: ID of the user group to which assign the user (required)
        :param list[int] user_id: Array of userIDs to assign (required)
        :return: list[UserGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.user_group_assign_with_http_info(user_group_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_group_assign_with_http_info(user_group_id, user_id, **kwargs)  # noqa: E501
            return data

    def user_group_assign_with_http_info(self, user_group_id, user_id, **kwargs):  # noqa: E501
        """Assign User to User Group  # noqa: E501

        Assign User to User Group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.user_group_assign_with_http_info(user_group_id, user_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_group_id: ID of the user group to which assign the user (required)
        :param list[int] user_id: Array of userIDs to assign (required)
        :return: list[UserGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_group_id', 'user_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_group_assign" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_group_id' is set
        if ('user_group_id' not in params or
                params['user_group_id'] is None):
            raise ValueError("Missing the required parameter `user_group_id` when calling `user_group_assign`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `user_group_assign`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_group_id' in params:
            path_params['userGroupId'] = params['user_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'user_id' in params:
            form_params.append(('userId', params['user_id']))  # noqa: E501
            collection_formats['userId'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            'group/members/assign/{userGroupId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[UserGroup]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_group_copy(self, user_group_id, group, **kwargs):  # noqa: E501
        """Copy User Group  # noqa: E501

        Copy an user group, optionally copying the group members  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.user_group_copy(user_group_id, group, async=True)
        >>> result = thread.get()

        :param async bool
        :param int user_group_id: The User Group ID to Copy (required)
        :param str group: The Group Name (required)
        :param int copy_members: Flag indicating whether to copy group members
        :return: UserGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.user_group_copy_with_http_info(user_group_id, group, **kwargs)  # noqa: E501
        else:
            (data) = self.user_group_copy_with_http_info(user_group_id, group, **kwargs)  # noqa: E501
            return data

    def user_group_copy_with_http_info(self, user_group_id, group, **kwargs):  # noqa: E501
        """Copy User Group  # noqa: E501

        Copy an user group, optionally copying the group members  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.user_group_copy_with_http_info(user_group_id, group, async=True)
        >>> result = thread.get()

        :param async bool
        :param int user_group_id: The User Group ID to Copy (required)
        :param str group: The Group Name (required)
        :param int copy_members: Flag indicating whether to copy group members
        :return: UserGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_group_id', 'group', 'copy_members']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_group_copy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_group_id' is set
        if ('user_group_id' not in params or
                params['user_group_id'] is None):
            raise ValueError("Missing the required parameter `user_group_id` when calling `user_group_copy`")  # noqa: E501
        # verify the required parameter 'group' is set
        if ('group' not in params or
                params['group'] is None):
            raise ValueError("Missing the required parameter `group` when calling `user_group_copy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_group_id' in params:
            path_params['userGroupId'] = params['user_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'group' in params:
            form_params.append(('group', params['group']))  # noqa: E501
        if 'copy_members' in params:
            form_params.append(('copyMembers', params['copy_members']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/group/{userGroupId}/copy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserGroup',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_group_delete(self, user_group_id, **kwargs):  # noqa: E501
        """Delete User Group  # noqa: E501

        Delete User Group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.user_group_delete(user_group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int user_group_id: The user Group ID to Delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.user_group_delete_with_http_info(user_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_group_delete_with_http_info(user_group_id, **kwargs)  # noqa: E501
            return data

    def user_group_delete_with_http_info(self, user_group_id, **kwargs):  # noqa: E501
        """Delete User Group  # noqa: E501

        Delete User Group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.user_group_delete_with_http_info(user_group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int user_group_id: The user Group ID to Delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_group_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_group_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_group_id' is set
        if ('user_group_id' not in params or
                params['user_group_id'] is None):
            raise ValueError("Missing the required parameter `user_group_id` when calling `user_group_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_group_id' in params:
            path_params['userGroupId'] = params['user_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/group/{userGroupId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_group_edit(self, user_group_id, group, **kwargs):  # noqa: E501
        """UserGroup Edit  # noqa: E501

        Edit User Group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.user_group_edit(user_group_id, group, async=True)
        >>> result = thread.get()

        :param async bool
        :param int user_group_id: ID of the User Group (required)
        :param str group: Name of the User Group (required)
        :param str library_quota: The quota that should be applied (KiB). Provide 0 for no quota
        :param int is_system_notification: Flag (0, 1), should members of this Group receive system notifications?
        :param int is_display_notification: Flag (0, 1), should members of this Group receive Display notifications for Displays they have permissions to see
        :return: list[UserGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.user_group_edit_with_http_info(user_group_id, group, **kwargs)  # noqa: E501
        else:
            (data) = self.user_group_edit_with_http_info(user_group_id, group, **kwargs)  # noqa: E501
            return data

    def user_group_edit_with_http_info(self, user_group_id, group, **kwargs):  # noqa: E501
        """UserGroup Edit  # noqa: E501

        Edit User Group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.user_group_edit_with_http_info(user_group_id, group, async=True)
        >>> result = thread.get()

        :param async bool
        :param int user_group_id: ID of the User Group (required)
        :param str group: Name of the User Group (required)
        :param str library_quota: The quota that should be applied (KiB). Provide 0 for no quota
        :param int is_system_notification: Flag (0, 1), should members of this Group receive system notifications?
        :param int is_display_notification: Flag (0, 1), should members of this Group receive Display notifications for Displays they have permissions to see
        :return: list[UserGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_group_id', 'group', 'library_quota', 'is_system_notification', 'is_display_notification']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_group_edit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_group_id' is set
        if ('user_group_id' not in params or
                params['user_group_id'] is None):
            raise ValueError("Missing the required parameter `user_group_id` when calling `user_group_edit`")  # noqa: E501
        # verify the required parameter 'group' is set
        if ('group' not in params or
                params['group'] is None):
            raise ValueError("Missing the required parameter `group` when calling `user_group_edit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_group_id' in params:
            path_params['userGroupId'] = params['user_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'group' in params:
            form_params.append(('group', params['group']))  # noqa: E501
        if 'library_quota' in params:
            form_params.append(('libraryQuota', params['library_quota']))  # noqa: E501
        if 'is_system_notification' in params:
            form_params.append(('isSystemNotification', params['is_system_notification']))  # noqa: E501
        if 'is_display_notification' in params:
            form_params.append(('isDisplayNotification', params['is_display_notification']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/group/{userGroupId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[UserGroup]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_group_search(self, **kwargs):  # noqa: E501
        """UserGroup Search  # noqa: E501

        Search User Groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.user_group_search(async=True)
        >>> result = thread.get()

        :param async bool
        :param int user_group_id: Filter by UserGroup Id
        :param str user_group: Filter by UserGroup Name
        :return: list[UserGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.user_group_search_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_group_search_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_group_search_with_http_info(self, **kwargs):  # noqa: E501
        """UserGroup Search  # noqa: E501

        Search User Groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.user_group_search_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int user_group_id: Filter by UserGroup Id
        :param str user_group: Filter by UserGroup Name
        :return: list[UserGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_group_id', 'user_group']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_group_search" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'user_group_id' in params:
            form_params.append(('userGroupId', params['user_group_id']))  # noqa: E501
        if 'user_group' in params:
            form_params.append(('userGroup', params['user_group']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/group', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[UserGroup]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_group_unassign(self, user_group_id, user_id, **kwargs):  # noqa: E501
        """Unassign User from User Group  # noqa: E501

        Unassign User from User Group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.user_group_unassign(user_group_id, user_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_group_id: ID of the user group from which to unassign the user (required)
        :param list[int] user_id: Array of userIDs to unassign (required)
        :return: list[UserGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.user_group_unassign_with_http_info(user_group_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_group_unassign_with_http_info(user_group_id, user_id, **kwargs)  # noqa: E501
            return data

    def user_group_unassign_with_http_info(self, user_group_id, user_id, **kwargs):  # noqa: E501
        """Unassign User from User Group  # noqa: E501

        Unassign User from User Group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.user_group_unassign_with_http_info(user_group_id, user_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_group_id: ID of the user group from which to unassign the user (required)
        :param list[int] user_id: Array of userIDs to unassign (required)
        :return: list[UserGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_group_id', 'user_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_group_unassign" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_group_id' is set
        if ('user_group_id' not in params or
                params['user_group_id'] is None):
            raise ValueError("Missing the required parameter `user_group_id` when calling `user_group_unassign`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `user_group_unassign`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_group_id' in params:
            path_params['userGroupId'] = params['user_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'user_id' in params:
            form_params.append(('userId', params['user_id']))  # noqa: E501
            collection_formats['userId'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            'group/members/unassign/{userGroupId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[UserGroup]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
