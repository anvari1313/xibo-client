# coding: utf-8

"""
    Xibo API

    Xibo CMS API  # noqa: E501

    OpenAPI spec version: 1.8.0
    Contact: info@xibo.org.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DayPartApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def day_part_add(self, name, start_time, end_time, **kwargs):  # noqa: E501
        """Daypart Add  # noqa: E501

        Add a Daypart  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.day_part_add(name, start_time, end_time, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: The Daypart Name (required)
        :param str start_time: The start time for this day part (required)
        :param str end_time: The end time for this day part (required)
        :param str description: A description for the dayPart
        :param list[str] exception_days: String array of exception days
        :param list[str] exception_start_times: String array of exception start times to match the exception days
        :param list[str] exception_end_times: String array of exception end times to match the exception days
        :return: DayPart
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.day_part_add_with_http_info(name, start_time, end_time, **kwargs)  # noqa: E501
        else:
            (data) = self.day_part_add_with_http_info(name, start_time, end_time, **kwargs)  # noqa: E501
            return data

    def day_part_add_with_http_info(self, name, start_time, end_time, **kwargs):  # noqa: E501
        """Daypart Add  # noqa: E501

        Add a Daypart  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.day_part_add_with_http_info(name, start_time, end_time, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: The Daypart Name (required)
        :param str start_time: The start time for this day part (required)
        :param str end_time: The end time for this day part (required)
        :param str description: A description for the dayPart
        :param list[str] exception_days: String array of exception days
        :param list[str] exception_start_times: String array of exception start times to match the exception days
        :param list[str] exception_end_times: String array of exception end times to match the exception days
        :return: DayPart
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'start_time', 'end_time', 'description', 'exception_days', 'exception_start_times', 'exception_end_times']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method day_part_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `day_part_add`")  # noqa: E501
        # verify the required parameter 'start_time' is set
        if ('start_time' not in params or
                params['start_time'] is None):
            raise ValueError("Missing the required parameter `start_time` when calling `day_part_add`")  # noqa: E501
        # verify the required parameter 'end_time' is set
        if ('end_time' not in params or
                params['end_time'] is None):
            raise ValueError("Missing the required parameter `end_time` when calling `day_part_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'start_time' in params:
            form_params.append(('startTime', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            form_params.append(('endTime', params['end_time']))  # noqa: E501
        if 'exception_days' in params:
            form_params.append(('exceptionDays', params['exception_days']))  # noqa: E501
            collection_formats['exceptionDays'] = 'csv'  # noqa: E501
        if 'exception_start_times' in params:
            form_params.append(('exceptionStartTimes', params['exception_start_times']))  # noqa: E501
            collection_formats['exceptionStartTimes'] = 'csv'  # noqa: E501
        if 'exception_end_times' in params:
            form_params.append(('exceptionEndTimes', params['exception_end_times']))  # noqa: E501
            collection_formats['exceptionEndTimes'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/daypart', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DayPart',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def day_part_add_0(self, day_part_id, name, start_time, end_time, **kwargs):  # noqa: E501
        """Daypart Add  # noqa: E501

        Add a Daypart  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.day_part_add_0(day_part_id, name, start_time, end_time, async=True)
        >>> result = thread.get()

        :param async bool
        :param int day_part_id: The Daypart Id (required)
        :param str name: The Daypart Name (required)
        :param str start_time: The start time for this day part (required)
        :param str end_time: The end time for this day part (required)
        :param str description: A description for the dayPart
        :param list[str] exception_days: String array of exception days
        :param list[str] exception_start_times: String array of exception start times to match the exception days
        :param list[str] exception_end_times: String array of exception end times to match the exception days
        :return: DayPart
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.day_part_add_0_with_http_info(day_part_id, name, start_time, end_time, **kwargs)  # noqa: E501
        else:
            (data) = self.day_part_add_0_with_http_info(day_part_id, name, start_time, end_time, **kwargs)  # noqa: E501
            return data

    def day_part_add_0_with_http_info(self, day_part_id, name, start_time, end_time, **kwargs):  # noqa: E501
        """Daypart Add  # noqa: E501

        Add a Daypart  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.day_part_add_0_with_http_info(day_part_id, name, start_time, end_time, async=True)
        >>> result = thread.get()

        :param async bool
        :param int day_part_id: The Daypart Id (required)
        :param str name: The Daypart Name (required)
        :param str start_time: The start time for this day part (required)
        :param str end_time: The end time for this day part (required)
        :param str description: A description for the dayPart
        :param list[str] exception_days: String array of exception days
        :param list[str] exception_start_times: String array of exception start times to match the exception days
        :param list[str] exception_end_times: String array of exception end times to match the exception days
        :return: DayPart
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['day_part_id', 'name', 'start_time', 'end_time', 'description', 'exception_days', 'exception_start_times', 'exception_end_times']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method day_part_add_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'day_part_id' is set
        if ('day_part_id' not in params or
                params['day_part_id'] is None):
            raise ValueError("Missing the required parameter `day_part_id` when calling `day_part_add_0`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `day_part_add_0`")  # noqa: E501
        # verify the required parameter 'start_time' is set
        if ('start_time' not in params or
                params['start_time'] is None):
            raise ValueError("Missing the required parameter `start_time` when calling `day_part_add_0`")  # noqa: E501
        # verify the required parameter 'end_time' is set
        if ('end_time' not in params or
                params['end_time'] is None):
            raise ValueError("Missing the required parameter `end_time` when calling `day_part_add_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'day_part_id' in params:
            path_params['dayPartId'] = params['day_part_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'start_time' in params:
            form_params.append(('startTime', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            form_params.append(('endTime', params['end_time']))  # noqa: E501
        if 'exception_days' in params:
            form_params.append(('exceptionDays', params['exception_days']))  # noqa: E501
            collection_formats['exceptionDays'] = 'csv'  # noqa: E501
        if 'exception_start_times' in params:
            form_params.append(('exceptionStartTimes', params['exception_start_times']))  # noqa: E501
            collection_formats['exceptionStartTimes'] = 'csv'  # noqa: E501
        if 'exception_end_times' in params:
            form_params.append(('exceptionEndTimes', params['exception_end_times']))  # noqa: E501
            collection_formats['exceptionEndTimes'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/daypart/{dayPartId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DayPart',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def day_part_delete(self, day_part_id, **kwargs):  # noqa: E501
        """Delete DayPart  # noqa: E501

        Delete the provided dayPart  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.day_part_delete(day_part_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int day_part_id: The Daypart Id to Delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.day_part_delete_with_http_info(day_part_id, **kwargs)  # noqa: E501
        else:
            (data) = self.day_part_delete_with_http_info(day_part_id, **kwargs)  # noqa: E501
            return data

    def day_part_delete_with_http_info(self, day_part_id, **kwargs):  # noqa: E501
        """Delete DayPart  # noqa: E501

        Delete the provided dayPart  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.day_part_delete_with_http_info(day_part_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int day_part_id: The Daypart Id to Delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['day_part_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method day_part_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'day_part_id' is set
        if ('day_part_id' not in params or
                params['day_part_id'] is None):
            raise ValueError("Missing the required parameter `day_part_id` when calling `day_part_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'day_part_id' in params:
            path_params['dayPartId'] = params['day_part_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/daypart/{dayPartId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def day_part_search(self, **kwargs):  # noqa: E501
        """Daypart Search  # noqa: E501

        Search dayparts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.day_part_search(async=True)
        >>> result = thread.get()

        :param async bool
        :param int day_part_id: The dayPart ID to Search
        :param str name: The name of the dayPart to Search
        :param str embed: Embed related data such as exceptions
        :return: list[DayPart]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.day_part_search_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.day_part_search_with_http_info(**kwargs)  # noqa: E501
            return data

    def day_part_search_with_http_info(self, **kwargs):  # noqa: E501
        """Daypart Search  # noqa: E501

        Search dayparts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.day_part_search_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int day_part_id: The dayPart ID to Search
        :param str name: The name of the dayPart to Search
        :param str embed: Embed related data such as exceptions
        :return: list[DayPart]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['day_part_id', 'name', 'embed']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method day_part_search" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'day_part_id' in params:
            form_params.append(('dayPartId', params['day_part_id']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'embed' in params:
            form_params.append(('embed', params['embed']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/daypart', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DayPart]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
