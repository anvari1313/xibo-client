# coding: utf-8

"""
    Xibo API

    Xibo CMS API  # noqa: E501

    OpenAPI spec version: 1.8.0
    Contact: info@xibo.org.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DisplayprofileApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def display_profile_add(self, name, type, is_default, **kwargs):  # noqa: E501
        """Add Display Profile  # noqa: E501

        Add a Display Profile  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_profile_add(name, type, is_default, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: The Name of the Display Profile (required)
        :param str type: The Client Type this Profile will apply to (required)
        :param int is_default: Flag indicating if this is the default profile for the client type (required)
        :return: DisplayProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.display_profile_add_with_http_info(name, type, is_default, **kwargs)  # noqa: E501
        else:
            (data) = self.display_profile_add_with_http_info(name, type, is_default, **kwargs)  # noqa: E501
            return data

    def display_profile_add_with_http_info(self, name, type, is_default, **kwargs):  # noqa: E501
        """Add Display Profile  # noqa: E501

        Add a Display Profile  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_profile_add_with_http_info(name, type, is_default, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: The Name of the Display Profile (required)
        :param str type: The Client Type this Profile will apply to (required)
        :param int is_default: Flag indicating if this is the default profile for the client type (required)
        :return: DisplayProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'is_default']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method display_profile_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `display_profile_add`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `display_profile_add`")  # noqa: E501
        # verify the required parameter 'is_default' is set
        if ('is_default' not in params or
                params['is_default'] is None):
            raise ValueError("Missing the required parameter `is_default` when calling `display_profile_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'type' in params:
            form_params.append(('type', params['type']))  # noqa: E501
        if 'is_default' in params:
            form_params.append(('isDefault', params['is_default']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/displayprofile', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DisplayProfile',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def display_profile_delete(self, display_profile_id, **kwargs):  # noqa: E501
        """Delete Display Profile  # noqa: E501

        Delete an existing Display Profile  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_profile_delete(display_profile_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_profile_id: The Display Profile ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.display_profile_delete_with_http_info(display_profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.display_profile_delete_with_http_info(display_profile_id, **kwargs)  # noqa: E501
            return data

    def display_profile_delete_with_http_info(self, display_profile_id, **kwargs):  # noqa: E501
        """Delete Display Profile  # noqa: E501

        Delete an existing Display Profile  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_profile_delete_with_http_info(display_profile_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_profile_id: The Display Profile ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['display_profile_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method display_profile_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'display_profile_id' is set
        if ('display_profile_id' not in params or
                params['display_profile_id'] is None):
            raise ValueError("Missing the required parameter `display_profile_id` when calling `display_profile_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'display_profile_id' in params:
            path_params['displayProfileId'] = params['display_profile_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/displayprofile/{displayProfileId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def display_profile_edit(self, display_profile_id, name, type, is_default, **kwargs):  # noqa: E501
        """Edit Display Profile  # noqa: E501

        Edit a Display Profile  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_profile_edit(display_profile_id, name, type, is_default, async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_profile_id: The Display Profile ID (required)
        :param str name: The Name of the Display Profile (required)
        :param str type: The Client Type this Profile will apply to (required)
        :param int is_default: Flag indicating if this is the default profile for the client type (required)
        :return: DisplayProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.display_profile_edit_with_http_info(display_profile_id, name, type, is_default, **kwargs)  # noqa: E501
        else:
            (data) = self.display_profile_edit_with_http_info(display_profile_id, name, type, is_default, **kwargs)  # noqa: E501
            return data

    def display_profile_edit_with_http_info(self, display_profile_id, name, type, is_default, **kwargs):  # noqa: E501
        """Edit Display Profile  # noqa: E501

        Edit a Display Profile  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_profile_edit_with_http_info(display_profile_id, name, type, is_default, async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_profile_id: The Display Profile ID (required)
        :param str name: The Name of the Display Profile (required)
        :param str type: The Client Type this Profile will apply to (required)
        :param int is_default: Flag indicating if this is the default profile for the client type (required)
        :return: DisplayProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['display_profile_id', 'name', 'type', 'is_default']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method display_profile_edit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'display_profile_id' is set
        if ('display_profile_id' not in params or
                params['display_profile_id'] is None):
            raise ValueError("Missing the required parameter `display_profile_id` when calling `display_profile_edit`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `display_profile_edit`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `display_profile_edit`")  # noqa: E501
        # verify the required parameter 'is_default' is set
        if ('is_default' not in params or
                params['is_default'] is None):
            raise ValueError("Missing the required parameter `is_default` when calling `display_profile_edit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'display_profile_id' in params:
            path_params['displayProfileId'] = params['display_profile_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'type' in params:
            form_params.append(('type', params['type']))  # noqa: E501
        if 'is_default' in params:
            form_params.append(('isDefault', params['is_default']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/displayprofile/{displayProfileId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DisplayProfile',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def display_profile_search(self, **kwargs):  # noqa: E501
        """Display Profile Search  # noqa: E501

        Search this users Display Profiles  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_profile_search(async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_profile_id: Filter by DisplayProfile Id
        :param str display_profile: Filter by DisplayProfile Name
        :param str type: Filter by DisplayProfile Type (windows|android)
        :return: list[DisplayProfile]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.display_profile_search_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.display_profile_search_with_http_info(**kwargs)  # noqa: E501
            return data

    def display_profile_search_with_http_info(self, **kwargs):  # noqa: E501
        """Display Profile Search  # noqa: E501

        Search this users Display Profiles  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.display_profile_search_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int display_profile_id: Filter by DisplayProfile Id
        :param str display_profile: Filter by DisplayProfile Name
        :param str type: Filter by DisplayProfile Type (windows|android)
        :return: list[DisplayProfile]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['display_profile_id', 'display_profile', 'type']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method display_profile_search" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'display_profile_id' in params:
            form_params.append(('displayProfileId', params['display_profile_id']))  # noqa: E501
        if 'display_profile' in params:
            form_params.append(('displayProfile', params['display_profile']))  # noqa: E501
        if 'type' in params:
            form_params.append(('type', params['type']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/displayprofile', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DisplayProfile]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
