# coding: utf-8

"""
    Xibo API

    Xibo CMS API  # noqa: E501

    OpenAPI spec version: 1.8.0
    Contact: info@xibo.org.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PlaylistApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def playlist_library_assign(self, playlist_id, media, **kwargs):  # noqa: E501
        """Assign Library Items  # noqa: E501

        Assign Media from the Library to this Playlist  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.playlist_library_assign(playlist_id, media, async=True)
        >>> result = thread.get()

        :param async bool
        :param int playlist_id: The Playlist ID to assign to (required)
        :param list[int] media: Array of Media IDs to assign (required)
        :param int duration: Optional duration for all Media in this assignment to use on the Widget
        :param int use_duration: Optional flag indicating whether to enable the useDuration field
        :return: Playlist
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.playlist_library_assign_with_http_info(playlist_id, media, **kwargs)  # noqa: E501
        else:
            (data) = self.playlist_library_assign_with_http_info(playlist_id, media, **kwargs)  # noqa: E501
            return data

    def playlist_library_assign_with_http_info(self, playlist_id, media, **kwargs):  # noqa: E501
        """Assign Library Items  # noqa: E501

        Assign Media from the Library to this Playlist  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.playlist_library_assign_with_http_info(playlist_id, media, async=True)
        >>> result = thread.get()

        :param async bool
        :param int playlist_id: The Playlist ID to assign to (required)
        :param list[int] media: Array of Media IDs to assign (required)
        :param int duration: Optional duration for all Media in this assignment to use on the Widget
        :param int use_duration: Optional flag indicating whether to enable the useDuration field
        :return: Playlist
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['playlist_id', 'media', 'duration', 'use_duration']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method playlist_library_assign" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'playlist_id' is set
        if ('playlist_id' not in params or
                params['playlist_id'] is None):
            raise ValueError("Missing the required parameter `playlist_id` when calling `playlist_library_assign`")  # noqa: E501
        # verify the required parameter 'media' is set
        if ('media' not in params or
                params['media'] is None):
            raise ValueError("Missing the required parameter `media` when calling `playlist_library_assign`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'playlist_id' in params:
            path_params['playlistId'] = params['playlist_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'media' in params:
            form_params.append(('media', params['media']))  # noqa: E501
            collection_formats['media'] = 'csv'  # noqa: E501
        if 'duration' in params:
            form_params.append(('duration', params['duration']))  # noqa: E501
        if 'use_duration' in params:
            form_params.append(('useDuration', params['use_duration']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/playlist/library/assign/{playlistId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Playlist',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def playlist_order(self, playlist_id, widgets, **kwargs):  # noqa: E501
        """Order Widgets  # noqa: E501

        Set the order of widgets in the Playlist  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.playlist_order(playlist_id, widgets, async=True)
        >>> result = thread.get()

        :param async bool
        :param int playlist_id: The Playlist ID to Order (required)
        :param list[PlaylistWidgetList] widgets: Array of widgetIds and positions - all widgetIds present in the playlist need to be passed in the call with their positions (required)
        :return: Playlist
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.playlist_order_with_http_info(playlist_id, widgets, **kwargs)  # noqa: E501
        else:
            (data) = self.playlist_order_with_http_info(playlist_id, widgets, **kwargs)  # noqa: E501
            return data

    def playlist_order_with_http_info(self, playlist_id, widgets, **kwargs):  # noqa: E501
        """Order Widgets  # noqa: E501

        Set the order of widgets in the Playlist  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.playlist_order_with_http_info(playlist_id, widgets, async=True)
        >>> result = thread.get()

        :param async bool
        :param int playlist_id: The Playlist ID to Order (required)
        :param list[PlaylistWidgetList] widgets: Array of widgetIds and positions - all widgetIds present in the playlist need to be passed in the call with their positions (required)
        :return: Playlist
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['playlist_id', 'widgets']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method playlist_order" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'playlist_id' is set
        if ('playlist_id' not in params or
                params['playlist_id'] is None):
            raise ValueError("Missing the required parameter `playlist_id` when calling `playlist_order`")  # noqa: E501
        # verify the required parameter 'widgets' is set
        if ('widgets' not in params or
                params['widgets'] is None):
            raise ValueError("Missing the required parameter `widgets` when calling `playlist_order`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'playlist_id' in params:
            path_params['playlistId'] = params['playlist_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'widgets' in params:
            form_params.append(('widgets', params['widgets']))  # noqa: E501
            collection_formats['widgets'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/playlist/order/{playlistId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Playlist',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def playlist_search(self, playlist_id, **kwargs):  # noqa: E501
        """Playlist Widget Search  # noqa: E501

        Search widgets on a Playlist  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.playlist_search(playlist_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int playlist_id: The Playlist ID to Search (required)
        :param int widget_id: The widget ID to Search
        :return: list[Widget]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.playlist_search_with_http_info(playlist_id, **kwargs)  # noqa: E501
        else:
            (data) = self.playlist_search_with_http_info(playlist_id, **kwargs)  # noqa: E501
            return data

    def playlist_search_with_http_info(self, playlist_id, **kwargs):  # noqa: E501
        """Playlist Widget Search  # noqa: E501

        Search widgets on a Playlist  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.playlist_search_with_http_info(playlist_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int playlist_id: The Playlist ID to Search (required)
        :param int widget_id: The widget ID to Search
        :return: list[Widget]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['playlist_id', 'widget_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method playlist_search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'playlist_id' is set
        if ('playlist_id' not in params or
                params['playlist_id'] is None):
            raise ValueError("Missing the required parameter `playlist_id` when calling `playlist_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'playlist_id' in params:
            form_params.append(('playlistId', params['playlist_id']))  # noqa: E501
        if 'widget_id' in params:
            form_params.append(('widgetId', params['widget_id']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/playlist/widget', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Widget]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
