# coding: utf-8

"""
    Xibo API

    Xibo CMS API  # noqa: E501

    OpenAPI spec version: 1.8.0
    Contact: info@xibo.org.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ResolutionApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def resolution_add(self, resolution, width, height, **kwargs):  # noqa: E501
        """Add Resolution  # noqa: E501

        Add new Resolution  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resolution_add(resolution, width, height, async=True)
        >>> result = thread.get()

        :param async bool
        :param str resolution: A name for the Resolution (required)
        :param int width: The Display Width of the Resolution (required)
        :param int height: The Display Height of the Resolution (required)
        :return: Resolution
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resolution_add_with_http_info(resolution, width, height, **kwargs)  # noqa: E501
        else:
            (data) = self.resolution_add_with_http_info(resolution, width, height, **kwargs)  # noqa: E501
            return data

    def resolution_add_with_http_info(self, resolution, width, height, **kwargs):  # noqa: E501
        """Add Resolution  # noqa: E501

        Add new Resolution  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resolution_add_with_http_info(resolution, width, height, async=True)
        >>> result = thread.get()

        :param async bool
        :param str resolution: A name for the Resolution (required)
        :param int width: The Display Width of the Resolution (required)
        :param int height: The Display Height of the Resolution (required)
        :return: Resolution
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['resolution', 'width', 'height']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resolution_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'resolution' is set
        if ('resolution' not in params or
                params['resolution'] is None):
            raise ValueError("Missing the required parameter `resolution` when calling `resolution_add`")  # noqa: E501
        # verify the required parameter 'width' is set
        if ('width' not in params or
                params['width'] is None):
            raise ValueError("Missing the required parameter `width` when calling `resolution_add`")  # noqa: E501
        # verify the required parameter 'height' is set
        if ('height' not in params or
                params['height'] is None):
            raise ValueError("Missing the required parameter `height` when calling `resolution_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'resolution' in params:
            form_params.append(('resolution', params['resolution']))  # noqa: E501
        if 'width' in params:
            form_params.append(('width', params['width']))  # noqa: E501
        if 'height' in params:
            form_params.append(('height', params['height']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/resolution', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Resolution',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resolution_delete(self, resolution_id, **kwargs):  # noqa: E501
        """Delete Resolution  # noqa: E501

        Delete Resolution  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resolution_delete(resolution_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int resolution_id: The Resolution ID to Delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resolution_delete_with_http_info(resolution_id, **kwargs)  # noqa: E501
        else:
            (data) = self.resolution_delete_with_http_info(resolution_id, **kwargs)  # noqa: E501
            return data

    def resolution_delete_with_http_info(self, resolution_id, **kwargs):  # noqa: E501
        """Delete Resolution  # noqa: E501

        Delete Resolution  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resolution_delete_with_http_info(resolution_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int resolution_id: The Resolution ID to Delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['resolution_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resolution_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'resolution_id' is set
        if ('resolution_id' not in params or
                params['resolution_id'] is None):
            raise ValueError("Missing the required parameter `resolution_id` when calling `resolution_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'resolution_id' in params:
            path_params['resolutionId'] = params['resolution_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/resolution/{resolutionId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resolution_edit(self, resolution_id, resolution, width, height, **kwargs):  # noqa: E501
        """Edit Resolution  # noqa: E501

        Edit new Resolution  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resolution_edit(resolution_id, resolution, width, height, async=True)
        >>> result = thread.get()

        :param async bool
        :param int resolution_id: The Resolution ID to Edit (required)
        :param str resolution: A name for the Resolution (required)
        :param int width: The Display Width of the Resolution (required)
        :param int height: The Display Height of the Resolution (required)
        :return: Resolution
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resolution_edit_with_http_info(resolution_id, resolution, width, height, **kwargs)  # noqa: E501
        else:
            (data) = self.resolution_edit_with_http_info(resolution_id, resolution, width, height, **kwargs)  # noqa: E501
            return data

    def resolution_edit_with_http_info(self, resolution_id, resolution, width, height, **kwargs):  # noqa: E501
        """Edit Resolution  # noqa: E501

        Edit new Resolution  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resolution_edit_with_http_info(resolution_id, resolution, width, height, async=True)
        >>> result = thread.get()

        :param async bool
        :param int resolution_id: The Resolution ID to Edit (required)
        :param str resolution: A name for the Resolution (required)
        :param int width: The Display Width of the Resolution (required)
        :param int height: The Display Height of the Resolution (required)
        :return: Resolution
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['resolution_id', 'resolution', 'width', 'height']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resolution_edit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'resolution_id' is set
        if ('resolution_id' not in params or
                params['resolution_id'] is None):
            raise ValueError("Missing the required parameter `resolution_id` when calling `resolution_edit`")  # noqa: E501
        # verify the required parameter 'resolution' is set
        if ('resolution' not in params or
                params['resolution'] is None):
            raise ValueError("Missing the required parameter `resolution` when calling `resolution_edit`")  # noqa: E501
        # verify the required parameter 'width' is set
        if ('width' not in params or
                params['width'] is None):
            raise ValueError("Missing the required parameter `width` when calling `resolution_edit`")  # noqa: E501
        # verify the required parameter 'height' is set
        if ('height' not in params or
                params['height'] is None):
            raise ValueError("Missing the required parameter `height` when calling `resolution_edit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'resolution_id' in params:
            path_params['resolutionId'] = params['resolution_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'resolution' in params:
            form_params.append(('resolution', params['resolution']))  # noqa: E501
        if 'width' in params:
            form_params.append(('width', params['width']))  # noqa: E501
        if 'height' in params:
            form_params.append(('height', params['height']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/resolution/{resolutionId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Resolution',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resolution_search(self, **kwargs):  # noqa: E501
        """Resolution Search  # noqa: E501

        Search Resolutions this user has access to  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resolution_search(async=True)
        >>> result = thread.get()

        :param async bool
        :param int resolution_id: Filter by Resolution Id
        :param str resolution: Filter by Resolution Name
        :param int enabled: Filter by Enabled
        :return: list[Resolution]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resolution_search_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.resolution_search_with_http_info(**kwargs)  # noqa: E501
            return data

    def resolution_search_with_http_info(self, **kwargs):  # noqa: E501
        """Resolution Search  # noqa: E501

        Search Resolutions this user has access to  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resolution_search_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int resolution_id: Filter by Resolution Id
        :param str resolution: Filter by Resolution Name
        :param int enabled: Filter by Enabled
        :return: list[Resolution]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['resolution_id', 'resolution', 'enabled']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resolution_search" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'resolution_id' in params:
            form_params.append(('resolutionId', params['resolution_id']))  # noqa: E501
        if 'resolution' in params:
            form_params.append(('resolution', params['resolution']))  # noqa: E501
        if 'enabled' in params:
            form_params.append(('enabled', params['enabled']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/resolution', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Resolution]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
