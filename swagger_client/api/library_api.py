# coding: utf-8

"""
    Xibo API

    Xibo CMS API  # noqa: E501

    OpenAPI spec version: 1.8.0
    Contact: info@xibo.org.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class LibraryApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def library_add(self, files, **kwargs):  # noqa: E501
        """Add Media  # noqa: E501

        Add Media to the Library  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.library_add(files, async=True)
        >>> result = thread.get()

        :param async bool
        :param file files: The Uploaded File (required)
        :param str name: Optional Media Name
        :param int old_media_id: Id of an existing media file which should be replaced with the new upload
        :param int update_in_layouts: Flag (0, 1), set to 1 to update this media in all layouts (use with oldMediaId) 
        :param int delete_old_revisions: Flag (0 , 1), to either remove or leave the old file revisions (use with oldMediaId)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.library_add_with_http_info(files, **kwargs)  # noqa: E501
        else:
            (data) = self.library_add_with_http_info(files, **kwargs)  # noqa: E501
            return data

    def library_add_with_http_info(self, files, **kwargs):  # noqa: E501
        """Add Media  # noqa: E501

        Add Media to the Library  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.library_add_with_http_info(files, async=True)
        >>> result = thread.get()

        :param async bool
        :param file files: The Uploaded File (required)
        :param str name: Optional Media Name
        :param int old_media_id: Id of an existing media file which should be replaced with the new upload
        :param int update_in_layouts: Flag (0, 1), set to 1 to update this media in all layouts (use with oldMediaId) 
        :param int delete_old_revisions: Flag (0 , 1), to either remove or leave the old file revisions (use with oldMediaId)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['files', 'name', 'old_media_id', 'update_in_layouts', 'delete_old_revisions']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method library_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'files' is set
        if ('files' not in params or
                params['files'] is None):
            raise ValueError("Missing the required parameter `files` when calling `library_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'files' in params:
            local_var_files['files'] = params['files']  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'old_media_id' in params:
            form_params.append(('oldMediaId', params['old_media_id']))  # noqa: E501
        if 'update_in_layouts' in params:
            form_params.append(('updateInLayouts', params['update_in_layouts']))  # noqa: E501
        if 'delete_old_revisions' in params:
            form_params.append(('deleteOldRevisions', params['delete_old_revisions']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/library', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def library_delete(self, media_id, force_delete, **kwargs):  # noqa: E501
        """Delete Media  # noqa: E501

        Delete Media from the Library  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.library_delete(media_id, force_delete, async=True)
        >>> result = thread.get()

        :param async bool
        :param int media_id: The Media ID to Delete (required)
        :param int force_delete: If the media item has been used should it be force removed from items that uses it? (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.library_delete_with_http_info(media_id, force_delete, **kwargs)  # noqa: E501
        else:
            (data) = self.library_delete_with_http_info(media_id, force_delete, **kwargs)  # noqa: E501
            return data

    def library_delete_with_http_info(self, media_id, force_delete, **kwargs):  # noqa: E501
        """Delete Media  # noqa: E501

        Delete Media from the Library  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.library_delete_with_http_info(media_id, force_delete, async=True)
        >>> result = thread.get()

        :param async bool
        :param int media_id: The Media ID to Delete (required)
        :param int force_delete: If the media item has been used should it be force removed from items that uses it? (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['media_id', 'force_delete']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method library_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'media_id' is set
        if ('media_id' not in params or
                params['media_id'] is None):
            raise ValueError("Missing the required parameter `media_id` when calling `library_delete`")  # noqa: E501
        # verify the required parameter 'force_delete' is set
        if ('force_delete' not in params or
                params['force_delete'] is None):
            raise ValueError("Missing the required parameter `force_delete` when calling `library_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'media_id' in params:
            path_params['mediaId'] = params['media_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'force_delete' in params:
            form_params.append(('forceDelete', params['force_delete']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/library/{mediaId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def library_download(self, media_id, type, **kwargs):  # noqa: E501
        """Download Media  # noqa: E501

        Download a Media file from the Library  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.library_download(media_id, type, async=True)
        >>> result = thread.get()

        :param async bool
        :param int media_id: The Media ID to Download (required)
        :param str type: The Module Type of the Download (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.library_download_with_http_info(media_id, type, **kwargs)  # noqa: E501
        else:
            (data) = self.library_download_with_http_info(media_id, type, **kwargs)  # noqa: E501
            return data

    def library_download_with_http_info(self, media_id, type, **kwargs):  # noqa: E501
        """Download Media  # noqa: E501

        Download a Media file from the Library  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.library_download_with_http_info(media_id, type, async=True)
        >>> result = thread.get()

        :param async bool
        :param int media_id: The Media ID to Download (required)
        :param str type: The Module Type of the Download (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['media_id', 'type']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method library_download" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'media_id' is set
        if ('media_id' not in params or
                params['media_id'] is None):
            raise ValueError("Missing the required parameter `media_id` when calling `library_download`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `library_download`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'media_id' in params:
            path_params['mediaId'] = params['media_id']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/library/download/{mediaId}/{type}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def library_edit(self, media_id, name, duration, retired, **kwargs):  # noqa: E501
        """Edit Media  # noqa: E501

        Edit a Media Item in the Library  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.library_edit(media_id, name, duration, retired, async=True)
        >>> result = thread.get()

        :param async bool
        :param int media_id: The Media ID to Edit (required)
        :param str name: Media Item Name (required)
        :param int duration: The duration in seconds for this Media Item (required)
        :param int retired: Flag indicating if this media is retired (required)
        :param str tags: Comma separated list of Tags
        :param int update_in_layouts: Flag indicating whether to update the duration in all Layouts the Media is assigned to
        :return: Media
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.library_edit_with_http_info(media_id, name, duration, retired, **kwargs)  # noqa: E501
        else:
            (data) = self.library_edit_with_http_info(media_id, name, duration, retired, **kwargs)  # noqa: E501
            return data

    def library_edit_with_http_info(self, media_id, name, duration, retired, **kwargs):  # noqa: E501
        """Edit Media  # noqa: E501

        Edit a Media Item in the Library  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.library_edit_with_http_info(media_id, name, duration, retired, async=True)
        >>> result = thread.get()

        :param async bool
        :param int media_id: The Media ID to Edit (required)
        :param str name: Media Item Name (required)
        :param int duration: The duration in seconds for this Media Item (required)
        :param int retired: Flag indicating if this media is retired (required)
        :param str tags: Comma separated list of Tags
        :param int update_in_layouts: Flag indicating whether to update the duration in all Layouts the Media is assigned to
        :return: Media
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['media_id', 'name', 'duration', 'retired', 'tags', 'update_in_layouts']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method library_edit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'media_id' is set
        if ('media_id' not in params or
                params['media_id'] is None):
            raise ValueError("Missing the required parameter `media_id` when calling `library_edit`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `library_edit`")  # noqa: E501
        # verify the required parameter 'duration' is set
        if ('duration' not in params or
                params['duration'] is None):
            raise ValueError("Missing the required parameter `duration` when calling `library_edit`")  # noqa: E501
        # verify the required parameter 'retired' is set
        if ('retired' not in params or
                params['retired'] is None):
            raise ValueError("Missing the required parameter `retired` when calling `library_edit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'media_id' in params:
            path_params['mediaId'] = params['media_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'duration' in params:
            form_params.append(('duration', params['duration']))  # noqa: E501
        if 'retired' in params:
            form_params.append(('retired', params['retired']))  # noqa: E501
        if 'tags' in params:
            form_params.append(('tags', params['tags']))  # noqa: E501
        if 'update_in_layouts' in params:
            form_params.append(('updateInLayouts', params['update_in_layouts']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/library/{mediaId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Media',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def library_search(self, **kwargs):  # noqa: E501
        """Library Search  # noqa: E501

        Search the Library for this user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.library_search(async=True)
        >>> result = thread.get()

        :param async bool
        :param int media_id: Filter by Media Id
        :param str media: Filter by Media Name
        :param str type: Filter by Media Type
        :param int owner_id: Filter by Owner Id
        :param int retired: Filter by Retired
        :param str tags: Filter by Tags - comma seperated
        :param int exact_tags: A flag indicating whether to treat the tags filter as an exact match
        :param str duration: Filter by Duration - a number or less-than,greater-than,less-than-equal or great-than-equal followed by a | followed by a number
        :param str file_size: Filter by File Size - a number or less-than,greater-than,less-than-equal or great-than-equal followed by a | followed by a number
        :param int owner_user_group_id: Filter by users in this UserGroupId
        :return: list[Media]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.library_search_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.library_search_with_http_info(**kwargs)  # noqa: E501
            return data

    def library_search_with_http_info(self, **kwargs):  # noqa: E501
        """Library Search  # noqa: E501

        Search the Library for this user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.library_search_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int media_id: Filter by Media Id
        :param str media: Filter by Media Name
        :param str type: Filter by Media Type
        :param int owner_id: Filter by Owner Id
        :param int retired: Filter by Retired
        :param str tags: Filter by Tags - comma seperated
        :param int exact_tags: A flag indicating whether to treat the tags filter as an exact match
        :param str duration: Filter by Duration - a number or less-than,greater-than,less-than-equal or great-than-equal followed by a | followed by a number
        :param str file_size: Filter by File Size - a number or less-than,greater-than,less-than-equal or great-than-equal followed by a | followed by a number
        :param int owner_user_group_id: Filter by users in this UserGroupId
        :return: list[Media]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['media_id', 'media', 'type', 'owner_id', 'retired', 'tags', 'exact_tags', 'duration', 'file_size', 'owner_user_group_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method library_search" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'media_id' in params:
            form_params.append(('mediaId', params['media_id']))  # noqa: E501
        if 'media' in params:
            form_params.append(('media', params['media']))  # noqa: E501
        if 'type' in params:
            form_params.append(('type', params['type']))  # noqa: E501
        if 'owner_id' in params:
            form_params.append(('ownerId', params['owner_id']))  # noqa: E501
        if 'retired' in params:
            form_params.append(('retired', params['retired']))  # noqa: E501
        if 'tags' in params:
            form_params.append(('tags', params['tags']))  # noqa: E501
        if 'exact_tags' in params:
            form_params.append(('exactTags', params['exact_tags']))  # noqa: E501
        if 'duration' in params:
            form_params.append(('duration', params['duration']))  # noqa: E501
        if 'file_size' in params:
            form_params.append(('fileSize', params['file_size']))  # noqa: E501
        if 'owner_user_group_id' in params:
            form_params.append(('ownerUserGroupId', params['owner_user_group_id']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/library', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Media]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def library_tidy(self, **kwargs):  # noqa: E501
        """Tidy Library  # noqa: E501

        Routine tidy of the library, removing unused files.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.library_tidy(async=True)
        >>> result = thread.get()

        :param async bool
        :param int tidy_generic_files: Also delete generic files?
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.library_tidy_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.library_tidy_with_http_info(**kwargs)  # noqa: E501
            return data

    def library_tidy_with_http_info(self, **kwargs):  # noqa: E501
        """Tidy Library  # noqa: E501

        Routine tidy of the library, removing unused files.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.library_tidy_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int tidy_generic_files: Also delete generic files?
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tidy_generic_files']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method library_tidy" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'tidy_generic_files' in params:
            form_params.append(('tidyGenericFiles', params['tidy_generic_files']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/library/tidy', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def library_usage_layouts_report(self, **kwargs):  # noqa: E501
        """Get Library Item Usage Report for Layouts  # noqa: E501

        Get the records for the library item usage report for Layouts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.library_usage_layouts_report(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.library_usage_layouts_report_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.library_usage_layouts_report_with_http_info(**kwargs)  # noqa: E501
            return data

    def library_usage_layouts_report_with_http_info(self, **kwargs):  # noqa: E501
        """Get Library Item Usage Report for Layouts  # noqa: E501

        Get the records for the library item usage report for Layouts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.library_usage_layouts_report_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method library_usage_layouts_report" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/library/usage/layouts/{mediaId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def library_usage_report(self, **kwargs):  # noqa: E501
        """Get Library Item Usage Report  # noqa: E501

        Get the records for the library item usage report  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.library_usage_report(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.library_usage_report_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.library_usage_report_with_http_info(**kwargs)  # noqa: E501
            return data

    def library_usage_report_with_http_info(self, **kwargs):  # noqa: E501
        """Get Library Item Usage Report  # noqa: E501

        Get the records for the library item usage report  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.library_usage_report_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method library_usage_report" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/library/usage/{mediaId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def media_tag(self, media_id, tag, **kwargs):  # noqa: E501
        """Tag Media  # noqa: E501

        Tag a Media with one or more tags  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.media_tag(media_id, tag, async=True)
        >>> result = thread.get()

        :param async bool
        :param int media_id: The Media Id to Tag (required)
        :param list[str] tag: An array of tags (required)
        :return: Media
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.media_tag_with_http_info(media_id, tag, **kwargs)  # noqa: E501
        else:
            (data) = self.media_tag_with_http_info(media_id, tag, **kwargs)  # noqa: E501
            return data

    def media_tag_with_http_info(self, media_id, tag, **kwargs):  # noqa: E501
        """Tag Media  # noqa: E501

        Tag a Media with one or more tags  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.media_tag_with_http_info(media_id, tag, async=True)
        >>> result = thread.get()

        :param async bool
        :param int media_id: The Media Id to Tag (required)
        :param list[str] tag: An array of tags (required)
        :return: Media
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['media_id', 'tag']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method media_tag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'media_id' is set
        if ('media_id' not in params or
                params['media_id'] is None):
            raise ValueError("Missing the required parameter `media_id` when calling `media_tag`")  # noqa: E501
        # verify the required parameter 'tag' is set
        if ('tag' not in params or
                params['tag'] is None):
            raise ValueError("Missing the required parameter `tag` when calling `media_tag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'media_id' in params:
            path_params['mediaId'] = params['media_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'tag' in params:
            form_params.append(('tag', params['tag']))  # noqa: E501
            collection_formats['tag'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/library/{mediaId}/tag', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Media',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def media_untag(self, media_id, tag, **kwargs):  # noqa: E501
        """Untag Media  # noqa: E501

        Untag a Media with one or more tags  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.media_untag(media_id, tag, async=True)
        >>> result = thread.get()

        :param async bool
        :param int media_id: The Media Id to Untag (required)
        :param list[str] tag: An array of tags (required)
        :return: Media
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.media_untag_with_http_info(media_id, tag, **kwargs)  # noqa: E501
        else:
            (data) = self.media_untag_with_http_info(media_id, tag, **kwargs)  # noqa: E501
            return data

    def media_untag_with_http_info(self, media_id, tag, **kwargs):  # noqa: E501
        """Untag Media  # noqa: E501

        Untag a Media with one or more tags  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.media_untag_with_http_info(media_id, tag, async=True)
        >>> result = thread.get()

        :param async bool
        :param int media_id: The Media Id to Untag (required)
        :param list[str] tag: An array of tags (required)
        :return: Media
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['media_id', 'tag']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method media_untag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'media_id' is set
        if ('media_id' not in params or
                params['media_id'] is None):
            raise ValueError("Missing the required parameter `media_id` when calling `media_untag`")  # noqa: E501
        # verify the required parameter 'tag' is set
        if ('tag' not in params or
                params['tag'] is None):
            raise ValueError("Missing the required parameter `tag` when calling `media_untag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'media_id' in params:
            path_params['mediaId'] = params['media_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'tag' in params:
            form_params.append(('tag', params['tag']))  # noqa: E501
            collection_formats['tag'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/library/{mediaId}/untag', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Media',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
