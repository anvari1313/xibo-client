# coding: utf-8

"""
    Xibo API

    Xibo CMS API  # noqa: E501

    OpenAPI spec version: 1.8.0
    Contact: info@xibo.org.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TemplateApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def template_add_from_layout(self, layout_id, include_widgets, name, **kwargs):  # noqa: E501
        """Add a template from a Layout  # noqa: E501

        Use the provided layout as a base for a new template  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.template_add_from_layout(layout_id, include_widgets, name, async=True)
        >>> result = thread.get()

        :param async bool
        :param int layout_id: The Layout ID (required)
        :param int include_widgets: Flag indicating whether to include the widgets in the Template (required)
        :param str name: The Template Name (required)
        :param str tags: Comma separated list of Tags for the template
        :param str description: A description of the Template
        :return: Layout
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.template_add_from_layout_with_http_info(layout_id, include_widgets, name, **kwargs)  # noqa: E501
        else:
            (data) = self.template_add_from_layout_with_http_info(layout_id, include_widgets, name, **kwargs)  # noqa: E501
            return data

    def template_add_from_layout_with_http_info(self, layout_id, include_widgets, name, **kwargs):  # noqa: E501
        """Add a template from a Layout  # noqa: E501

        Use the provided layout as a base for a new template  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.template_add_from_layout_with_http_info(layout_id, include_widgets, name, async=True)
        >>> result = thread.get()

        :param async bool
        :param int layout_id: The Layout ID (required)
        :param int include_widgets: Flag indicating whether to include the widgets in the Template (required)
        :param str name: The Template Name (required)
        :param str tags: Comma separated list of Tags for the template
        :param str description: A description of the Template
        :return: Layout
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['layout_id', 'include_widgets', 'name', 'tags', 'description']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method template_add_from_layout" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'layout_id' is set
        if ('layout_id' not in params or
                params['layout_id'] is None):
            raise ValueError("Missing the required parameter `layout_id` when calling `template_add_from_layout`")  # noqa: E501
        # verify the required parameter 'include_widgets' is set
        if ('include_widgets' not in params or
                params['include_widgets'] is None):
            raise ValueError("Missing the required parameter `include_widgets` when calling `template_add_from_layout`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `template_add_from_layout`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'layout_id' in params:
            path_params['layoutId'] = params['layout_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'include_widgets' in params:
            form_params.append(('includeWidgets', params['include_widgets']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'tags' in params:
            form_params.append(('tags', params['tags']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/template/{layoutId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Layout',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def template_search(self, **kwargs):  # noqa: E501
        """Template Search  # noqa: E501

        Search templates this user has access to  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.template_search(async=True)
        >>> result = thread.get()

        :param async bool
        :return: list[Layout]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.template_search_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.template_search_with_http_info(**kwargs)  # noqa: E501
            return data

    def template_search_with_http_info(self, **kwargs):  # noqa: E501
        """Template Search  # noqa: E501

        Search templates this user has access to  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.template_search_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: list[Layout]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method template_search" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/template', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Layout]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
