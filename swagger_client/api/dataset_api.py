# coding: utf-8

"""
    Xibo API

    Xibo CMS API  # noqa: E501

    OpenAPI spec version: 1.8.0
    Contact: info@xibo.org.uk
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DatasetApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def data_set_add(self, data_set, is_remote, **kwargs):  # noqa: E501
        """Add DataSet  # noqa: E501

        Add a DataSet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.data_set_add(data_set, is_remote, async=True)
        >>> result = thread.get()

        :param async bool
        :param str data_set: The DataSet Name (required)
        :param int is_remote: Is this a remote DataSet? (required)
        :param str description: A description of this DataSet
        :param str code: A code for this DataSet
        :param str method: The Request Method GET or POST
        :param str uri: The URI, without query parameters
        :param str post_data: query parameter encoded data to add to the request
        :param str authentication: HTTP Authentication method None|Basic|Digest
        :param str username: HTTP Authentication User Name
        :param str password: HTTP Authentication Password
        :param int refresh_rate: How often in seconds should this remote DataSet be refreshed
        :param int clear_rate: How often in seconds should this remote DataSet be truncated
        :param int runs_after: An optional dataSetId which should be run before this Remote DataSet
        :param str data_root: The root of the data in the Remote source which is used as the base for all remote columns
        :param str summarize: Should the data be aggregated? None|Summarize|Count
        :param str summarize_field: Which field should be used to summarize
        :return: DataSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.data_set_add_with_http_info(data_set, is_remote, **kwargs)  # noqa: E501
        else:
            (data) = self.data_set_add_with_http_info(data_set, is_remote, **kwargs)  # noqa: E501
            return data

    def data_set_add_with_http_info(self, data_set, is_remote, **kwargs):  # noqa: E501
        """Add DataSet  # noqa: E501

        Add a DataSet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.data_set_add_with_http_info(data_set, is_remote, async=True)
        >>> result = thread.get()

        :param async bool
        :param str data_set: The DataSet Name (required)
        :param int is_remote: Is this a remote DataSet? (required)
        :param str description: A description of this DataSet
        :param str code: A code for this DataSet
        :param str method: The Request Method GET or POST
        :param str uri: The URI, without query parameters
        :param str post_data: query parameter encoded data to add to the request
        :param str authentication: HTTP Authentication method None|Basic|Digest
        :param str username: HTTP Authentication User Name
        :param str password: HTTP Authentication Password
        :param int refresh_rate: How often in seconds should this remote DataSet be refreshed
        :param int clear_rate: How often in seconds should this remote DataSet be truncated
        :param int runs_after: An optional dataSetId which should be run before this Remote DataSet
        :param str data_root: The root of the data in the Remote source which is used as the base for all remote columns
        :param str summarize: Should the data be aggregated? None|Summarize|Count
        :param str summarize_field: Which field should be used to summarize
        :return: DataSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_set', 'is_remote', 'description', 'code', 'method', 'uri', 'post_data', 'authentication', 'username', 'password', 'refresh_rate', 'clear_rate', 'runs_after', 'data_root', 'summarize', 'summarize_field']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_set_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_set' is set
        if ('data_set' not in params or
                params['data_set'] is None):
            raise ValueError("Missing the required parameter `data_set` when calling `data_set_add`")  # noqa: E501
        # verify the required parameter 'is_remote' is set
        if ('is_remote' not in params or
                params['is_remote'] is None):
            raise ValueError("Missing the required parameter `is_remote` when calling `data_set_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'data_set' in params:
            form_params.append(('dataSet', params['data_set']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'code' in params:
            form_params.append(('code', params['code']))  # noqa: E501
        if 'is_remote' in params:
            form_params.append(('isRemote', params['is_remote']))  # noqa: E501
        if 'method' in params:
            form_params.append(('method', params['method']))  # noqa: E501
        if 'uri' in params:
            form_params.append(('uri', params['uri']))  # noqa: E501
        if 'post_data' in params:
            form_params.append(('postData', params['post_data']))  # noqa: E501
        if 'authentication' in params:
            form_params.append(('authentication', params['authentication']))  # noqa: E501
        if 'username' in params:
            form_params.append(('username', params['username']))  # noqa: E501
        if 'password' in params:
            form_params.append(('password', params['password']))  # noqa: E501
        if 'refresh_rate' in params:
            form_params.append(('refreshRate', params['refresh_rate']))  # noqa: E501
        if 'clear_rate' in params:
            form_params.append(('clearRate', params['clear_rate']))  # noqa: E501
        if 'runs_after' in params:
            form_params.append(('runsAfter', params['runs_after']))  # noqa: E501
        if 'data_root' in params:
            form_params.append(('dataRoot', params['data_root']))  # noqa: E501
        if 'summarize' in params:
            form_params.append(('summarize', params['summarize']))  # noqa: E501
        if 'summarize_field' in params:
            form_params.append(('summarizeField', params['summarize_field']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/dataset', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DataSet',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_set_column_add(self, data_set_id, heading, column_order, data_type_id, data_set_column_type_id, show_filter, show_sort, **kwargs):  # noqa: E501
        """Add Column  # noqa: E501

        Add a Column to a DataSet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.data_set_column_add(data_set_id, heading, column_order, data_type_id, data_set_column_type_id, show_filter, show_sort, async=True)
        >>> result = thread.get()

        :param async bool
        :param int data_set_id: The DataSet ID (required)
        :param str heading: The heading for the Column (required)
        :param int column_order: The display order for this column (required)
        :param int data_type_id: The data type ID for this column (required)
        :param int data_set_column_type_id: The column type for this column (required)
        :param int show_filter: Flag indicating whether this column should present a filter on DataEntry (required)
        :param int show_sort: Flag indicating whether this column should allow sorting on DataEntry (required)
        :param str list_content: A comma separated list of content for drop downs
        :param str formula: MySQL SELECT syntax formula for this Column if the column type is formula
        :param str remote_field: JSON-String to select Data from the Remote DataSet
        :return: DataSetColumn
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.data_set_column_add_with_http_info(data_set_id, heading, column_order, data_type_id, data_set_column_type_id, show_filter, show_sort, **kwargs)  # noqa: E501
        else:
            (data) = self.data_set_column_add_with_http_info(data_set_id, heading, column_order, data_type_id, data_set_column_type_id, show_filter, show_sort, **kwargs)  # noqa: E501
            return data

    def data_set_column_add_with_http_info(self, data_set_id, heading, column_order, data_type_id, data_set_column_type_id, show_filter, show_sort, **kwargs):  # noqa: E501
        """Add Column  # noqa: E501

        Add a Column to a DataSet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.data_set_column_add_with_http_info(data_set_id, heading, column_order, data_type_id, data_set_column_type_id, show_filter, show_sort, async=True)
        >>> result = thread.get()

        :param async bool
        :param int data_set_id: The DataSet ID (required)
        :param str heading: The heading for the Column (required)
        :param int column_order: The display order for this column (required)
        :param int data_type_id: The data type ID for this column (required)
        :param int data_set_column_type_id: The column type for this column (required)
        :param int show_filter: Flag indicating whether this column should present a filter on DataEntry (required)
        :param int show_sort: Flag indicating whether this column should allow sorting on DataEntry (required)
        :param str list_content: A comma separated list of content for drop downs
        :param str formula: MySQL SELECT syntax formula for this Column if the column type is formula
        :param str remote_field: JSON-String to select Data from the Remote DataSet
        :return: DataSetColumn
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_set_id', 'heading', 'column_order', 'data_type_id', 'data_set_column_type_id', 'show_filter', 'show_sort', 'list_content', 'formula', 'remote_field']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_set_column_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_set_id' is set
        if ('data_set_id' not in params or
                params['data_set_id'] is None):
            raise ValueError("Missing the required parameter `data_set_id` when calling `data_set_column_add`")  # noqa: E501
        # verify the required parameter 'heading' is set
        if ('heading' not in params or
                params['heading'] is None):
            raise ValueError("Missing the required parameter `heading` when calling `data_set_column_add`")  # noqa: E501
        # verify the required parameter 'column_order' is set
        if ('column_order' not in params or
                params['column_order'] is None):
            raise ValueError("Missing the required parameter `column_order` when calling `data_set_column_add`")  # noqa: E501
        # verify the required parameter 'data_type_id' is set
        if ('data_type_id' not in params or
                params['data_type_id'] is None):
            raise ValueError("Missing the required parameter `data_type_id` when calling `data_set_column_add`")  # noqa: E501
        # verify the required parameter 'data_set_column_type_id' is set
        if ('data_set_column_type_id' not in params or
                params['data_set_column_type_id'] is None):
            raise ValueError("Missing the required parameter `data_set_column_type_id` when calling `data_set_column_add`")  # noqa: E501
        # verify the required parameter 'show_filter' is set
        if ('show_filter' not in params or
                params['show_filter'] is None):
            raise ValueError("Missing the required parameter `show_filter` when calling `data_set_column_add`")  # noqa: E501
        # verify the required parameter 'show_sort' is set
        if ('show_sort' not in params or
                params['show_sort'] is None):
            raise ValueError("Missing the required parameter `show_sort` when calling `data_set_column_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'data_set_id' in params:
            path_params['dataSetId'] = params['data_set_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'heading' in params:
            form_params.append(('heading', params['heading']))  # noqa: E501
        if 'list_content' in params:
            form_params.append(('listContent', params['list_content']))  # noqa: E501
        if 'column_order' in params:
            form_params.append(('columnOrder', params['column_order']))  # noqa: E501
        if 'data_type_id' in params:
            form_params.append(('dataTypeId', params['data_type_id']))  # noqa: E501
        if 'data_set_column_type_id' in params:
            form_params.append(('dataSetColumnTypeId', params['data_set_column_type_id']))  # noqa: E501
        if 'formula' in params:
            form_params.append(('formula', params['formula']))  # noqa: E501
        if 'remote_field' in params:
            form_params.append(('remoteField', params['remote_field']))  # noqa: E501
        if 'show_filter' in params:
            form_params.append(('showFilter', params['show_filter']))  # noqa: E501
        if 'show_sort' in params:
            form_params.append(('showSort', params['show_sort']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/dataset/{dataSetId}/column', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DataSetColumn',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_set_column_delete(self, data_set_id, data_set_column_id, **kwargs):  # noqa: E501
        """Delete Column  # noqa: E501

        Delete DataSet Column  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.data_set_column_delete(data_set_id, data_set_column_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int data_set_id: The DataSet ID (required)
        :param int data_set_column_id: The Column ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.data_set_column_delete_with_http_info(data_set_id, data_set_column_id, **kwargs)  # noqa: E501
        else:
            (data) = self.data_set_column_delete_with_http_info(data_set_id, data_set_column_id, **kwargs)  # noqa: E501
            return data

    def data_set_column_delete_with_http_info(self, data_set_id, data_set_column_id, **kwargs):  # noqa: E501
        """Delete Column  # noqa: E501

        Delete DataSet Column  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.data_set_column_delete_with_http_info(data_set_id, data_set_column_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int data_set_id: The DataSet ID (required)
        :param int data_set_column_id: The Column ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_set_id', 'data_set_column_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_set_column_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_set_id' is set
        if ('data_set_id' not in params or
                params['data_set_id'] is None):
            raise ValueError("Missing the required parameter `data_set_id` when calling `data_set_column_delete`")  # noqa: E501
        # verify the required parameter 'data_set_column_id' is set
        if ('data_set_column_id' not in params or
                params['data_set_column_id'] is None):
            raise ValueError("Missing the required parameter `data_set_column_id` when calling `data_set_column_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'data_set_id' in params:
            path_params['dataSetId'] = params['data_set_id']  # noqa: E501
        if 'data_set_column_id' in params:
            path_params['dataSetColumnId'] = params['data_set_column_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/dataset/{dataSetId}/column/{dataSetColumnId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_set_column_edit(self, data_set_id, data_set_column_id, heading, column_order, data_type_id, data_set_column_type_id, show_filter, show_sort, **kwargs):  # noqa: E501
        """Edit Column  # noqa: E501

        Edit a Column to a DataSet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.data_set_column_edit(data_set_id, data_set_column_id, heading, column_order, data_type_id, data_set_column_type_id, show_filter, show_sort, async=True)
        >>> result = thread.get()

        :param async bool
        :param int data_set_id: The DataSet ID (required)
        :param int data_set_column_id: The Column ID (required)
        :param str heading: The heading for the Column (required)
        :param int column_order: The display order for this column (required)
        :param int data_type_id: The data type ID for this column (required)
        :param int data_set_column_type_id: The column type for this column (required)
        :param int show_filter: Flag indicating whether this column should present a filter on DataEntry (required)
        :param int show_sort: Flag indicating whether this column should allow sorting on DataEntry (required)
        :param str list_content: A comma separated list of content for drop downs
        :param str formula: MySQL SELECT syntax formula for this Column if the column type is formula
        :param str remote_field: JSON-String to select Data from the Remote DataSet
        :return: DataSetColumn
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.data_set_column_edit_with_http_info(data_set_id, data_set_column_id, heading, column_order, data_type_id, data_set_column_type_id, show_filter, show_sort, **kwargs)  # noqa: E501
        else:
            (data) = self.data_set_column_edit_with_http_info(data_set_id, data_set_column_id, heading, column_order, data_type_id, data_set_column_type_id, show_filter, show_sort, **kwargs)  # noqa: E501
            return data

    def data_set_column_edit_with_http_info(self, data_set_id, data_set_column_id, heading, column_order, data_type_id, data_set_column_type_id, show_filter, show_sort, **kwargs):  # noqa: E501
        """Edit Column  # noqa: E501

        Edit a Column to a DataSet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.data_set_column_edit_with_http_info(data_set_id, data_set_column_id, heading, column_order, data_type_id, data_set_column_type_id, show_filter, show_sort, async=True)
        >>> result = thread.get()

        :param async bool
        :param int data_set_id: The DataSet ID (required)
        :param int data_set_column_id: The Column ID (required)
        :param str heading: The heading for the Column (required)
        :param int column_order: The display order for this column (required)
        :param int data_type_id: The data type ID for this column (required)
        :param int data_set_column_type_id: The column type for this column (required)
        :param int show_filter: Flag indicating whether this column should present a filter on DataEntry (required)
        :param int show_sort: Flag indicating whether this column should allow sorting on DataEntry (required)
        :param str list_content: A comma separated list of content for drop downs
        :param str formula: MySQL SELECT syntax formula for this Column if the column type is formula
        :param str remote_field: JSON-String to select Data from the Remote DataSet
        :return: DataSetColumn
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_set_id', 'data_set_column_id', 'heading', 'column_order', 'data_type_id', 'data_set_column_type_id', 'show_filter', 'show_sort', 'list_content', 'formula', 'remote_field']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_set_column_edit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_set_id' is set
        if ('data_set_id' not in params or
                params['data_set_id'] is None):
            raise ValueError("Missing the required parameter `data_set_id` when calling `data_set_column_edit`")  # noqa: E501
        # verify the required parameter 'data_set_column_id' is set
        if ('data_set_column_id' not in params or
                params['data_set_column_id'] is None):
            raise ValueError("Missing the required parameter `data_set_column_id` when calling `data_set_column_edit`")  # noqa: E501
        # verify the required parameter 'heading' is set
        if ('heading' not in params or
                params['heading'] is None):
            raise ValueError("Missing the required parameter `heading` when calling `data_set_column_edit`")  # noqa: E501
        # verify the required parameter 'column_order' is set
        if ('column_order' not in params or
                params['column_order'] is None):
            raise ValueError("Missing the required parameter `column_order` when calling `data_set_column_edit`")  # noqa: E501
        # verify the required parameter 'data_type_id' is set
        if ('data_type_id' not in params or
                params['data_type_id'] is None):
            raise ValueError("Missing the required parameter `data_type_id` when calling `data_set_column_edit`")  # noqa: E501
        # verify the required parameter 'data_set_column_type_id' is set
        if ('data_set_column_type_id' not in params or
                params['data_set_column_type_id'] is None):
            raise ValueError("Missing the required parameter `data_set_column_type_id` when calling `data_set_column_edit`")  # noqa: E501
        # verify the required parameter 'show_filter' is set
        if ('show_filter' not in params or
                params['show_filter'] is None):
            raise ValueError("Missing the required parameter `show_filter` when calling `data_set_column_edit`")  # noqa: E501
        # verify the required parameter 'show_sort' is set
        if ('show_sort' not in params or
                params['show_sort'] is None):
            raise ValueError("Missing the required parameter `show_sort` when calling `data_set_column_edit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'data_set_id' in params:
            path_params['dataSetId'] = params['data_set_id']  # noqa: E501
        if 'data_set_column_id' in params:
            path_params['dataSetColumnId'] = params['data_set_column_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'heading' in params:
            form_params.append(('heading', params['heading']))  # noqa: E501
        if 'list_content' in params:
            form_params.append(('listContent', params['list_content']))  # noqa: E501
        if 'column_order' in params:
            form_params.append(('columnOrder', params['column_order']))  # noqa: E501
        if 'data_type_id' in params:
            form_params.append(('dataTypeId', params['data_type_id']))  # noqa: E501
        if 'data_set_column_type_id' in params:
            form_params.append(('dataSetColumnTypeId', params['data_set_column_type_id']))  # noqa: E501
        if 'formula' in params:
            form_params.append(('formula', params['formula']))  # noqa: E501
        if 'remote_field' in params:
            form_params.append(('remoteField', params['remote_field']))  # noqa: E501
        if 'show_filter' in params:
            form_params.append(('showFilter', params['show_filter']))  # noqa: E501
        if 'show_sort' in params:
            form_params.append(('showSort', params['show_sort']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/dataset/{dataSetId}/column/{dataSetColumnId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DataSetColumn',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_set_column_search(self, data_set_id, **kwargs):  # noqa: E501
        """Search Columns  # noqa: E501

        Search Columns for DataSet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.data_set_column_search(data_set_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int data_set_id: The DataSet ID (required)
        :param int data_set_column_id: Filter by DataSet ColumnID
        :return: list[DataSetColumn]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.data_set_column_search_with_http_info(data_set_id, **kwargs)  # noqa: E501
        else:
            (data) = self.data_set_column_search_with_http_info(data_set_id, **kwargs)  # noqa: E501
            return data

    def data_set_column_search_with_http_info(self, data_set_id, **kwargs):  # noqa: E501
        """Search Columns  # noqa: E501

        Search Columns for DataSet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.data_set_column_search_with_http_info(data_set_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int data_set_id: The DataSet ID (required)
        :param int data_set_column_id: Filter by DataSet ColumnID
        :return: list[DataSetColumn]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_set_id', 'data_set_column_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_set_column_search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_set_id' is set
        if ('data_set_id' not in params or
                params['data_set_id'] is None):
            raise ValueError("Missing the required parameter `data_set_id` when calling `data_set_column_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'data_set_id' in params:
            path_params['dataSetId'] = params['data_set_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'data_set_column_id' in params:
            form_params.append(('dataSetColumnId', params['data_set_column_id']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/dataset/{dataSetId}/column', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DataSetColumn]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_set_copy(self, data_set_id, data_set, **kwargs):  # noqa: E501
        """Copy DataSet  # noqa: E501

        Copy a DataSet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.data_set_copy(data_set_id, data_set, async=True)
        >>> result = thread.get()

        :param async bool
        :param int data_set_id: The DataSet ID (required)
        :param str data_set: The DataSet Name (required)
        :param str description: A description of this DataSet
        :param str code: A code for this DataSet
        :return: DataSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.data_set_copy_with_http_info(data_set_id, data_set, **kwargs)  # noqa: E501
        else:
            (data) = self.data_set_copy_with_http_info(data_set_id, data_set, **kwargs)  # noqa: E501
            return data

    def data_set_copy_with_http_info(self, data_set_id, data_set, **kwargs):  # noqa: E501
        """Copy DataSet  # noqa: E501

        Copy a DataSet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.data_set_copy_with_http_info(data_set_id, data_set, async=True)
        >>> result = thread.get()

        :param async bool
        :param int data_set_id: The DataSet ID (required)
        :param str data_set: The DataSet Name (required)
        :param str description: A description of this DataSet
        :param str code: A code for this DataSet
        :return: DataSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_set_id', 'data_set', 'description', 'code']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_set_copy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_set_id' is set
        if ('data_set_id' not in params or
                params['data_set_id'] is None):
            raise ValueError("Missing the required parameter `data_set_id` when calling `data_set_copy`")  # noqa: E501
        # verify the required parameter 'data_set' is set
        if ('data_set' not in params or
                params['data_set'] is None):
            raise ValueError("Missing the required parameter `data_set` when calling `data_set_copy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'data_set_id' in params:
            path_params['dataSetId'] = params['data_set_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'data_set' in params:
            form_params.append(('dataSet', params['data_set']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'code' in params:
            form_params.append(('code', params['code']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/dataset/copy/{dataSetId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DataSet',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_set_data(self, data_set_id, **kwargs):  # noqa: E501
        """DataSet Data  # noqa: E501

        Get Data for DataSet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.data_set_data(data_set_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int data_set_id: The DataSet ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.data_set_data_with_http_info(data_set_id, **kwargs)  # noqa: E501
        else:
            (data) = self.data_set_data_with_http_info(data_set_id, **kwargs)  # noqa: E501
            return data

    def data_set_data_with_http_info(self, data_set_id, **kwargs):  # noqa: E501
        """DataSet Data  # noqa: E501

        Get Data for DataSet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.data_set_data_with_http_info(data_set_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int data_set_id: The DataSet ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_set_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_set_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_set_id' is set
        if ('data_set_id' not in params or
                params['data_set_id'] is None):
            raise ValueError("Missing the required parameter `data_set_id` when calling `data_set_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'data_set_id' in params:
            path_params['dataSetId'] = params['data_set_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/dataset/data/{dataSetId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_set_data_add(self, data_set_id, data_set_column_id_id, **kwargs):  # noqa: E501
        """Add Row  # noqa: E501

        Add a row of Data to a DataSet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.data_set_data_add(data_set_id, data_set_column_id_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int data_set_id: The DataSet ID (required)
        :param str data_set_column_id_id: Parameter for each dataSetColumnId in the DataSet (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.data_set_data_add_with_http_info(data_set_id, data_set_column_id_id, **kwargs)  # noqa: E501
        else:
            (data) = self.data_set_data_add_with_http_info(data_set_id, data_set_column_id_id, **kwargs)  # noqa: E501
            return data

    def data_set_data_add_with_http_info(self, data_set_id, data_set_column_id_id, **kwargs):  # noqa: E501
        """Add Row  # noqa: E501

        Add a row of Data to a DataSet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.data_set_data_add_with_http_info(data_set_id, data_set_column_id_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int data_set_id: The DataSet ID (required)
        :param str data_set_column_id_id: Parameter for each dataSetColumnId in the DataSet (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_set_id', 'data_set_column_id_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_set_data_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_set_id' is set
        if ('data_set_id' not in params or
                params['data_set_id'] is None):
            raise ValueError("Missing the required parameter `data_set_id` when calling `data_set_data_add`")  # noqa: E501
        # verify the required parameter 'data_set_column_id_id' is set
        if ('data_set_column_id_id' not in params or
                params['data_set_column_id_id'] is None):
            raise ValueError("Missing the required parameter `data_set_column_id_id` when calling `data_set_data_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'data_set_id' in params:
            path_params['dataSetId'] = params['data_set_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'data_set_column_id_id' in params:
            form_params.append(('dataSetColumnId_ID', params['data_set_column_id_id']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/dataset/data/{dataSetId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_set_data_delete(self, data_set_id, row_id, **kwargs):  # noqa: E501
        """Delete Row  # noqa: E501

        Delete a row of Data to a DataSet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.data_set_data_delete(data_set_id, row_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int data_set_id: The DataSet ID (required)
        :param int row_id: The Row ID of the Data to Delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.data_set_data_delete_with_http_info(data_set_id, row_id, **kwargs)  # noqa: E501
        else:
            (data) = self.data_set_data_delete_with_http_info(data_set_id, row_id, **kwargs)  # noqa: E501
            return data

    def data_set_data_delete_with_http_info(self, data_set_id, row_id, **kwargs):  # noqa: E501
        """Delete Row  # noqa: E501

        Delete a row of Data to a DataSet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.data_set_data_delete_with_http_info(data_set_id, row_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int data_set_id: The DataSet ID (required)
        :param int row_id: The Row ID of the Data to Delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_set_id', 'row_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_set_data_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_set_id' is set
        if ('data_set_id' not in params or
                params['data_set_id'] is None):
            raise ValueError("Missing the required parameter `data_set_id` when calling `data_set_data_delete`")  # noqa: E501
        # verify the required parameter 'row_id' is set
        if ('row_id' not in params or
                params['row_id'] is None):
            raise ValueError("Missing the required parameter `row_id` when calling `data_set_data_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'data_set_id' in params:
            path_params['dataSetId'] = params['data_set_id']  # noqa: E501
        if 'row_id' in params:
            path_params['rowId'] = params['row_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/dataset/data/{dataSetId}/{rowId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_set_data_edit(self, data_set_id, row_id, data_set_column_id_id, **kwargs):  # noqa: E501
        """Edit Row  # noqa: E501

        Edit a row of Data to a DataSet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.data_set_data_edit(data_set_id, row_id, data_set_column_id_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int data_set_id: The DataSet ID (required)
        :param int row_id: The Row ID of the Data to Edit (required)
        :param str data_set_column_id_id: Parameter for each dataSetColumnId in the DataSet (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.data_set_data_edit_with_http_info(data_set_id, row_id, data_set_column_id_id, **kwargs)  # noqa: E501
        else:
            (data) = self.data_set_data_edit_with_http_info(data_set_id, row_id, data_set_column_id_id, **kwargs)  # noqa: E501
            return data

    def data_set_data_edit_with_http_info(self, data_set_id, row_id, data_set_column_id_id, **kwargs):  # noqa: E501
        """Edit Row  # noqa: E501

        Edit a row of Data to a DataSet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.data_set_data_edit_with_http_info(data_set_id, row_id, data_set_column_id_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int data_set_id: The DataSet ID (required)
        :param int row_id: The Row ID of the Data to Edit (required)
        :param str data_set_column_id_id: Parameter for each dataSetColumnId in the DataSet (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_set_id', 'row_id', 'data_set_column_id_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_set_data_edit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_set_id' is set
        if ('data_set_id' not in params or
                params['data_set_id'] is None):
            raise ValueError("Missing the required parameter `data_set_id` when calling `data_set_data_edit`")  # noqa: E501
        # verify the required parameter 'row_id' is set
        if ('row_id' not in params or
                params['row_id'] is None):
            raise ValueError("Missing the required parameter `row_id` when calling `data_set_data_edit`")  # noqa: E501
        # verify the required parameter 'data_set_column_id_id' is set
        if ('data_set_column_id_id' not in params or
                params['data_set_column_id_id'] is None):
            raise ValueError("Missing the required parameter `data_set_column_id_id` when calling `data_set_data_edit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'data_set_id' in params:
            path_params['dataSetId'] = params['data_set_id']  # noqa: E501
        if 'row_id' in params:
            path_params['rowId'] = params['row_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'data_set_column_id_id' in params:
            form_params.append(('dataSetColumnId_ID', params['data_set_column_id_id']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/dataset/data/{dataSetId}/{rowId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_set_delete(self, data_set_id, **kwargs):  # noqa: E501
        """Delete DataSet  # noqa: E501

        Delete a DataSet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.data_set_delete(data_set_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int data_set_id: The DataSet ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.data_set_delete_with_http_info(data_set_id, **kwargs)  # noqa: E501
        else:
            (data) = self.data_set_delete_with_http_info(data_set_id, **kwargs)  # noqa: E501
            return data

    def data_set_delete_with_http_info(self, data_set_id, **kwargs):  # noqa: E501
        """Delete DataSet  # noqa: E501

        Delete a DataSet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.data_set_delete_with_http_info(data_set_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int data_set_id: The DataSet ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_set_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_set_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_set_id' is set
        if ('data_set_id' not in params or
                params['data_set_id'] is None):
            raise ValueError("Missing the required parameter `data_set_id` when calling `data_set_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'data_set_id' in params:
            path_params['dataSetId'] = params['data_set_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/dataset/{dataSetId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_set_edit(self, data_set_id, data_set, is_remote, **kwargs):  # noqa: E501
        """Edit DataSet  # noqa: E501

        Edit a DataSet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.data_set_edit(data_set_id, data_set, is_remote, async=True)
        >>> result = thread.get()

        :param async bool
        :param int data_set_id: The DataSet ID (required)
        :param str data_set: The DataSet Name (required)
        :param int is_remote: Is this a remote DataSet? (required)
        :param str description: A description of this DataSet
        :param str code: A code for this DataSet
        :param str method: The Request Method GET or POST
        :param str uri: The URI, without query parameters
        :param str post_data: query parameter encoded data to add to the request
        :param str authentication: HTTP Authentication method None|Basic|Digest
        :param str username: HTTP Authentication User Name
        :param str password: HTTP Authentication Password
        :param int refresh_rate: How often in seconds should this remote DataSet be refreshed
        :param int clear_rate: How often in seconds should this remote DataSet be truncated
        :param int runs_after: An optional dataSetId which should be run before this Remote DataSet
        :param str data_root: The root of the data in the Remote source which is used as the base for all remote columns
        :param str summarize: Should the data be aggregated? None|Summarize|Count
        :param str summarize_field: Which field should be used to summarize
        :return: DataSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.data_set_edit_with_http_info(data_set_id, data_set, is_remote, **kwargs)  # noqa: E501
        else:
            (data) = self.data_set_edit_with_http_info(data_set_id, data_set, is_remote, **kwargs)  # noqa: E501
            return data

    def data_set_edit_with_http_info(self, data_set_id, data_set, is_remote, **kwargs):  # noqa: E501
        """Edit DataSet  # noqa: E501

        Edit a DataSet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.data_set_edit_with_http_info(data_set_id, data_set, is_remote, async=True)
        >>> result = thread.get()

        :param async bool
        :param int data_set_id: The DataSet ID (required)
        :param str data_set: The DataSet Name (required)
        :param int is_remote: Is this a remote DataSet? (required)
        :param str description: A description of this DataSet
        :param str code: A code for this DataSet
        :param str method: The Request Method GET or POST
        :param str uri: The URI, without query parameters
        :param str post_data: query parameter encoded data to add to the request
        :param str authentication: HTTP Authentication method None|Basic|Digest
        :param str username: HTTP Authentication User Name
        :param str password: HTTP Authentication Password
        :param int refresh_rate: How often in seconds should this remote DataSet be refreshed
        :param int clear_rate: How often in seconds should this remote DataSet be truncated
        :param int runs_after: An optional dataSetId which should be run before this Remote DataSet
        :param str data_root: The root of the data in the Remote source which is used as the base for all remote columns
        :param str summarize: Should the data be aggregated? None|Summarize|Count
        :param str summarize_field: Which field should be used to summarize
        :return: DataSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_set_id', 'data_set', 'is_remote', 'description', 'code', 'method', 'uri', 'post_data', 'authentication', 'username', 'password', 'refresh_rate', 'clear_rate', 'runs_after', 'data_root', 'summarize', 'summarize_field']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_set_edit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_set_id' is set
        if ('data_set_id' not in params or
                params['data_set_id'] is None):
            raise ValueError("Missing the required parameter `data_set_id` when calling `data_set_edit`")  # noqa: E501
        # verify the required parameter 'data_set' is set
        if ('data_set' not in params or
                params['data_set'] is None):
            raise ValueError("Missing the required parameter `data_set` when calling `data_set_edit`")  # noqa: E501
        # verify the required parameter 'is_remote' is set
        if ('is_remote' not in params or
                params['is_remote'] is None):
            raise ValueError("Missing the required parameter `is_remote` when calling `data_set_edit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'data_set_id' in params:
            path_params['dataSetId'] = params['data_set_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'data_set' in params:
            form_params.append(('dataSet', params['data_set']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'code' in params:
            form_params.append(('code', params['code']))  # noqa: E501
        if 'is_remote' in params:
            form_params.append(('isRemote', params['is_remote']))  # noqa: E501
        if 'method' in params:
            form_params.append(('method', params['method']))  # noqa: E501
        if 'uri' in params:
            form_params.append(('uri', params['uri']))  # noqa: E501
        if 'post_data' in params:
            form_params.append(('postData', params['post_data']))  # noqa: E501
        if 'authentication' in params:
            form_params.append(('authentication', params['authentication']))  # noqa: E501
        if 'username' in params:
            form_params.append(('username', params['username']))  # noqa: E501
        if 'password' in params:
            form_params.append(('password', params['password']))  # noqa: E501
        if 'refresh_rate' in params:
            form_params.append(('refreshRate', params['refresh_rate']))  # noqa: E501
        if 'clear_rate' in params:
            form_params.append(('clearRate', params['clear_rate']))  # noqa: E501
        if 'runs_after' in params:
            form_params.append(('runsAfter', params['runs_after']))  # noqa: E501
        if 'data_root' in params:
            form_params.append(('dataRoot', params['data_root']))  # noqa: E501
        if 'summarize' in params:
            form_params.append(('summarize', params['summarize']))  # noqa: E501
        if 'summarize_field' in params:
            form_params.append(('summarizeField', params['summarize_field']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/dataset/{dataSetId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DataSet',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_set_import(self, data_set_id, files, csv_import_data_set_column_id, **kwargs):  # noqa: E501
        """Import CSV  # noqa: E501

        Import a CSV into a DataSet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.data_set_import(data_set_id, files, csv_import_data_set_column_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int data_set_id: The DataSet ID to import into. (required)
        :param file files: The file (required)
        :param int csv_import_data_set_column_id: You need to provide dataSetColumnId after csvImport_, to know your dataSet columns Ids, you will need to use the GET /dataset/{dataSetId}/column call first. The value of this parameter is the index of the column in your csv file, where the first column is 1 (required)
        :param int overwrite: flag (0,1) Set to 1 to erase all content in the dataSet and overwrite it with new content in this import
        :param int ignorefirstrow: flag (0,1), Set to 1 to Ignore first row, useful if the CSV file has headings
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.data_set_import_with_http_info(data_set_id, files, csv_import_data_set_column_id, **kwargs)  # noqa: E501
        else:
            (data) = self.data_set_import_with_http_info(data_set_id, files, csv_import_data_set_column_id, **kwargs)  # noqa: E501
            return data

    def data_set_import_with_http_info(self, data_set_id, files, csv_import_data_set_column_id, **kwargs):  # noqa: E501
        """Import CSV  # noqa: E501

        Import a CSV into a DataSet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.data_set_import_with_http_info(data_set_id, files, csv_import_data_set_column_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int data_set_id: The DataSet ID to import into. (required)
        :param file files: The file (required)
        :param int csv_import_data_set_column_id: You need to provide dataSetColumnId after csvImport_, to know your dataSet columns Ids, you will need to use the GET /dataset/{dataSetId}/column call first. The value of this parameter is the index of the column in your csv file, where the first column is 1 (required)
        :param int overwrite: flag (0,1) Set to 1 to erase all content in the dataSet and overwrite it with new content in this import
        :param int ignorefirstrow: flag (0,1), Set to 1 to Ignore first row, useful if the CSV file has headings
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_set_id', 'files', 'csv_import_data_set_column_id', 'overwrite', 'ignorefirstrow']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_set_import" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_set_id' is set
        if ('data_set_id' not in params or
                params['data_set_id'] is None):
            raise ValueError("Missing the required parameter `data_set_id` when calling `data_set_import`")  # noqa: E501
        # verify the required parameter 'files' is set
        if ('files' not in params or
                params['files'] is None):
            raise ValueError("Missing the required parameter `files` when calling `data_set_import`")  # noqa: E501
        # verify the required parameter 'csv_import_data_set_column_id' is set
        if ('csv_import_data_set_column_id' not in params or
                params['csv_import_data_set_column_id'] is None):
            raise ValueError("Missing the required parameter `csv_import_data_set_column_id` when calling `data_set_import`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'data_set_id' in params:
            path_params['dataSetId'] = params['data_set_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'files' in params:
            local_var_files['files'] = params['files']  # noqa: E501
        if 'csv_import_data_set_column_id' in params:
            form_params.append(('csvImport_{dataSetColumnId}', params['csv_import_data_set_column_id']))  # noqa: E501
        if 'overwrite' in params:
            form_params.append(('overwrite', params['overwrite']))  # noqa: E501
        if 'ignorefirstrow' in params:
            form_params.append(('ignorefirstrow', params['ignorefirstrow']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/dataset/import/{dataSetId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_set_import_json(self, data_set_id, data, **kwargs):  # noqa: E501
        """Import JSON  # noqa: E501

        Import JSON into a DataSet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.data_set_import_json(data_set_id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param int data_set_id: The DataSet ID to import into. (required)
        :param  data: The row data, field name vs field data format. e.g. { uniqueKeys: [col1], rows: [{col1: value1}]} (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.data_set_import_json_with_http_info(data_set_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.data_set_import_json_with_http_info(data_set_id, data, **kwargs)  # noqa: E501
            return data

    def data_set_import_json_with_http_info(self, data_set_id, data, **kwargs):  # noqa: E501
        """Import JSON  # noqa: E501

        Import JSON into a DataSet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.data_set_import_json_with_http_info(data_set_id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param int data_set_id: The DataSet ID to import into. (required)
        :param  data: The row data, field name vs field data format. e.g. { uniqueKeys: [col1], rows: [{col1: value1}]} (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_set_id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_set_import_json" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_set_id' is set
        if ('data_set_id' not in params or
                params['data_set_id'] is None):
            raise ValueError("Missing the required parameter `data_set_id` when calling `data_set_import_json`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `data_set_import_json`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'data_set_id' in params:
            path_params['dataSetId'] = params['data_set_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/dataset/importjson/{dataSetId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_set_search(self, **kwargs):  # noqa: E501
        """DataSet Search  # noqa: E501

        Search this users DataSets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.data_set_search(async=True)
        >>> result = thread.get()

        :param async bool
        :param int data_set_id: Filter by DataSet Id
        :param str data_set: Filter by DataSet Name
        :param str code: Filter by DataSet Code
        :param str embed: Embed related data such as columns
        :return: list[DataSet]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.data_set_search_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.data_set_search_with_http_info(**kwargs)  # noqa: E501
            return data

    def data_set_search_with_http_info(self, **kwargs):  # noqa: E501
        """DataSet Search  # noqa: E501

        Search this users DataSets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.data_set_search_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int data_set_id: Filter by DataSet Id
        :param str data_set: Filter by DataSet Name
        :param str code: Filter by DataSet Code
        :param str embed: Embed related data such as columns
        :return: list[DataSet]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_set_id', 'data_set', 'code', 'embed']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_set_search" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'data_set_id' in params:
            form_params.append(('dataSetId', params['data_set_id']))  # noqa: E501
        if 'data_set' in params:
            form_params.append(('dataSet', params['data_set']))  # noqa: E501
        if 'code' in params:
            form_params.append(('code', params['code']))  # noqa: E501
        if 'embed' in params:
            form_params.append(('embed', params['embed']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/dataset', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DataSet]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
